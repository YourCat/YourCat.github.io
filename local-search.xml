<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/25/hello-world/"/>
    <url>/2021/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>狂神SpingBoot 异步、定时、邮件任务</title>
    <link href="/2021/04/02/2021-4-2-task/"/>
    <url>/2021/04/02/2021-4-2-task/</url>
    
    <content type="html"><![CDATA[<h2 id="异步、定时、邮件任务"><a href="#异步、定时、邮件任务" class="headerlink" title="异步、定时、邮件任务"></a>异步、定时、邮件任务</h2><p><strong>异步任务</strong></p><p>异步处理在网站发送邮件时，后台发送邮件，前台会造成相应不动，直到邮件发送完成，所以我们一般会采用多线程的方式去处理这些任务。</p><p>步骤：</p><p>1.创建service包</p><p>2.创建AsyncService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncService</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;业务进行中...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.编写controller包</p><p>4.编写AsyncController测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncController</span></span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    AsyncService asyncService;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        asyncService.hello();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success">http://localhost:8080/hello进行测试，3秒后出现success</a></p><p>Q：在后台使用多线程方式实现太麻烦，只需要使用注解即可。</p><p>6.给hello方法添加@Async注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot会自己开一个线程池进行调用！使用这个注解还需要在主程序上添加注解@EnableAsync开启注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootTaskApplication</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>7.重启测试，网页瞬间相应，后台代码依旧执行。</p><p><strong>定时任务</strong></p><p>Spring提供异步主席那个任务调度的方式，提供了两个接口</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p>步骤：</p><p>1.创建一个ScheduledService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledSevice</span></span>&#123;<br><span class="hljs-meta">@Scheduled(cron=&quot;0****0-7&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello...&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.写完定时任务后，在主程序加上@EnableScheduling开启</p><p>3.详细了解cron表达式</p><p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p><strong>邮件任务</strong></p><p>邮件发送在日常开发中使用很多，Springboot也做了支持</p><ul><li>邮件发送引入spring-boot-start-mail</li><li>SpringBoot自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p>步骤：</p><p>1.引入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.查看配置文件</p><p>3.配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.mail.username</span>=<span class="hljs-string">...@qq.com</span><br><span class="hljs-meta">spring.mail.password</span>=<span class="hljs-string">你的qq授权码</span><br><span class="hljs-meta">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-comment"># qq需要配置ssl</span><br><span class="hljs-meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p><p>4.Spring单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>JavaMailSenderImpl mailSender;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-comment">//邮件设置1：一个简单的邮件</span><br>   SimpleMailMessage message = <span class="hljs-keyword">new</span> SimpleMailMessage();<br>   message.setSubject(<span class="hljs-string">&quot;通知-明天来狂神这听课&quot;</span>);<br>   message.setText(<span class="hljs-string">&quot;今晚7:30开会&quot;</span>);<br><br>   message.setTo(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br>   message.setFrom(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br>   mailSender.send(message);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException </span>&#123;<br>   <span class="hljs-comment">//邮件设置2：一个复杂的邮件</span><br>   MimeMessage mimeMessage = mailSender.createMimeMessage();<br>   MimeMessageHelper helper = <span class="hljs-keyword">new</span> MimeMessageHelper(mimeMessage, <span class="hljs-keyword">true</span>);<br><br>   helper.setSubject(<span class="hljs-string">&quot;通知-明天来狂神这听课&quot;</span>);<br>   helper.setText(<span class="hljs-string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;</span>,<span class="hljs-keyword">true</span>);<br><br>   <span class="hljs-comment">//发送附件</span><br>   helper.addAttachment(<span class="hljs-string">&quot;1.jpg&quot;</span>,<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;&quot;</span>));<br>   helper.addAttachment(<span class="hljs-string">&quot;2.jpg&quot;</span>,<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;&quot;</span>));<br><br>   helper.setTo(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br>   helper.setFrom(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br><br>   mailSender.send(mimeMessage);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看邮箱是否成功接收</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
