<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2021/04/25/hello-hexo/"/>
    <url>/2021/04/25/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于HEXO，语雀博客系统初试</title>
    <link href="/2021/04/25/%E5%9F%BA%E4%BA%8EHEXO%EF%BC%8C%E8%AF%AD%E9%9B%80%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%88%9D%E8%AF%95/"/>
    <url>/2021/04/25/%E5%9F%BA%E4%BA%8EHEXO%EF%BC%8C%E8%AF%AD%E9%9B%80%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%88%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于平台等原因，决定将原先无人问津的个人博客好好整顿一番，使用hexo框架并在语雀平台同步。</p><p>ps：hexo是一款基于node.js的静态博客框架，hexo用于博客在线编辑</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h4><ol><li>安装nodejs，npm</li><li>安装hexo，本地部署</li><li>创建仓库</li><li>安装Git并绑定GitHub</li><li>发布网站</li><li>自定义域名</li><li>博客高级样式</li><li>同步语雀<h4 id="安装nodejs，npm"><a href="#安装nodejs，npm" class="headerlink" title="安装nodejs，npm"></a>安装nodejs，npm</h4>链接：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> ，新版nodejs已经集成了npm<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619139824262-abfe229a-c185-4f7b-965e-8622322e29f3.png#clientId=u9d2be740-e3b1-4&from=drop&height=179&id=ue872dbf2&margin=%5Bobject%20Object%5D&name=nodejs.png&originHeight=325&originWidth=1223&originalType=binary&size=28801&status=done&style=none&taskId=u8cd9bbb5-d434-4cd3-8634-97e1851df8a&width=672" alt="nodejs.png"><br>在cmd输入以下两条指令测试是否安装成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619140474428-e35f60e5-cb7b-4908-8a44-3710511e0838.png#clientId=u9d2be740-e3b1-4&from=paste&height=92&id=uc1f2c143&margin=%5Bobject%20Object%5D&name=image.png&originHeight=191&originWidth=363&originalType=binary&size=10660&status=done&style=none&taskId=u8e0b1686-d612-4128-a755-5b567b5e72a&width=175.5" alt="image.png"><h4 id="安装hexo，本地部署"><a href="#安装hexo，本地部署" class="headerlink" title="安装hexo，本地部署"></a>安装hexo，本地部署</h4>首先在电脑上新建一个文件夹，用于存放hexo框架和以后写的博客文件，使用npm命令安装hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <br></code></pre></td></tr></table></figure>初始化博客系统<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure>快速创建一篇测试博客<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new test_blog <br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>以上三条命令的作用分别是：创建新博客、生成网站、开启本地预览</li></ol><p>成功后在网页端访问4000端口如下效果，<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619140885549-2b33a33f-3765-4f90-8ec5-cc7cb08692c4.png#clientId=u9d2be740-e3b1-4&from=paste&height=241&id=uf9977e92&margin=%5Bobject%20Object%5D&name=image.png&originHeight=664&originWidth=1848&originalType=binary&size=551711&status=done&style=none&taskId=u58bd681e-b939-4d8f-9f5a-03f24cf32cd&width=672" alt="image.png"></p><p>完成以上操作，仅可以在本地使用hexo博客系统了，接下来就是发布到网上。</p><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>在<a href="https://github.com/">github</a>上新建一个仓库，名字<strong>必须</strong>是：用户名.github.io<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619141716652-4edb970c-5c2f-439b-aa27-a7223f5e3855.png#clientId=u9d2be740-e3b1-4&from=paste&height=129&id=uf5030f70&margin=%5Bobject%20Object%5D&name=image.png&originHeight=258&originWidth=550&originalType=binary&size=22076&status=done&style=none&taskId=ucf2daf3f-4309-4e0d-a379-4157dc376a0&width=275" alt="image.png"></p><h4 id="安装Git并绑定GitHub"><a href="#安装Git并绑定GitHub" class="headerlink" title="安装Git并绑定GitHub"></a>安装Git并绑定GitHub</h4><p>Git是开源的分布式版本控制系统，用于将本地博客上传到GitHub<br>链接：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a>  ，<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a></p><p>鼠标右键或者直接在菜单栏处使用GitBash<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619142241543-3761455e-edcb-48aa-b314-13b49920eb7d.png#clientId=u9d2be740-e3b1-4&from=paste&height=65&id=u79bad9c6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=192&originalType=binary&size=8966&status=done&style=none&taskId=u5b07ac78-5d1d-47b2-b881-44af6c62f78&width=153" alt="image.png"><br>设置用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>生成ssh文件，连敲三个回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>找到本地的ssh文件，我的路径：C:\Windows\System32\drivers\etc<br>在GitHub的Setting里新建一个<a href="https://github.com/settings/ssh/new">SSH Key</a>，Key为刚刚的ssh文件内容<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619142668452-26d32ecb-a25d-4780-9388-78724f623383.png#clientId=u9d2be740-e3b1-4&from=paste&height=36&id=u2b741dcc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=72&originWidth=946&originalType=binary&size=5663&status=done&style=none&taskId=u6f8a95f9-ce87-4b96-a73b-f2e89a00f63&width=473" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619142828363-5697ffb8-de3a-405c-bb39-d67d30ad396f.png#clientId=u9d2be740-e3b1-4&from=paste&height=249&id=uaff23af7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=527&originWidth=863&originalType=binary&size=36598&status=done&style=none&taskId=u02c3c2b0-3216-4beb-8beb-691440da57a&width=407.5" alt="image.png"></p><p>用GitBash测试公钥是否配置成功，看到success就ok了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619142967661-c51a448a-757d-4a49-9602-2e4add2e623c.png#clientId=u9d2be740-e3b1-4&from=paste&height=80&id=ub36ba13a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=1121&originalType=binary&size=24766&status=done&style=none&taskId=u14599c85-25f1-4995-928d-1b3b3dc207f&width=560.5" alt="image.png"></p><h4 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h4><p>本地的Git已经绑定到GItHub上，接下来就是把hexo博客发布上去。<br>首先修改blog下的_config.yml配置文件，该文件用于将hexo和Github关联，repo为仓库的完整路径（下图箭头）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619143298664-64fd0eef-5b82-41ca-9ee2-c1f8f1d218b5.png#clientId=u9d2be740-e3b1-4&from=paste&height=236&id=ube1fb93d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=472&originWidth=427&originalType=binary&size=26912&status=done&style=none&taskId=ubd305813-7c0f-4675-9921-c73f03003e9&width=213.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619143553511-502ffdbd-e023-4362-8cac-5506ca27b782.png#clientId=u9d2be740-e3b1-4&from=paste&height=23&id=ua8206e31&margin=%5Bobject%20Object%5D&name=image.png&originHeight=46&originWidth=1251&originalType=binary&size=6457&status=done&style=none&taskId=u8d7f162b-47be-4969-9fad-8bdb965b3a9&width=625.5" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/YourCat/YourCat.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>该配置用于告诉hexo博客部署在哪里，我们还需要用npm安装一个部署插件，在cmd中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>这时在GitBash输入以hexo下三条命令发布博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure><p>这一步经常会遇到如下两种问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OpenSSL SSL_read: Connection was reset, errno 10054<br>Failed to connect to github.com port 443: Timed out<br></code></pre></td></tr></table></figure><p>这是由网络不稳定导致的连接超时，网上有许多<a href="https://blog.csdn.net/qq_44184794/article/details/107431603">解决方案</a>，这个时候你会发现无法访问GitHub的网站了。<br>暴力的话重复几次上述三条命令也可以成功。<br>发布成功是如下这样子，同时在github的仓库里可以看到本地的hexo博客已经过来了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619147006313-509619d3-1fd0-42c0-8c62-94e4db458c27.png#clientId=u9d2be740-e3b1-4&from=paste&height=339&id=u59636062&margin=%5Bobject%20Object%5D&name=image.png&originHeight=678&originWidth=1024&originalType=binary&size=105623&status=done&style=none&taskId=ua92a5ee7-bfc7-457c-a37f-e993817a09e&width=512" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619147049134-316236b1-16b8-4f93-b13f-c2d15b9b353a.png#clientId=u9d2be740-e3b1-4&from=paste&height=165&id=uca9831df&margin=%5Bobject%20Object%5D&name=image.png&originHeight=330&originWidth=669&originalType=binary&size=27179&status=done&style=none&taskId=u22f848ce-2f76-4a23-9441-3b49b7f0ba8&width=334.5" alt="image.png"></p><p>这个时候已经可以在外网访问到博客了，差不多成功了~<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619147240943-71521c81-708f-495f-8f22-50ae42586944.png#clientId=u9d2be740-e3b1-4&from=paste&height=157&id=u8fbd4c14&margin=%5Bobject%20Object%5D&name=image.png&originHeight=451&originWidth=1511&originalType=binary&size=436209&status=done&style=none&taskId=u5422e55f-57e7-4b36-ab8e-cc51e5fa8f5&width=526" alt="image.png"></p><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><p>完成以上的操作已经可以使用GitHub提供的域名xx.github.io访问到我们的博客项目了，但是作为一个新世纪的弄潮儿，怎么能够没有自己的个性化域名呢~</p><p>1.首先在阿里云购买一个域名，买买买的事情就跳过了，直接进到域名控制台解析域名<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619149582070-af0d4f94-03e9-470d-a14f-69efbc0ef3ae.png#clientId=u9d2be740-e3b1-4&from=paste&height=30&id=u4a8a9b12&margin=%5Bobject%20Object%5D&name=image.png&originHeight=60&originWidth=2225&originalType=binary&size=9099&status=done&style=none&taskId=u042339f6-8902-45c2-8340-39d4ecec6d3&width=1113" alt="image.png"><br>添加如下两条记录，<br>记录：www，类型：CNAME，记录值：xx.github.io<br>记录：@，类型：A，记录值：ip地址（ping 到xx.github.io查看）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619150858085-50678dab-8dc1-4ebc-bda9-a80e82e59220.png#clientId=u9d2be740-e3b1-4&from=paste&height=51&id=uae8b58d6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=102&originWidth=2152&originalType=binary&size=13669&status=done&style=none&taskId=u6b5a9524-c0b4-4f3c-82ff-d63aeccd548&width=1076" alt="image.png"></p><p>2.在GitHub的仓库里设置自己的域名，Settings-&gt;GitHub Pages<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619150676094-dbf68022-2668-49c6-a22d-94715838f01a.png#clientId=u9d2be740-e3b1-4&from=paste&height=134&id=u15147211&margin=%5Bobject%20Object%5D&name=image.png&originHeight=268&originWidth=884&originalType=binary&size=35075&status=done&style=none&taskId=ue65a81f3-1b5f-4803-aa6d-bf79b0fbdef&width=442" alt="image.png"><br>ps：以上警告就是因为域名解析没配置好，需要一定时间生效，先继续下一步配置<br>3.在本地文件夹下创建CNAME文件，内容为域名<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619329459028-9d1198fe-f68a-4c93-8126-67527e47246c.png#clientId=u20e143db-696a-4&from=paste&height=213&id=ub065b687&margin=%5Bobject%20Object%5D&name=image.png&originHeight=425&originWidth=484&originalType=binary&size=58057&status=done&style=none&taskId=u5de6cd06-dd28-498f-b801-ae1f750bad9&width=242" alt="image.png"><br>三部曲后访问自己的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619151311400-ff07a884-6007-464b-b2c3-381f6f264040.png#clientId=u9d2be740-e3b1-4&from=paste&height=349&id=u7788e241&margin=%5Bobject%20Object%5D&name=image.png&originHeight=697&originWidth=1378&originalType=binary&size=419052&status=done&style=none&taskId=u3694b37c-a4f3-431d-90c3-2712791dfb2&width=689" alt="image.png"></p><h4 id="博客高级样式"><a href="#博客高级样式" class="headerlink" title="博客高级样式"></a>博客高级样式</h4><p>默认的主题或许过于单调，弄潮儿又来更换主题了，在blog文件下输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid themes/fluid<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619152703323-c8d0a723-a3ca-4b3c-b71a-917e7537e689.png#clientId=u9d2be740-e3b1-4&from=paste&height=136&id=u6b086f0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=271&originWidth=1229&originalType=binary&size=55545&status=done&style=none&taskId=u646dac94-2c90-4a6c-84d5-f7e72d08905&width=614.5" alt="image.png"><br>好看的主题哪来的？安利安利-&gt; <a href="https://www.zhihu.com/search?type=content&q=hexo%E4%B8%BB%E9%A2%98">here</a> &lt;-感谢(●’◡’●)</p><p>三部曲！这里我又报错了！Spawn fiaed…<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619154531571-dd47f28b-b9dc-41fe-b657-c19e7bdd1b44.png#clientId=u9d2be740-e3b1-4&from=paste&height=204&id=u337b9eda&margin=%5Bobject%20Object%5D&name=image.png&originHeight=407&originWidth=1128&originalType=binary&size=58345&status=done&style=none&taskId=ue5e3ef69-312b-4e06-817f-f8c5a09dcbd&width=564" alt="image.png"><br>直接导航-&gt;<a href="https://blog.csdn.net/HTL2018/article/details/106876940">解决方案</a> 一次不行多来几次…<br>访问新主题！阅读README和<a href="https://hexo.fluid-dev.com/docs/start/">官网</a>食用新主题！<br>大致步骤：<br>1.在hexo目录的_config.yml文件中指定主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <span class="hljs-comment"># 指定主题</span><br>language: zh-CN  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>2.在fluid目录的_config.yml文件中修改配置信息（首页的标题，句子，背景图…）<br>3.第一次使用新建关于页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br><br>在/<span class="hljs-built_in">source</span>/about/index.md下添加layout属性<br>---<br>title: about<br>date: 2020-02-23 19:20:33<br>layout: about<br>---<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1123881/1619158378448-3de4f8b8-d25f-466a-be26-ba38d0b51a4e.png#clientId=u9d2be740-e3b1-4&from=paste&height=607&id=u2a11fd37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1214&originWidth=1868&originalType=binary&size=3662110&status=done&style=none&taskId=u1a28c84a-18a5-4b66-ad7a-3f26ab5b234&width=934" alt="image.png"></p><p>上边是根据文档修改配置文件后的最终效果图~太美了😜</p><h4 id="同步语雀"><a href="#同步语雀" class="headerlink" title="同步语雀"></a>同步语雀</h4><p>有点难，尚在研究，挂一个<a href="https://www.yuque.com/joashzhao/blog/sync-yuque-to-hexo">教程</a>…<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1123881/1619160630271-22ebd941-28a0-4a26-9c7b-bc0c6d123f7e.jpeg#clientId=u9d2be740-e3b1-4&from=drop&height=146&id=MqklL&margin=%5Bobject%20Object%5D&name=yuque_diagram.jpg&originHeight=368&originWidth=956&originalType=binary&size=53452&status=done&style=none&taskId=ua94302ec-a658-4f17-85f9-47f90fb650d&width=380" alt="yuque_diagram.jpg"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来以为有之前搭建博客的基础，换成hexo框架重新弄弄只是分分钟的事情，没想到却磕磕绊绊折腾了大半天，中间可能省略一些粗心的bug（尽可能都列出来），bug虽小也卡了好久，接下来要开始好好写博文了。</p><p><strong>参考文章：</strong><br><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a><br><a href="https://www.yuque.com/joashzhao/blog/sync-yuque-to-hexo?language=en-us">https://www.yuque.com/joashzhao/blog/sync-yuque-to-hexo?language=en-us</a><br><a href="https://www.bilibili.com/video/BV1c4411G7cg?from=search&seid=13091592736216096382">https://www.bilibili.com/video/BV1c4411G7cg?from=search&amp;seid=13091592736216096382</a><br><a href="https://blog.csdn.net/z_johnny/article/details/104629805">https://blog.csdn.net/z_johnny/article/details/104629805</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神SpingBoot 异步、定时、邮件任务</title>
    <link href="/2021/04/02/2021-4-2-task/"/>
    <url>/2021/04/02/2021-4-2-task/</url>
    
    <content type="html"><![CDATA[<h2 id="异步、定时、邮件任务"><a href="#异步、定时、邮件任务" class="headerlink" title="异步、定时、邮件任务"></a>异步、定时、邮件任务</h2><p><strong>异步任务</strong></p><p>异步处理在网站发送邮件时，后台发送邮件，前台会造成相应不动，直到邮件发送完成，所以我们一般会采用多线程的方式去处理这些任务。</p><p>步骤：</p><p>1.创建service包</p><p>2.创建AsyncService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncService</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;业务进行中...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.编写controller包</p><p>4.编写AsyncController测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncController</span></span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    AsyncService asyncService;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        asyncService.hello();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success">http://localhost:8080/hello进行测试，3秒后出现success</a></p><p>Q：在后台使用多线程方式实现太麻烦，只需要使用注解即可。</p><p>6.给hello方法添加@Async注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot会自己开一个线程池进行调用！使用这个注解还需要在主程序上添加注解@EnableAsync开启注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootTaskApplication</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>7.重启测试，网页瞬间相应，后台代码依旧执行。</p><p><strong>定时任务</strong></p><p>Spring提供异步主席那个任务调度的方式，提供了两个接口</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p>步骤：</p><p>1.创建一个ScheduledService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledSevice</span></span>&#123;<br><span class="hljs-meta">@Scheduled(cron=&quot;0****0-7&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello...&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.写完定时任务后，在主程序加上@EnableScheduling开启</p><p>3.详细了解cron表达式</p><p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p><strong>邮件任务</strong></p><p>邮件发送在日常开发中使用很多，Springboot也做了支持</p><ul><li>邮件发送引入spring-boot-start-mail</li><li>SpringBoot自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p>步骤：</p><p>1.引入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.查看配置文件</p><p>3.配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.mail.username</span>=<span class="hljs-string">...@qq.com</span><br><span class="hljs-meta">spring.mail.password</span>=<span class="hljs-string">你的qq授权码</span><br><span class="hljs-meta">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-comment"># qq需要配置ssl</span><br><span class="hljs-meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p><p>4.Spring单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>JavaMailSenderImpl mailSender;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-comment">//邮件设置1：一个简单的邮件</span><br>   SimpleMailMessage message = <span class="hljs-keyword">new</span> SimpleMailMessage();<br>   message.setSubject(<span class="hljs-string">&quot;通知-明天来狂神这听课&quot;</span>);<br>   message.setText(<span class="hljs-string">&quot;今晚7:30开会&quot;</span>);<br><br>   message.setTo(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br>   message.setFrom(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br>   mailSender.send(message);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException </span>&#123;<br>   <span class="hljs-comment">//邮件设置2：一个复杂的邮件</span><br>   MimeMessage mimeMessage = mailSender.createMimeMessage();<br>   MimeMessageHelper helper = <span class="hljs-keyword">new</span> MimeMessageHelper(mimeMessage, <span class="hljs-keyword">true</span>);<br><br>   helper.setSubject(<span class="hljs-string">&quot;通知-明天来狂神这听课&quot;</span>);<br>   helper.setText(<span class="hljs-string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;</span>,<span class="hljs-keyword">true</span>);<br><br>   <span class="hljs-comment">//发送附件</span><br>   helper.addAttachment(<span class="hljs-string">&quot;1.jpg&quot;</span>,<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;&quot;</span>));<br>   helper.addAttachment(<span class="hljs-string">&quot;2.jpg&quot;</span>,<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;&quot;</span>));<br><br>   helper.setTo(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br>   helper.setFrom(<span class="hljs-string">&quot;...@qq.com&quot;</span>);<br><br>   mailSender.send(mimeMessage);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看邮箱是否成功接收</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-02 Redis入门</title>
    <link href="/2021/03/20/2021-3-20-redis02/"/>
    <url>/2021/03/20/2021-3-20-redis02/</url>
    
    <content type="html"><![CDATA[<h2 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><blockquote><p>Redis能该干什么？</p></blockquote><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p><p>…</p></li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>推荐使用Linux服务器学习。</p><p>windows版本的Redis已经停更很久了…</p><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p><a href="https://github.com/dmajkic/redis">https://github.com/dmajkic/redis</a></p><ol><li>解压安装包<br><img src="https://img-blog.csdnimg.cn/20200820103922318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>开启redis-server.exe</li><li>启动redis-cli.exe测试<img src="https://img-blog.csdnimg.cn/20200820103950934.png#pic_center" alt="在这里插入图片描述"></li></ol><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ol><li><p>下载安装包！<code>redis-5.0.8.tar.gz</code></p></li><li><p>解压Redis的安装包！程序一般放在 <code>/opt</code> 目录下</p><p><img src="https://img-blog.csdnimg.cn/20200820104016426.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>基本环境安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install gcc-c++<br><span class="hljs-comment"># 然后进入redis目录下执行</span><br>make<br><span class="hljs-comment"># 然后执行</span><br>make install<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200820104048327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li><p>redis默认安装路径 <code>/usr/local/bin</code><img src="https://img-blog.csdnimg.cn/20200820104140692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>将redis的配置文件复制到 程序安装目录 <code>/usr/local/bin/kconfig</code>下</p><p><img src="https://img-blog.csdnimg.cn/20200820104157817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hxvGQ47d-1597890996509)(狂神说 Redis.assets/image-20200813114000868.png)]"></p></li><li><p>redis默认不是后台启动的，需要修改配置文件！</p><p><img src="https://img-blog.csdnimg.cn/20200820104213706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dDdKTUgd-1597890996510)(狂神说 Redis.assets/image-20200813114019063.png)]"></p></li><li><p>通过制定的配置文件启动redis服务</p><p><img src="https://img-blog.csdnimg.cn/20200820104228556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jOypL57Z-1597890996511)(狂神说 Redis.assets/image-20200813114030597.png)]"></p></li><li><p>使用redis-cli连接指定的端口号测试，Redis的默认端口6379</p><p><img src="https://img-blog.csdnimg.cn/20200820104243223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LnDaISQ4-1597890996512)(狂神说 Redis.assets/image-20200813114045299.png)]"></p></li><li><p>查看redis进程是否开启</p><p><img src="https://img-blog.csdnimg.cn/20200820104300532.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PhN1jC1-1597890996513)(狂神说 Redis.assets/image-20200813114103769.png)]"></p></li><li><p>关闭Redis服务 <code>shutdown</code></p><p><img src="https://img-blog.csdnimg.cn/20200820104314297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Y54EuOYm-1597890996514)(狂神说 Redis.assets/image-20200813114116691.png)]"></p></li><li><p>再次查看进程是否存在</p></li><li><p>后面我们会使用单机多Redis启动集群测试</p></li></ol><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p><strong>redis-benchmark：</strong>Redis官方提供的性能测试工具，参数选项如下：</p><p><img src="https://img-blog.csdnimg.cn/20200513214125892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>简单测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试：100个并发连接 100000请求</span><br>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<br>12<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200820104343472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-plMshjFg-1597890996515)(狂神说 Redis.assets/image-20200813114143365.png)]"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>redis默认有16个数据库</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200820104357466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-v2S3n3Si-1597890996516)(狂神说 Redis.assets/image-20200813114158322.png)]"></p><p>默认使用的第0个;</p><p>16个数据库为：DB 0~DB 15<br>默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; config get databases <span class="hljs-comment"># 命令行查看数据库数量databases</span><br>1) <span class="hljs-string">&quot;databases&quot;</span><br>2) <span class="hljs-string">&quot;16&quot;</span><br><br>127.0.0.1:6379&gt; select 8 <span class="hljs-comment"># 切换数据库 DB 8</span><br>OK<br>127.0.0.1:6379[8]&gt; dbsize <span class="hljs-comment"># 查看数据库大小</span><br>(<span class="hljs-built_in">integer</span>) 0<br><br><span class="hljs-comment"># 不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name sakura<br>OK<br>127.0.0.1:6379&gt; SELECT 8<br>OK<br>127.0.0.1:6379[8]&gt; get name <span class="hljs-comment"># db8中并不能获取db0中的键值对。</span><br>(nil)<br>127.0.0.1:6379[8]&gt; DBSIZE<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[8]&gt; SELECT 0<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;counter:__rand_int__&quot;</span><br>2) <span class="hljs-string">&quot;mylist&quot;</span><br>3) <span class="hljs-string">&quot;name&quot;</span><br>4) <span class="hljs-string">&quot;key:__rand_int__&quot;</span><br>5) <span class="hljs-string">&quot;myset:__rand_int__&quot;</span><br>127.0.0.1:6379&gt; DBSIZE <span class="hljs-comment"># size和key个数相关</span><br>(<span class="hljs-built_in">integer</span>) 5<br></code></pre></td></tr></table></figure><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><blockquote><p><strong>Redis是单线程的，Redis是基于内存操作的。</strong></p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p><strong>Redis为什么单线程还这么快？</strong></p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-01 NoSql概述</title>
    <link href="/2021/03/20/2021-3-20-redis01/"/>
    <url>/2021/03/20/2021-3-20-redis01/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h2><h3 id="为什么使用Nosql"><a href="#为什么使用Nosql" class="headerlink" title="为什么使用Nosql"></a>为什么使用Nosql</h3><blockquote><p>1、单机Mysql时代</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020082010365930.png#pic_center" alt="在这里插入图片描述"></p><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><blockquote><p>2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）</p></blockquote><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p><p><img src="https://img-blog.csdnimg.cn/20200820103713734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><blockquote><p>3、分库分表 + 水平拆分 + Mysql集群</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200820103739584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>4、如今最近的年代</p></blockquote><p> 如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。</p><blockquote><p>目前一个基本的互联网项目</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200820103804572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>为什么要用NoSQL ？</p></blockquote><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！<br>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h3><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3 id="Nosql特点"><a href="#Nosql特点" class="headerlink" title="Nosql特点"></a>Nosql特点</h3><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p></li><li><p>传统的 RDBMS 和 NoSQL</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">传统的 RDBMS(关系型数据库)<br><span class="hljs-bullet">- </span>结构化组织<br><span class="hljs-bullet">- </span>SQL<br><span class="hljs-bullet">- </span>数据和关系都存在单独的表中 row col<br><span class="hljs-bullet">- </span>操作，数据定义语言<br><span class="hljs-bullet">- </span>严格的一致性<br><span class="hljs-bullet">- </span>基础的事务<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">Nosql<br><span class="hljs-bullet">- </span>不仅仅是数据<br><span class="hljs-bullet">- </span>没有固定的查询语言<br><span class="hljs-bullet">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）<br><span class="hljs-bullet">- </span>最终一致性<br><span class="hljs-bullet">- </span>CAP定理和BASE<br><span class="hljs-bullet">- </span>高性能，高可用，高扩展<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>了解：3V + 3高</p></blockquote><p>大数据时代的3V ：主要是<strong>描述问题</strong>的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h3 id="阿里巴巴演进分析"><a href="#阿里巴巴演进分析" class="headerlink" title="阿里巴巴演进分析"></a>阿里巴巴演进分析</h3><p>推荐阅读：阿里云的这群疯子<a href="https://yq.aliyun.com/articles/653511">https://yq.aliyun.com/articles/653511</a></p><p><img src="https://img-blog.csdnimg.cn/20200820103829446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p><img src="https://img-blog.csdnimg.cn/20200820103851613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 商品信息</span><br>- 一般存放在关系型数据库：Mysql,阿里巴巴使用的Mysql都是经过内部改动的。<br><br><span class="hljs-comment"># 商品描述、评论(文字居多)</span><br>- 文档型数据库：MongoDB<br><br><span class="hljs-comment"># 图片</span><br>- 分布式文件系统 FastDFS<br>- 淘宝：TFS<br>- Google: GFS<br>- Hadoop: HDFS<br>- 阿里云: oss<br><br><span class="hljs-comment"># 商品关键字 用于搜索</span><br>- 搜索引擎：solr,elasticsearch<br>- 阿里：Isearch 多隆<br><br><span class="hljs-comment"># 商品热门的波段信息</span><br>- 内存数据库：Redis，Memcache<br><br><span class="hljs-comment"># 商品交易，外部支付接口</span><br>- 第三方应用<br></code></pre></td></tr></table></figure><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><blockquote><p><strong>KV键值对</strong></p></blockquote><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><blockquote><p><strong>文档型数据库（bson数据格式）：</strong></p></blockquote><ul><li><strong>MongoDB</strong>(掌握)<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p><strong>列存储数据库</strong></p></blockquote><ul><li><strong>HBase</strong>(大数据必学)</li><li>分布式文件系统</li></ul><blockquote><p><strong>图关系数据库</strong></p></blockquote><p>用于广告推荐，社交网络</p><ul><li><strong>Neo4j</strong>、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-04 三种特殊数据类型</title>
    <link href="/2021/03/20/2021-3-20-redis04/"/>
    <url>/2021/03/20/2021-3-20-redis04/</url>
    
    <content type="html"><![CDATA[<h2 id="四、三种特殊数据类型"><a href="#四、三种特殊数据类型" class="headerlink" title="四、三种特殊数据类型"></a>四、三种特殊数据类型</h2><h3 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial(地理位置)"></a>Geospatial(地理位置)</h3><blockquote><p>使用经纬度定位地理坐标并用一个<strong>有序集合zset保存</strong>，所以zset命令也可以使用</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>geoadd key longitud(经度) latitude(纬度) member [..]</code></td><td>将具体经纬度的坐标存入一个有序集合</td></tr><tr><td><code>geopos key member [member..]</code></td><td>获取集合中的一个/多个成员坐标</td></tr><tr><td><code>geodist key member1 member2 [unit]</code></td><td>返回两个给定位置之间的距离。默认以米作为单位。</td></tr><tr><td>`georadius key longitude latitude radius m</td><td>km</td></tr><tr><td><code>GEORADIUSBYMEMBER key member radius...</code></td><td>功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</td></tr><tr><td><code>geohash key member1 [member2..]</code></td><td>返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</td></tr></tbody></table><p><strong>有效经纬度</strong></p><blockquote><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><p>指定单位的参数 <strong>unit</strong> 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p><strong>关于GEORADIUS的参数</strong></p><blockquote><p>通过<code>georadius</code>就可以完成 <strong>附近的人</strong>功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">----------------georadius---------------------<br>127.0.0.1:6379&gt; GEORADIUS china:city 120 30 500 km withcoord withdist <span class="hljs-comment"># 查询经纬度(120,30)坐标500km半径内的成员</span><br>1) 1) <span class="hljs-string">&quot;hangzhou&quot;</span><br>   2) <span class="hljs-string">&quot;29.4151&quot;</span><br>   3) 1) <span class="hljs-string">&quot;120.20000249147415&quot;</span><br>      2) <span class="hljs-string">&quot;30.199999888333501&quot;</span><br>2) 1) <span class="hljs-string">&quot;shanghai&quot;</span><br>   2) <span class="hljs-string">&quot;205.3611&quot;</span><br>   3) 1) <span class="hljs-string">&quot;121.40000134706497&quot;</span><br>      2) <span class="hljs-string">&quot;31.400000253193539&quot;</span><br><br>------------geohash---------------------------<br>127.0.0.1:6379&gt; geohash china:city yichang shanghai <span class="hljs-comment"># 获取成员经纬坐标的geohash表示</span><br>1) <span class="hljs-string">&quot;wmrjwbr5250&quot;</span><br>2) <span class="hljs-string">&quot;wtw6ds0y300&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h3><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型</p></blockquote><p><strong>什么是基数？</strong></p><blockquote><p>数据集中不重复的元素的个数。</p></blockquote><p><strong>应用场景：</strong></p><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><blockquote><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是<strong>计数</strong>，Hyperloglog就能帮助我们利用最小的空间完成。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PFADD key element1 [elememt2..]</code></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><code>PFCOUNT key [key]</code></td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td><code>PFMERGE destkey sourcekey [sourcekey..]</code></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">----------PFADD--PFCOUNT---------------------<br>127.0.0.1:6379&gt; PFADD myelemx a b c d e f g h i j k <span class="hljs-comment"># 添加元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> myelemx <span class="hljs-comment"># hyperloglog底层使用String</span><br>string<br>127.0.0.1:6379&gt; PFCOUNT myelemx <span class="hljs-comment"># 估算myelemx的基数</span><br>(<span class="hljs-built_in">integer</span>) 11<br>127.0.0.1:6379&gt; PFADD myelemy i j k z m c b v p q s<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; PFCOUNT myelemy<br>(<span class="hljs-built_in">integer</span>) 11<br><br>----------------PFMERGE-----------------------<br>127.0.0.1:6379&gt; PFMERGE myelemz myelemx myelemy <span class="hljs-comment"># 合并myelemx和myelemy 成为myelemz</span><br>OK<br>127.0.0.1:6379&gt; PFCOUNT myelemz <span class="hljs-comment"># 估算基数</span><br>(<span class="hljs-built_in">integer</span>) 17<br></code></pre></td></tr></table></figure><p>如果允许容错，那么一定可以使用Hyperloglog !</p><p>如果不允许容错，就使用set或者自己的数据类型即可 ！</p><h3 id="BitMaps-位图"><a href="#BitMaps-位图" class="headerlink" title="BitMaps(位图)"></a>BitMaps(位图)</h3><blockquote><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p></blockquote><p><strong>应用场景</strong></p><p>签到统计、状态统计</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>setbit key offset value</code></td><td>为指定key的offset位设置值</td></tr><tr><td><code>getbit key offset</code></td><td>获取offset位的值</td></tr><tr><td><code>bitcount key [start end]</code></td><td>统计字符串被设置为1的bit数，也可以指定统计范围按字节</td></tr><tr><td><code>bitop operration destkey key[key..]</code></td><td>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</td></tr><tr><td><code>BITPOS key bit [start] [end]</code></td><td>返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">------------setbit--getbit--------------<br>127.0.0.1:6379&gt; setbit sign 0 1 <span class="hljs-comment"># 设置sign的第0位为 1</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 2 1 <span class="hljs-comment"># 设置sign的第2位为 1  不设置默认 是0</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 3 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 5 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> sign<br>string<br><br>127.0.0.1:6379&gt; getbit sign 2 <span class="hljs-comment"># 获取第2位的数值</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; getbit sign 3<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; getbit sign 4 <span class="hljs-comment"># 未设置默认是0</span><br>(<span class="hljs-built_in">integer</span>) 0<br><br>-----------bitcount----------------------------<br>127.0.0.1:6379&gt; BITCOUNT sign <span class="hljs-comment"># 统计sign中为1的位数</span><br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><p><strong>bitmaps的底层</strong></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PlszjhS-1597890996519)(D:\我\MyBlog\狂神说 Redis.assets\image-20200803234336175.png)]</p><p>这样设置以后你能get到的值是：<strong>\xA2\x80</strong>，所以bitmaps是一串从左到右的二进制串</p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-05 事务</title>
    <link href="/2021/03/20/2021-3-20-redis05/"/>
    <url>/2021/03/20/2021-3-20-redis05/</url>
    
    <content type="html"><![CDATA[<h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p>Redis的单条命令是保证原子性的，但是redis事务不能保证原子性</p><blockquote><p>Redis事务本质：一组命令的集合。</p><p>—————– 队列 set set set 执行 ——————-</p><p>事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。</p><ul><li>一次性</li><li>顺序性</li><li>排他性</li></ul><hr><ol><li>Redis事务没有隔离级别的概念</li><li>Redis单条命令是保证原子性的，但是事务不保证原子性！</li></ol></blockquote><h3 id="Redis事务操作过程"><a href="#Redis事务操作过程" class="headerlink" title="Redis事务操作过程"></a>Redis事务操作过程</h3><ul><li>开启事务（<code>multi</code>）</li><li>命令入队</li><li>执行事务（<code>exec</code>）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi <span class="hljs-comment"># 开启事务</span><br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1 <span class="hljs-comment"># 命令入队</span><br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2 <span class="hljs-comment"># ..</span><br>QUEUED<br>127.0.0.1:6379&gt; get k1<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; keys *<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span> <span class="hljs-comment"># 事务执行</span><br>1) OK<br>2) OK<br>3) <span class="hljs-string">&quot;v1&quot;</span><br>4) OK<br>5) 1) <span class="hljs-string">&quot;k3&quot;</span><br>   2) <span class="hljs-string">&quot;k2&quot;</span><br>   3) <span class="hljs-string">&quot;k1&quot;</span><br></code></pre></td></tr></table></figure><p><strong>取消事务(<code>discurd</code>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; DISCARD <span class="hljs-comment"># 放弃事务</span><br>OK<br>127.0.0.1:6379&gt; EXEC<br>(error) ERR EXEC without MULTI <span class="hljs-comment"># 当前未开启事务</span><br>127.0.0.1:6379&gt; get k1 <span class="hljs-comment"># 被放弃事务中命令并未执行</span><br>(nil)<br></code></pre></td></tr></table></figure><h3 id="事务错误"><a href="#事务错误" class="headerlink" title="事务错误"></a>事务错误</h3><blockquote><p>代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; error k1 <span class="hljs-comment"># 这是一条语法错误命令</span><br>(error) ERR unknown <span class="hljs-built_in">command</span> `error`, with args beginning with: `k1`, <span class="hljs-comment"># 会报错但是不影响后续命令入队</span><br>127.0.0.1:6379&gt; get k2<br>QUEUED<br>127.0.0.1:6379&gt; EXEC<br>(error) EXECABORT Transaction discarded because of previous errors. <span class="hljs-comment"># 执行报错</span><br>127.0.0.1:6379&gt; get k1<br>(nil) <span class="hljs-comment"># 其他命令并没有被执行</span><br></code></pre></td></tr></table></figure><blockquote><p>代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; INCR k1 <span class="hljs-comment"># 这条命令逻辑错误（对字符串进行增量）</span><br>QUEUED<br>127.0.0.1:6379&gt; get k2<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span><br>1) OK<br>2) OK<br>3) (error) ERR value is not an <span class="hljs-built_in">integer</span> or out of range <span class="hljs-comment"># 运行时报错</span><br>4) <span class="hljs-string">&quot;v2&quot;</span> <span class="hljs-comment"># 其他命令正常执行</span><br><br><span class="hljs-comment"># 虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。</span><br><span class="hljs-comment"># 所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span><br></code></pre></td></tr></table></figure><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用<code>watch key</code>监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 100 <span class="hljs-comment"># 设置余额:100</span><br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> use 0 <span class="hljs-comment"># 支出使用:0</span><br>OK<br>127.0.0.1:6379&gt; watch money <span class="hljs-comment"># 监视money (上锁)</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; DECRBY money 20<br>QUEUED<br>127.0.0.1:6379&gt; INCRBY use 20<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span> <span class="hljs-comment"># 监视值没有被中途修改，事务正常执行</span><br>1) (<span class="hljs-built_in">integer</span>) 80<br>2) (<span class="hljs-built_in">integer</span>) 20<br></code></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p></blockquote><p>我们启动另外一个客户端模拟插队线程。</p><p>线程1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; watch money <span class="hljs-comment"># money上锁</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; DECRBY money 20<br>QUEUED<br>127.0.0.1:6379&gt; INCRBY use 20<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-comment"># 此时事务并没有执行</span><br></code></pre></td></tr></table></figure><p>模拟线程插队，线程2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; INCRBY money 500 <span class="hljs-comment"># 修改了线程一中监视的money</span><br>(<span class="hljs-built_in">integer</span>) 600<br>12<br></code></pre></td></tr></table></figure><p>回到线程1，执行事务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; EXEC <span class="hljs-comment"># 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败</span><br>(nil) <span class="hljs-comment"># 没有结果，说明事务执行失败</span><br><br>127.0.0.1:6379&gt; get money <span class="hljs-comment"># 线程2 修改生效</span><br><span class="hljs-string">&quot;600&quot;</span><br>127.0.0.1:6379&gt; get use <span class="hljs-comment"># 线程1事务执行失败，数值没有被修改</span><br><span class="hljs-string">&quot;0&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>解锁获取最新值，然后再加锁进行事务。</p><p><code>unwatch</code>进行解锁。</p></blockquote><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-06 JRedis</title>
    <link href="/2021/03/20/2021-3-20-redis06/"/>
    <url>/2021/03/20/2021-3-20-redis06/</url>
    
    <content type="html"><![CDATA[<h2 id="六、Jedis"><a href="#六、Jedis" class="headerlink" title="六、Jedis"></a>六、Jedis</h2><p>使用Java来操作Redis，Jedis是Redis官方推荐使用的Java连接redis的客户端。</p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入jredis的包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--fastjson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.70<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编码测试</p><ul><li><p>连接数据库</p><ol><li><p>修改redis的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/<span class="hljs-built_in">local</span>/bin/myconfig/redis.conf<br>1<br></code></pre></td></tr></table></figure><ol><li><p>将只绑定本地注释</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4IRUFJ95-1597890996520)(狂神说 Redis.assets/image-20200813161921480.png)]</p></li><li><p>保护模式改为 no</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-oKjIVapw-1597890996521)(狂神说 Redis.assets/image-20200813161939847.png)]</p></li><li><p>允许后台运行</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-c2IMvpZL-1597890996522)(狂神说 Redis.assets/image-20200813161954567.png)]</p></li></ol></li></ol></li></ul></li><li><p>开放端口6379</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=6379/tcp --permanet<br>1<br></code></pre></td></tr></table></figure><p>重启防火墙服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart firewalld.service<br>1<br></code></pre></td></tr></table></figure><ol><li><p>阿里云服务器控制台配置安全组</p></li><li><p>重启redis-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@AlibabaECS bin]<span class="hljs-comment"># redis-server myconfig/redis.conf</span><br>1<br></code></pre></td></tr></table></figure></li></ol></li></ol><ul><li><p>操作命令</p><p><strong>TestPing.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPing</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;192.168.xx.xxx&quot;</span>, <span class="hljs-number">6379</span>);<br>        String response = jedis.ping();<br>        System.out.println(response); <span class="hljs-comment">// PONG</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>断开连接</p></li></ul><ol><li><p><strong>事务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTX</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;39.99.xxx.xx&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>        jsonObject.put(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;kuangshen&quot;</span>);<br>        <span class="hljs-comment">// 开启事务</span><br>        Transaction multi = jedis.multi();<br>        String result = jsonObject.toJSONString();<br>        <span class="hljs-comment">// jedis.watch(result)</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            multi.set(<span class="hljs-string">&quot;user1&quot;</span>, result);<br>            multi.set(<span class="hljs-string">&quot;user2&quot;</span>, result);<br>            <span class="hljs-comment">// 执行事务</span><br>            multi.exec();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            <span class="hljs-comment">// 放弃事务</span><br>            multi.discard();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭连接</span><br>            System.out.println(jedis.get(<span class="hljs-string">&quot;user1&quot;</span>));<br>            System.out.println(jedis.get(<span class="hljs-string">&quot;user2&quot;</span>));<br>            jedis.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-07 Springboot整合</title>
    <link href="/2021/03/20/2021-3-20-redis07/"/>
    <url>/2021/03/20/2021-3-20-redis07/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h2><h3 id="为什么使用Nosql"><a href="#为什么使用Nosql" class="headerlink" title="为什么使用Nosql"></a>为什么使用Nosql</h3><blockquote><p>1、单机Mysql时代</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020082010365930.png#pic_center" alt="在这里插入图片描述"></p><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><blockquote><p>2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）</p></blockquote><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p><p><img src="https://img-blog.csdnimg.cn/20200820103713734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><blockquote><p>3、分库分表 + 水平拆分 + Mysql集群</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200820103739584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>4、如今最近的年代</p></blockquote><p> 如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。</p><blockquote><p>目前一个基本的互联网项目</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200820103804572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>为什么要用NoSQL ？</p></blockquote><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！<br>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h3><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3 id="Nosql特点"><a href="#Nosql特点" class="headerlink" title="Nosql特点"></a>Nosql特点</h3><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p></li><li><p>传统的 RDBMS 和 NoSQL</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">传统的 RDBMS(关系型数据库)<br><span class="hljs-bullet">- </span>结构化组织<br><span class="hljs-bullet">- </span>SQL<br><span class="hljs-bullet">- </span>数据和关系都存在单独的表中 row col<br><span class="hljs-bullet">- </span>操作，数据定义语言<br><span class="hljs-bullet">- </span>严格的一致性<br><span class="hljs-bullet">- </span>基础的事务<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">Nosql<br><span class="hljs-bullet">- </span>不仅仅是数据<br><span class="hljs-bullet">- </span>没有固定的查询语言<br><span class="hljs-bullet">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）<br><span class="hljs-bullet">- </span>最终一致性<br><span class="hljs-bullet">- </span>CAP定理和BASE<br><span class="hljs-bullet">- </span>高性能，高可用，高扩展<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>了解：3V + 3高</p></blockquote><p>大数据时代的3V ：主要是<strong>描述问题</strong>的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h3 id="阿里巴巴演进分析"><a href="#阿里巴巴演进分析" class="headerlink" title="阿里巴巴演进分析"></a>阿里巴巴演进分析</h3><p>推荐阅读：阿里云的这群疯子<a href="https://yq.aliyun.com/articles/653511">https://yq.aliyun.com/articles/653511</a></p><p><img src="https://img-blog.csdnimg.cn/20200820103829446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p><img src="https://img-blog.csdnimg.cn/20200820103851613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 商品信息</span><br>- 一般存放在关系型数据库：Mysql,阿里巴巴使用的Mysql都是经过内部改动的。<br><br><span class="hljs-comment"># 商品描述、评论(文字居多)</span><br>- 文档型数据库：MongoDB<br><br><span class="hljs-comment"># 图片</span><br>- 分布式文件系统 FastDFS<br>- 淘宝：TFS<br>- Google: GFS<br>- Hadoop: HDFS<br>- 阿里云: oss<br><br><span class="hljs-comment"># 商品关键字 用于搜索</span><br>- 搜索引擎：solr,elasticsearch<br>- 阿里：Isearch 多隆<br><br><span class="hljs-comment"># 商品热门的波段信息</span><br>- 内存数据库：Redis，Memcache<br><br><span class="hljs-comment"># 商品交易，外部支付接口</span><br>- 第三方应用<br></code></pre></td></tr></table></figure><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><blockquote><p><strong>KV键值对</strong></p></blockquote><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><blockquote><p><strong>文档型数据库（bson数据格式）：</strong></p></blockquote><ul><li><strong>MongoDB</strong>(掌握)<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p><strong>列存储数据库</strong></p></blockquote><ul><li><strong>HBase</strong>(大数据必学)</li><li>分布式文件系统</li></ul><blockquote><p><strong>图关系数据库</strong></p></blockquote><p>用于广告推荐，社交网络</p><ul><li><strong>Neo4j</strong>、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis-03 五大数据类型</title>
    <link href="/2021/03/20/2021-3-20-redis03/"/>
    <url>/2021/03/20/2021-3-20-redis03/</url>
    
    <content type="html"><![CDATA[<h2 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h2><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库</strong>，<strong>高速缓存</strong>和<strong>消息队列代理</strong>。它支持<a href="https://www.redis.net.cn/tutorial/3508.html">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html">分区</a>。</p><h3 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h3><blockquote><p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p></blockquote><p>下面学习的命令：</p><ul><li><code>exists key</code>：判断键是否存在</li><li><code>del key</code>：删除键值对</li><li><code>move key db</code>：将键值对移动到指定数据库</li><li><code>expire key second</code>：设置键值对的过期时间</li><li><code>type key</code>：查看value的数据类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; keys * <span class="hljs-comment"># 查看当前数据库所有key</span><br>(empty list or <span class="hljs-built_in">set</span>)<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name qinjiang <span class="hljs-comment"># set key</span><br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> age 20<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;age&quot;</span><br>2) <span class="hljs-string">&quot;name&quot;</span><br>127.0.0.1:6379&gt; move age 1 <span class="hljs-comment"># 将键值对移动到指定数据库</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; EXISTS age <span class="hljs-comment"># 判断键是否存在</span><br>(<span class="hljs-built_in">integer</span>) 0 <span class="hljs-comment"># 不存在</span><br>127.0.0.1:6379&gt; EXISTS name<br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 存在</span><br>127.0.0.1:6379&gt; SELECT 1<br>OK<br>127.0.0.1:6379[1]&gt; keys *<br>1) <span class="hljs-string">&quot;age&quot;</span><br>127.0.0.1:6379[1]&gt; del age <span class="hljs-comment"># 删除键值对</span><br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 删除个数</span><br><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> age 20<br>OK<br>127.0.0.1:6379&gt; EXPIRE age 15 <span class="hljs-comment"># 设置键值对的过期时间</span><br><br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 设置成功 开始计数</span><br>127.0.0.1:6379&gt; ttl age <span class="hljs-comment"># 查看key的过期剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 13<br>127.0.0.1:6379&gt; ttl age<br>(<span class="hljs-built_in">integer</span>) 11<br>127.0.0.1:6379&gt; ttl age<br>(<span class="hljs-built_in">integer</span>) 9<br>127.0.0.1:6379&gt; ttl age<br>(<span class="hljs-built_in">integer</span>) -2 <span class="hljs-comment"># -2 表示key过期，-1表示key未设置过期时间</span><br><br>127.0.0.1:6379&gt; get age <span class="hljs-comment"># 过期的key 会被自动delete</span><br>(nil)<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;name&quot;</span><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> name <span class="hljs-comment"># 查看value的数据类型</span><br>string<br></code></pre></td></tr></table></figure><p>关于<code>TTL</code>命令</p><p>Redis的key，通过TTL命令返回key的过期时间，一般来说有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1.</li><li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li><li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ul><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ul><p>更多命令学习：<a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wBVZtGVm-1597890996517)(狂神说 Redis.assets/image-20200813114228439.png)]</p><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><p>普通的set、get直接略过。</p><table><thead><tr><th>命令</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>APPEND key value</code></td><td>向指定的key的value后追加字符串</td><td>127.0.0.1:6379&gt; set msg hello OK 127.0.0.1:6379&gt; append msg “ world” (integer) 11 127.0.0.1:6379&gt; get msg “hello world”</td></tr><tr><td><code>DECR/INCR key</code></td><td>将指定key的value数值进行+1/-1(仅对于数字)</td><td>127.0.0.1:6379&gt; set age 20 OK 127.0.0.1:6379&gt; incr age (integer) 21 127.0.0.1:6379&gt; decr age (integer) 20</td></tr><tr><td><code>INCRBY/DECRBY key n</code></td><td>按指定的步长对数值进行加减</td><td>127.0.0.1:6379&gt; INCRBY age 5 (integer) 25 127.0.0.1:6379&gt; DECRBY age 10 (integer) 15</td></tr><tr><td><code>INCRBYFLOAT key n</code></td><td>为数值加上浮点型数值</td><td>127.0.0.1:6379&gt; INCRBYFLOAT age 5.2 “20.2”</td></tr><tr><td><code>STRLEN key</code></td><td>获取key保存值的字符串长度</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; STRLEN msg (integer) 11</td></tr><tr><td><code>GETRANGE key start end</code></td><td>按起止位置获取字符串（闭区间，起止位置都取）</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; GETRANGE msg 3 9 “lo worl”</td></tr><tr><td><code>SETRANGE key offset value</code></td><td>用指定的value 替换key中 offset开始的值</td><td>127.0.0.1:6379&gt; SETRANGE msg 2 hello (integer) 7 127.0.0.1:6379&gt; get msg “tehello”</td></tr><tr><td><code>GETSET key value</code></td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td><td>127.0.0.1:6379&gt; GETSET msg test “hello world”</td></tr><tr><td><code>SETNX key value</code></td><td>仅当key不存在时进行set</td><td>127.0.0.1:6379&gt; SETNX msg test (integer) 0 127.0.0.1:6379&gt; SETNX name sakura (integer) 1</td></tr><tr><td><code>SETEX key seconds value</code></td><td>set 键值对并设置过期时间</td><td>127.0.0.1:6379&gt; setex name 10 root OK 127.0.0.1:6379&gt; get name (nil)</td></tr><tr><td><code>MSET key1 value1 [key2 value2..]</code></td><td>批量set键值对</td><td>127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 OK</td></tr><tr><td><code>MSETNX key1 value1 [key2 value2..]</code></td><td>批量设置键值对，仅当参数中所有的key都不存在时执行</td><td>127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4 (integer) 0</td></tr><tr><td><code>MGET key1 [key2..]</code></td><td>批量获取多个key保存的值</td><td>127.0.0.1:6379&gt; MGET k1 k2 k3 1) “v1” 2) “v2” 3) “v3”</td></tr><tr><td><code>PSETEX key milliseconds value</code></td><td>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，</td><td></td></tr><tr><td><code>getset key value</code></td><td>如果不存在值，则返回nil，如果存在值，获取原来的值，并设置新的值</td><td></td></tr></tbody></table><p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p><ul><li>计数器</li><li>统计多单位的数量：uid:123666：follow 0</li><li>粉丝数</li><li>对象存储缓存</li></ul><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><blockquote><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p></blockquote><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等</p><p><img src="https://img-blog.csdnimg.cn/20200820104440398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-VPvbIltc-1597890996518)(狂神说 Redis.assets/image-20200813114255459.png)]"></p><p>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>LPUSH/RPUSH key value1[value2..]</code></td><td>从左边/右边向列表中PUSH值(一个或者多个)。</td></tr><tr><td><code>LRANGE key start end</code></td><td>获取list 起止元素==（索引从左往右 递增）==</td></tr><tr><td><code>LPUSHX/RPUSHX key value</code></td><td>向已存在的列名中push值（一个或者多个）</td></tr><tr><td>`LINSERT key BEFORE</td><td>AFTER pivot value`</td></tr><tr><td><code>LLEN key</code></td><td>查看列表长度</td></tr><tr><td><code>LINDEX key index</code></td><td>通过索引获取列表元素</td></tr><tr><td><code>LSET key index value</code></td><td>通过索引为元素设值</td></tr><tr><td><code>LPOP/RPOP key</code></td><td>从最左边/最右边移除值 并返回</td></tr><tr><td><code>RPOPLPUSH source destination</code></td><td>将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</td></tr><tr><td><code>LTRIM key start end</code></td><td>通过下标截取指定范围内的列表</td></tr><tr><td><code>LREM key count value</code></td><td>List中是允许value重复的 <code>count &gt; 0</code>：从头部开始搜索 然后删除指定的value 至多删除count个 <code>count &lt; 0</code>：从尾部开始搜索… <code>count = 0</code>：删除列表中所有的指定value。</td></tr><tr><td><code>BLPOP/BRPOP key1[key2] timout</code></td><td>移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>BRPOPLPUSH source destination timeout</code></td><td>和<code>RPOPLPUSH</code>功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs bash">---------------------------LPUSH---RPUSH---LRANGE--------------------------------<br><br>127.0.0.1:6379&gt; LPUSH mylist k1 <span class="hljs-comment"># LPUSH mylist=&gt;&#123;1&#125;</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; LPUSH mylist k2 <span class="hljs-comment"># LPUSH mylist=&gt;&#123;2,1&#125;</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; RPUSH mylist k3 <span class="hljs-comment"># RPUSH mylist=&gt;&#123;2,1,3&#125;</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; get mylist <span class="hljs-comment"># 普通的get是无法获取list值的</span><br>(error) WRONGTYPE Operation against a key holding the wrong kind of value<br>127.0.0.1:6379&gt; LRANGE mylist 0 4 <span class="hljs-comment"># LRANGE 获取起止位置范围内的元素</span><br>1) <span class="hljs-string">&quot;k2&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>3) <span class="hljs-string">&quot;k3&quot;</span><br>127.0.0.1:6379&gt; LRANGE mylist 0 2<br>1) <span class="hljs-string">&quot;k2&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>3) <span class="hljs-string">&quot;k3&quot;</span><br>127.0.0.1:6379&gt; LRANGE mylist 0 1<br>1) <span class="hljs-string">&quot;k2&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; LRANGE mylist 0 -1 <span class="hljs-comment"># 获取全部元素</span><br>1) <span class="hljs-string">&quot;k2&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>3) <span class="hljs-string">&quot;k3&quot;</span><br><br>---------------------------LPUSHX---RPUSHX-----------------------------------<br><br>127.0.0.1:6379&gt; LPUSHX list v1 <span class="hljs-comment"># list不存在 LPUSHX失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; LPUSHX list v1 v2  <br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; LPUSHX mylist k4 k5 <span class="hljs-comment"># 向mylist中 左边 PUSH k4 k5</span><br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;k5&quot;</span><br>2) <span class="hljs-string">&quot;k4&quot;</span><br>3) <span class="hljs-string">&quot;k2&quot;</span><br>4) <span class="hljs-string">&quot;k1&quot;</span><br>5) <span class="hljs-string">&quot;k3&quot;</span><br><br>---------------------------LINSERT--LLEN--LINDEX--LSET----------------------------<br><br>127.0.0.1:6379&gt; LINSERT mylist after k2 ins_key1 <span class="hljs-comment"># 在k2元素后 插入ins_key1</span><br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;k5&quot;</span><br>2) <span class="hljs-string">&quot;k4&quot;</span><br>3) <span class="hljs-string">&quot;k2&quot;</span><br>4) <span class="hljs-string">&quot;ins_key1&quot;</span><br>5) <span class="hljs-string">&quot;k1&quot;</span><br>6) <span class="hljs-string">&quot;k3&quot;</span><br>127.0.0.1:6379&gt; LLEN mylist <span class="hljs-comment"># 查看mylist的长度</span><br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; LINDEX mylist 3 <span class="hljs-comment"># 获取下标为3的元素</span><br><span class="hljs-string">&quot;ins_key1&quot;</span><br>127.0.0.1:6379&gt; LINDEX mylist 0<br><span class="hljs-string">&quot;k5&quot;</span><br>127.0.0.1:6379&gt; LSET mylist 3 k6 <span class="hljs-comment"># 将下标3的元素 set值为k6</span><br>OK<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;k5&quot;</span><br>2) <span class="hljs-string">&quot;k4&quot;</span><br>3) <span class="hljs-string">&quot;k2&quot;</span><br>4) <span class="hljs-string">&quot;k6&quot;</span><br>5) <span class="hljs-string">&quot;k1&quot;</span><br>6) <span class="hljs-string">&quot;k3&quot;</span><br><br>---------------------------LPOP--RPOP--------------------------<br><br>127.0.0.1:6379&gt; LPOP mylist <span class="hljs-comment"># 左侧(头部)弹出</span><br><span class="hljs-string">&quot;k5&quot;</span><br>127.0.0.1:6379&gt; RPOP mylist <span class="hljs-comment"># 右侧(尾部)弹出</span><br><span class="hljs-string">&quot;k3&quot;</span><br><br>---------------------------RPOPLPUSH--------------------------<br><br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;k4&quot;</span><br>2) <span class="hljs-string">&quot;k2&quot;</span><br>3) <span class="hljs-string">&quot;k6&quot;</span><br>4) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; RPOPLPUSH mylist newlist <span class="hljs-comment"># 将mylist的最后一个值(k1)弹出，加入到newlist的头部</span><br><span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; LRANGE newlist 0 -1<br>1) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;k4&quot;</span><br>2) <span class="hljs-string">&quot;k2&quot;</span><br>3) <span class="hljs-string">&quot;k6&quot;</span><br><br>---------------------------LTRIM--------------------------<br><br>127.0.0.1:6379&gt; LTRIM mylist 0 1 <span class="hljs-comment"># 截取mylist中的 0~1部分</span><br>OK<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) <span class="hljs-string">&quot;k4&quot;</span><br>2) <span class="hljs-string">&quot;k2&quot;</span><br><br><span class="hljs-comment"># 初始 mylist: k2,k2,k2,k2,k2,k2,k4,k2,k2,k2,k2</span><br>---------------------------LREM--------------------------<br><br>127.0.0.1:6379&gt; LREM mylist 3 k2 <span class="hljs-comment"># 从头部开始搜索 至多删除3个 k2</span><br>(<span class="hljs-built_in">integer</span>) 3<br><span class="hljs-comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2,k2,k2</span><br><br>127.0.0.1:6379&gt; LREM mylist -2 k2 <span class="hljs-comment">#从尾部开始搜索 至多删除2个 k2</span><br>(<span class="hljs-built_in">integer</span>) 2<br><span class="hljs-comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2</span><br><br><br>---------------------------BLPOP--BRPOP--------------------------<br><br>mylist: k2,k2,k2,k4,k2,k2<br>newlist: k1<br><br>127.0.0.1:6379&gt; BLPOP newlist mylist 30 <span class="hljs-comment"># 从newlist中弹出第一个值，mylist作为候选</span><br>1) <span class="hljs-string">&quot;newlist&quot;</span> <span class="hljs-comment"># 弹出</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; BLPOP newlist mylist 30<br>1) <span class="hljs-string">&quot;mylist&quot;</span> <span class="hljs-comment"># 由于newlist空了 从mylist中弹出</span><br>2) <span class="hljs-string">&quot;k2&quot;</span><br>127.0.0.1:6379&gt; BLPOP newlist 30<br>(30.10s) <span class="hljs-comment"># 超时了</span><br><br>127.0.0.1:6379&gt; BLPOP newlist 30 <span class="hljs-comment"># 我们连接另一个客户端向newlist中push了test, 阻塞被解决。</span><br>1) <span class="hljs-string">&quot;newlist&quot;</span><br>2) <span class="hljs-string">&quot;test&quot;</span><br>(12.54s)<br></code></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>list实际上是一个链表，before Node after , left, right 都可以插入值</li><li><strong>如果key不存在，则创建新的链表</strong></li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li></ul><p><strong>应用：</strong></p><p><strong>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</strong></p><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><blockquote><p>Redis的Set是<strong>string类型</strong>的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>SADD key member1[member2..]</code></td><td>向集合中无序增加一个/多个成员</td></tr><tr><td><code>SCARD key</code></td><td>获取集合的成员数</td></tr><tr><td><code>SMEMBERS key</code></td><td>返回集合中所有的成员</td></tr><tr><td><code>SISMEMBER key member</code></td><td>查询member元素是否是集合的成员,结果是无序的</td></tr><tr><td><code>SRANDMEMBER key [count]</code></td><td>随机返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SPOP key [count]</code></td><td>随机移除并返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SMOVE source destination member</code></td><td>将source集合的成员member移动到destination集合</td></tr><tr><td><code>SREM key member1[member2..]</code></td><td>移除集合中一个/多个成员</td></tr><tr><td><code>SDIFF key1[key2..]</code></td><td>返回所有集合的差集 key1- key2 - …</td></tr><tr><td><code>SDIFFSTORE destination key1[key2..]</code></td><td>在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</td></tr><tr><td><code>SINTER key1 [key2..]</code></td><td>返回所有集合的交集</td></tr><tr><td><code>SINTERSTORE destination key1[key2..]</code></td><td>在SINTER的基础上，存储结果到集合中。覆盖</td></tr><tr><td><code>SUNION key1 [key2..]</code></td><td>返回所有集合的并集</td></tr><tr><td><code>SUNIONSTORE destination key1 [key2..]</code></td><td>在SUNION的基础上，存储结果到及和张。覆盖</td></tr><tr><td><code>SSCAN KEY [MATCH pattern] [COUNT count]</code></td><td>在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs bash">---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------<br><br>127.0.0.1:6379&gt; SADD myset m1 m2 m3 m4 <span class="hljs-comment"># 向myset中增加成员 m1~m4</span><br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; SCARD myset <span class="hljs-comment"># 获取集合的成员数目</span><br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; smembers myset <span class="hljs-comment"># 获取集合中所有成员</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>3) <span class="hljs-string">&quot;m2&quot;</span><br>4) <span class="hljs-string">&quot;m1&quot;</span><br>127.0.0.1:6379&gt; SISMEMBER myset m5 <span class="hljs-comment"># 查询m5是否是myset的成员</span><br>(<span class="hljs-built_in">integer</span>) 0 <span class="hljs-comment"># 不是，返回0</span><br>127.0.0.1:6379&gt; SISMEMBER myset m2<br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 是，返回1</span><br>127.0.0.1:6379&gt; SISMEMBER myset m3<br>(<span class="hljs-built_in">integer</span>) 1<br><br>---------------------SRANDMEMBER--SPOP----------------------------------<br><br>127.0.0.1:6379&gt; SRANDMEMBER myset 3 <span class="hljs-comment"># 随机返回3个成员</span><br>1) <span class="hljs-string">&quot;m2&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>3) <span class="hljs-string">&quot;m4&quot;</span><br>127.0.0.1:6379&gt; SRANDMEMBER myset <span class="hljs-comment"># 随机返回1个成员</span><br><span class="hljs-string">&quot;m3&quot;</span><br>127.0.0.1:6379&gt; SPOP myset 2 <span class="hljs-comment"># 随机移除并返回2个成员</span><br>1) <span class="hljs-string">&quot;m1&quot;</span><br>2) <span class="hljs-string">&quot;m4&quot;</span><br><span class="hljs-comment"># 将set还原到&#123;m1,m2,m3,m4&#125;</span><br><br>---------------------SMOVE--SREM----------------------------------------<br><br>127.0.0.1:6379&gt; SMOVE myset newset m3 <span class="hljs-comment"># 将myset中m3成员移动到newset集合</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m2&quot;</span><br>3) <span class="hljs-string">&quot;m1&quot;</span><br>127.0.0.1:6379&gt; SMEMBERS newset<br>1) <span class="hljs-string">&quot;m3&quot;</span><br>127.0.0.1:6379&gt; SREM newset m3 <span class="hljs-comment"># 从newset中移除m3元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SMEMBERS newset<br>(empty list or <span class="hljs-built_in">set</span>)<br><br><span class="hljs-comment"># 下面开始是多集合操作,多集合操作中若只有一个参数默认和自身进行运算</span><br><span class="hljs-comment"># setx=&gt;&#123;m1,m2,m4,m6&#125;, sety=&gt;&#123;m2,m5,m6&#125;, setz=&gt;&#123;m1,m3,m6&#125;</span><br><br>-----------------------------SDIFF------------------------------------<br><br>127.0.0.1:6379&gt; SDIFF setx sety setz <span class="hljs-comment"># 等价于setx-sety-setz</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>127.0.0.1:6379&gt; SDIFF setx sety <span class="hljs-comment"># setx - sety</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m1&quot;</span><br>127.0.0.1:6379&gt; SDIFF sety setx <span class="hljs-comment"># sety - setx</span><br>1) <span class="hljs-string">&quot;m5&quot;</span><br><br><br>-------------------------SINTER---------------------------------------<br><span class="hljs-comment"># 共同关注（交集）</span><br><br>127.0.0.1:6379&gt; SINTER setx sety setz <span class="hljs-comment"># 求 setx、sety、setx的交集</span><br>1) <span class="hljs-string">&quot;m6&quot;</span><br>127.0.0.1:6379&gt; SINTER setx sety <span class="hljs-comment"># 求setx sety的交集</span><br>1) <span class="hljs-string">&quot;m2&quot;</span><br>2) <span class="hljs-string">&quot;m6&quot;</span><br><br>-------------------------SUNION---------------------------------------<br><br>127.0.0.1:6379&gt; SUNION setx sety setz <span class="hljs-comment"># setx sety setz的并集</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m6&quot;</span><br>3) <span class="hljs-string">&quot;m3&quot;</span><br>4) <span class="hljs-string">&quot;m2&quot;</span><br>5) <span class="hljs-string">&quot;m1&quot;</span><br>6) <span class="hljs-string">&quot;m5&quot;</span><br>127.0.0.1:6379&gt; SUNION setx sety <span class="hljs-comment"># setx sety 并集</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m6&quot;</span><br>3) <span class="hljs-string">&quot;m2&quot;</span><br>4) <span class="hljs-string">&quot;m1&quot;</span><br>5) <span class="hljs-string">&quot;m5&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><blockquote><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>HSET key field value</code></td><td>将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</td></tr><tr><td><code>HMSET key field1 value1 [field2 value2..]</code></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td><code>HSETNX key field value</code></td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td><code>HEXISTS key field</code></td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td><code>HGET key field value</code></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><code>HMGET key field1 [field2..]</code></td><td>获取所有给定字段的值</td></tr><tr><td><code>HGETALL key</code></td><td>获取在哈希表key 的所有字段和值</td></tr><tr><td><code>HKEYS key</code></td><td>获取哈希表key中所有的字段</td></tr><tr><td><code>HLEN key</code></td><td>获取哈希表中字段的数量</td></tr><tr><td><code>HVALS key</code></td><td>获取哈希表中所有值</td></tr><tr><td><code>HDEL key field1 [field2..]</code></td><td>删除哈希表key中一个/多个field字段</td></tr><tr><td><code>HINCRBY key field n</code></td><td>为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</td></tr><tr><td><code>HINCRBYFLOAT key field n</code></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 n。</td></tr><tr><td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td><td>迭代哈希表中的键值对。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs bash">------------------------HSET--HMSET--HSETNX----------------<br>127.0.0.1:6379&gt; HSET studentx name sakura <span class="hljs-comment"># 将studentx哈希表作为一个对象，设置name为sakura</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; HSET studentx name gyc <span class="hljs-comment"># 重复设置field进行覆盖，并返回0</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; HSET studentx age 20 <span class="hljs-comment"># 设置studentx的age为20</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; HMSET studentx sex 1 tel 15623667886 <span class="hljs-comment"># 设置sex为1，tel为15623667886</span><br>OK<br>127.0.0.1:6379&gt; HSETNX studentx name gyc <span class="hljs-comment"># HSETNX 设置已存在的field</span><br>(<span class="hljs-built_in">integer</span>) 0 <span class="hljs-comment"># 失败</span><br>127.0.0.1:6379&gt; HSETNX studentx email 12345@qq.com<br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 成功</span><br><br>----------------------HEXISTS--------------------------------<br>127.0.0.1:6379&gt; HEXISTS studentx name <span class="hljs-comment"># name字段在studentx中是否存在</span><br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 存在</span><br>127.0.0.1:6379&gt; HEXISTS studentx addr<br>(<span class="hljs-built_in">integer</span>) 0 <span class="hljs-comment"># 不存在</span><br><br>-------------------HGET--HMGET--HGETALL-----------<br>127.0.0.1:6379&gt; HGET studentx name <span class="hljs-comment"># 获取studentx中name字段的value</span><br><span class="hljs-string">&quot;gyc&quot;</span><br>127.0.0.1:6379&gt; HMGET studentx name age tel <span class="hljs-comment"># 获取studentx中name、age、tel字段的value</span><br>1) <span class="hljs-string">&quot;gyc&quot;</span><br>2) <span class="hljs-string">&quot;20&quot;</span><br>3) <span class="hljs-string">&quot;15623667886&quot;</span><br>127.0.0.1:6379&gt; HGETALL studentx <span class="hljs-comment"># 获取studentx中所有的field及其value</span><br> 1) <span class="hljs-string">&quot;name&quot;</span><br> 2) <span class="hljs-string">&quot;gyc&quot;</span><br> 3) <span class="hljs-string">&quot;age&quot;</span><br> 4) <span class="hljs-string">&quot;20&quot;</span><br> 5) <span class="hljs-string">&quot;sex&quot;</span><br> 6) <span class="hljs-string">&quot;1&quot;</span><br> 7) <span class="hljs-string">&quot;tel&quot;</span><br> 8) <span class="hljs-string">&quot;15623667886&quot;</span><br> 9) <span class="hljs-string">&quot;email&quot;</span><br>10) <span class="hljs-string">&quot;12345@qq.com&quot;</span><br><br><br>--------------------HKEYS--HLEN--HVALS--------------<br>127.0.0.1:6379&gt; HKEYS studentx <span class="hljs-comment"># 查看studentx中所有的field</span><br>1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;age&quot;</span><br>3) <span class="hljs-string">&quot;sex&quot;</span><br>4) <span class="hljs-string">&quot;tel&quot;</span><br>5) <span class="hljs-string">&quot;email&quot;</span><br>127.0.0.1:6379&gt; HLEN studentx <span class="hljs-comment"># 查看studentx中的字段数量</span><br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6379&gt; HVALS studentx <span class="hljs-comment"># 查看studentx中所有的value</span><br>1) <span class="hljs-string">&quot;gyc&quot;</span><br>2) <span class="hljs-string">&quot;20&quot;</span><br>3) <span class="hljs-string">&quot;1&quot;</span><br>4) <span class="hljs-string">&quot;15623667886&quot;</span><br>5) <span class="hljs-string">&quot;12345@qq.com&quot;</span><br><br>-------------------------HDEL--------------------------<br>127.0.0.1:6379&gt; HDEL studentx sex tel <span class="hljs-comment"># 删除studentx 中的sex、tel字段</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; HKEYS studentx<br>1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;age&quot;</span><br>3) <span class="hljs-string">&quot;email&quot;</span><br><br>-------------HINCRBY--HINCRBYFLOAT------------------------<br>127.0.0.1:6379&gt; HINCRBY studentx age 1 <span class="hljs-comment"># studentx的age字段数值+1</span><br>(<span class="hljs-built_in">integer</span>) 21<br>127.0.0.1:6379&gt; HINCRBY studentx name 1 <span class="hljs-comment"># 非整数字型字段不可用</span><br>(error) ERR <span class="hljs-built_in">hash</span> value is not an <span class="hljs-built_in">integer</span><br>127.0.0.1:6379&gt; HINCRBYFLOAT studentx weight 0.6 <span class="hljs-comment"># weight字段增加0.6</span><br><span class="hljs-string">&quot;90.8&quot;</span><br></code></pre></td></tr></table></figure><p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！<strong>Hash更适合于对象的存储，Sring更加适合字符串存储！</strong></p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>ZADD key score member1 [score2 member2]</code></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><code>ZCARD key</code></td><td>获取有序集合的成员数</td></tr><tr><td><code>ZCOUNT key min max</code></td><td>计算在有序集合中指定区间score的成员数</td></tr><tr><td><code>ZINCRBY key n member</code></td><td>有序集合中对指定成员的分数加上增量 n</td></tr><tr><td><code>ZSCORE key member</code></td><td>返回有序集中，成员的分数值</td></tr><tr><td><code>ZRANK key member</code></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><code>ZRANGE key start end</code></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><code>ZRANGEBYLEX key min max</code></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><code>ZRANGEBYSCORE key min max</code></td><td>通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</td></tr><tr><td><code>ZLEXCOUNT key min max</code></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><code>ZREM key member1 [member2..]</code></td><td>移除有序集合中一个/多个成员</td></tr><tr><td><code>ZREMRANGEBYLEX key min max</code></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYRANK key start stop</code></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYSCORE key min max</code></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><code>ZREVRANGE key start end</code></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><code>ZREVRANGEBYSCORRE key max min</code></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><code>ZREVRANGEBYLEX key max min</code></td><td>返回有序集中指定字典区间内的成员，按字典顺序倒序</td></tr><tr><td><code>ZREVRANK key member</code></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><code>ZINTERSTORE destination numkeys key1 [key2 ..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score</td></tr><tr><td><code>ZUNIONSTORE destination numkeys key1 [key2..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><code>ZSCAN key cursor [MATCH pattern\] [COUNT count]</code></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs bash">-------------------ZADD--ZCARD--ZCOUNT--------------<br>127.0.0.1:6379&gt; ZADD myzset 1 m1 2 m2 3 m3 <span class="hljs-comment"># 向有序集合myzset中添加成员m1 score=1 以及成员m2 score=2..</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ZCARD myzset <span class="hljs-comment"># 获取有序集合的成员数</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ZCOUNT myzset 0 1 <span class="hljs-comment"># 获取score在 [0,1]区间的成员数量</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZCOUNT myzset 0 2<br>(<span class="hljs-built_in">integer</span>) 2<br><br>----------------ZINCRBY--ZSCORE--------------------------<br>127.0.0.1:6379&gt; ZINCRBY myzset 5 m2 <span class="hljs-comment"># 将成员m2的score +5</span><br><span class="hljs-string">&quot;7&quot;</span><br>127.0.0.1:6379&gt; ZSCORE myzset m1 <span class="hljs-comment"># 获取成员m1的score</span><br><span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; ZSCORE myzset m2<br><span class="hljs-string">&quot;7&quot;</span><br><br>--------------ZRANK--ZRANGE-----------------------------------<br>127.0.0.1:6379&gt; ZRANK myzset m1 <span class="hljs-comment"># 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; ZRANK myzset m2<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ZRANGE myzset 0 1 <span class="hljs-comment"># 获取索引在 0~1的成员</span><br>1) <span class="hljs-string">&quot;m1&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>127.0.0.1:6379&gt; ZRANGE myzset 0 -1 <span class="hljs-comment"># 获取全部成员</span><br>1) <span class="hljs-string">&quot;m1&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>3) <span class="hljs-string">&quot;m2&quot;</span><br><br><span class="hljs-comment">#testset=&gt;&#123;abc,add,amaze,apple,back,java,redis&#125; score均为0</span><br>------------------ZRANGEBYLEX---------------------------------<br>127.0.0.1:6379&gt; ZRANGEBYLEX testset - + <span class="hljs-comment"># 返回所有成员</span><br>1) <span class="hljs-string">&quot;abc&quot;</span><br>2) <span class="hljs-string">&quot;add&quot;</span><br>3) <span class="hljs-string">&quot;amaze&quot;</span><br>4) <span class="hljs-string">&quot;apple&quot;</span><br>5) <span class="hljs-string">&quot;back&quot;</span><br>6) <span class="hljs-string">&quot;java&quot;</span><br>7) <span class="hljs-string">&quot;redis&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 0 3 <span class="hljs-comment"># 分页 按索引显示查询结果的 0,1,2条记录</span><br>1) <span class="hljs-string">&quot;abc&quot;</span><br>2) <span class="hljs-string">&quot;add&quot;</span><br>3) <span class="hljs-string">&quot;amaze&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 3 3 <span class="hljs-comment"># 显示 3,4,5条记录</span><br>1) <span class="hljs-string">&quot;apple&quot;</span><br>2) <span class="hljs-string">&quot;back&quot;</span><br>3) <span class="hljs-string">&quot;java&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYLEX testset (- [apple <span class="hljs-comment"># 显示 (-,apple] 区间内的成员</span><br>1) <span class="hljs-string">&quot;abc&quot;</span><br>2) <span class="hljs-string">&quot;add&quot;</span><br>3) <span class="hljs-string">&quot;amaze&quot;</span><br>4) <span class="hljs-string">&quot;apple&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYLEX testset [apple [java <span class="hljs-comment"># 显示 [apple,java]字典区间的成员</span><br>1) <span class="hljs-string">&quot;apple&quot;</span><br>2) <span class="hljs-string">&quot;back&quot;</span><br>3) <span class="hljs-string">&quot;java&quot;</span><br><br>-----------------------ZRANGEBYSCORE---------------------<br>127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 10 <span class="hljs-comment"># 返回score在 [1,10]之间的的成员</span><br>1) <span class="hljs-string">&quot;m1&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>3) <span class="hljs-string">&quot;m2&quot;</span><br>127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 5<br>1) <span class="hljs-string">&quot;m1&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br><br>--------------------ZLEXCOUNT-----------------------------<br>127.0.0.1:6379&gt; ZLEXCOUNT testset - +<br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379&gt; ZLEXCOUNT testset [apple [java<br>(<span class="hljs-built_in">integer</span>) 3<br><br>------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------<br>127.0.0.1:6379&gt; ZREM testset abc <span class="hljs-comment"># 移除成员abc</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZREMRANGEBYLEX testset [apple [java <span class="hljs-comment"># 移除字典区间[apple,java]中的所有成员</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; ZREMRANGEBYRANK testset 0 1 <span class="hljs-comment"># 移除排名0~1的所有成员</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset 0 3 <span class="hljs-comment"># 移除score在 [0,3]的成员</span><br>(<span class="hljs-built_in">integer</span>) 2<br><br><br><span class="hljs-comment"># testset=&gt; &#123;abc,add,apple,amaze,back,java,redis&#125; score均为0</span><br><span class="hljs-comment"># myzset=&gt; &#123;(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)&#125;</span><br>----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------<br>127.0.0.1:6379&gt; ZREVRANGE myzset 0 3 <span class="hljs-comment"># 按score递减排序，然后按索引，返回结果的 0~3</span><br>1) <span class="hljs-string">&quot;m9&quot;</span><br>2) <span class="hljs-string">&quot;m7&quot;</span><br>3) <span class="hljs-string">&quot;m4&quot;</span><br>4) <span class="hljs-string">&quot;m3&quot;</span><br>127.0.0.1:6379&gt; ZREVRANGE myzset 2 4 <span class="hljs-comment"># 返回排序结果的 索引的2~4</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>3) <span class="hljs-string">&quot;m2&quot;</span><br>127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 6 2 <span class="hljs-comment"># 按score递减顺序 返回集合中分数在[2,6]之间的成员</span><br>1) <span class="hljs-string">&quot;m4&quot;</span><br>2) <span class="hljs-string">&quot;m3&quot;</span><br>3) <span class="hljs-string">&quot;m2&quot;</span><br>127.0.0.1:6379&gt; ZREVRANGEBYLEX testset [java (add <span class="hljs-comment"># 按字典倒序 返回集合中(add,java]字典区间的成员</span><br>1) <span class="hljs-string">&quot;java&quot;</span><br>2) <span class="hljs-string">&quot;back&quot;</span><br>3) <span class="hljs-string">&quot;apple&quot;</span><br>4) <span class="hljs-string">&quot;amaze&quot;</span><br><br>-------------------------ZREVRANK------------------------------<br>127.0.0.1:6379&gt; ZREVRANK myzset m7 <span class="hljs-comment"># 按score递减顺序，返回成员m7索引</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZREVRANK myzset m2<br>(<span class="hljs-built_in">integer</span>) 4<br><br><br><span class="hljs-comment"># mathscore=&gt;&#123;(xm,90),(xh,95),(xg,87)&#125; 小明、小红、小刚的数学成绩</span><br><span class="hljs-comment"># enscore=&gt;&#123;(xm,70),(xh,93),(xg,90)&#125; 小明、小红、小刚的英语成绩</span><br>-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------<br>127.0.0.1:6379&gt; ZINTERSTORE sumscore 2 mathscore enscore <span class="hljs-comment"># 将mathscore enscore进行合并 结果存放到sumscore</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; ZRANGE sumscore 0 -1 withscores <span class="hljs-comment"># 合并后的score是之前集合中所有score的和</span><br>1) <span class="hljs-string">&quot;xm&quot;</span><br>2) <span class="hljs-string">&quot;160&quot;</span><br>3) <span class="hljs-string">&quot;xg&quot;</span><br>4) <span class="hljs-string">&quot;177&quot;</span><br>5) <span class="hljs-string">&quot;xh&quot;</span><br>6) <span class="hljs-string">&quot;188&quot;</span><br><br>127.0.0.1:6379&gt; ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN <span class="hljs-comment"># 取两个集合的成员score最小值作为结果的</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; ZRANGE lowestscore 0 -1 withscores<br>1) <span class="hljs-string">&quot;xm&quot;</span><br>2) <span class="hljs-string">&quot;70&quot;</span><br>3) <span class="hljs-string">&quot;xg&quot;</span><br>4) <span class="hljs-string">&quot;87&quot;</span><br>5) <span class="hljs-string">&quot;xh&quot;</span><br>6) <span class="hljs-string">&quot;93&quot;</span><br></code></pre></td></tr></table></figure><p>应用案例：</p><ul><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《黑客与画家》读后感</title>
    <link href="/2021/03/01/2021-03-01-hackers&amp;painters/"/>
    <url>/2021/03/01/2021-03-01-hackers&amp;painters/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这又是一本恨相见晚的著作，保罗·格雷厄姆在书中讲述了书呆子、编程、财富三块大内容。每个部分的阅读之后都让我觉得如获至宝，直接从这三个方面讲一下自己的心得吧。</p><h4 id="书呆子"><a href="#书呆子" class="headerlink" title="书呆子"></a>书呆子</h4><blockquote><p>哪怕你什么也改变不了，但是仅仅是理解自己的处境，也能使得痛苦减轻一些。书呆子并不是失败者。他们只是在玩一个不同的游戏，一个更接近于真实情况的游戏。成年人明白这一点。成功的成年人，几乎都声称自己在高中属于书呆子。</p></blockquote><p>开篇先是关于书呆子为何不受欢迎的分析，笔者为我们回答了这个困扰整个时代的关键问题，实际上是因为青少年在心理上尚未摆脱儿童状态，大多会残忍地对待他人。孩子们欺负书呆子是为了让自己好受一些…虽然我算不上是什么书呆子，但若是能够早些知道这些道理，在独处学习之时也可多上几分从容。是教育体制的缺陷造成如此不堪的现象，但若是学生本人或是其老师家长能够知悉真实情况，做出行动，便可施以拯救，这同样为我在以后教导子女的道路上提供指导，让他在通往成功的成年人的道路上少些黑暗的时光。</p><h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><p>黑客篇讲述了hack文化的由来以及我们如今所处的这个互联网时代的本质。我从小就向往电影里身穿黑灰卫衣的神秘黑客，他们就好像是现实城市中的江湖侠客，代码为剑，行心中大义。多年之后我如愿以偿进入了计算机专业，突然发现自己好似偏离了儿时的侠客梦，好像应该走网络安全？不然，直到今天读了此书，我才明白黑客一词最初的定义，hack指很巧妙或便捷的解决方法，从事hacking的hacker，其行为准则为：好玩、高智商、探索。好像更酷了。保罗先生认为黑客与画家同属一宗，他们都是创作者，试图创作出优美的作品，在创作的过程中可能发现一些新技术。我想这才是我真正想成为的黑客，虽然我未能像电影(现实亦有)里的少年天才那样从小自学编程，但也依然要努力在这条路上向前迈步。</p><blockquote><p>黑客如何才能做自己喜欢的事情？我认为这个问题的解决办法是一个几乎所有创作者都知道的方法：找一份养家糊口的“白天工作”。这个词是从音乐家身上来的，他们晚上表演音乐，所以白天可以找一份其他工作。更一般地说，“白天工作”的意思是，你有一份为了赚钱的工作，还有一份为了爱好的工作。几乎所有的创作者在职业生涯的早期都有一份“白天工作”。画家和作家尤其显著。</p></blockquote><p>既然把黑客比作画家，那拥有设计者的品位就成了必要。那么什么是好的设计呢？笔者给出了许多定义:简单、永不过时、解决主要问题、启发性、有趣味性、艰苦、看似容易、对称、模仿自然…挑着讲一些自己的理解吧，少即是多的道理在编程界自然通用，从界面到代码，简洁美感的标准都颇为重要。永不过时这样的高标准自不用说，解决主要问题相当于82思想吧，如果在8上面做的不够好，完成再多的2也失去了意义。艰苦和看似容易结合在一起，感觉是集大成的结论，大智若愚？人类史上许多重大的发现，在形式上往往很简单，比如一些看似简单的数学物理学结论，给你一种我好像也行的感觉，其实在背后需要大量的努力。自然永远是人类的老师，古往今来的很多例子中都体现了这一点，船只有龙骨、飞机像鸟类等等。</p><blockquote><p>哥白尼不认同托勒密的体系，一个极其重要的原因是，他觉得托勒密提出的偏心等距点(equant)毫无美感。         –托马斯·库恩《哥白尼革命》</p></blockquote><p>如今我们这个时代越来越被互联网所掌握，作为以后的程序员，应当了解更多黑客和互联网之后的东西，理解这一重大的技术革命，在时代的洪流之中掌控自己的命运。</p><h4 id="财富"><a href="#财富" class="headerlink" title="财富"></a>财富</h4><p>关于财富，我本能的将其和现实二字挂上钩，养家糊口是我们每个人都避不开的话题。保罗先生说致富的最好方法就是为社会创造财富。创造财富的最好方法就是创业。这个观点是因为创业的小公司能够更勤奋工作、摆脱杂事干扰。条件受限的我未能选择创业，先绕开这个话题。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我仍然希望自己能够成为一个不错的黑客，能够用自己的代码去做有意义的事情，去帮助更多的人，书中还有许许多多有用的道理，关于成为一个优秀的黑客、贫富差距、设计品位、编程语言的进化、书呆子的复仇等等，后续闲时补充。</p>]]></content>
    
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目导出及重新运行</title>
    <link href="/2021/02/20/2021-02-20-redeploy/"/>
    <url>/2021/02/20/2021-02-20-redeploy/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>陪伴我走过大学生涯的联想小新已经故障频发，重装系统过后总是需要重新布置环境部署项目，正好在这里记录一下大致步骤。</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p><strong>导出项目</strong></p><p>1.导出数据库sql文件，可使用navicat中比较方便<br>2.通过maven package打包后端项目<br>3.通过cnpm run build打包前端项目</p><p><strong>环境部署</strong></p><p>开发所需要的基本环境(前端+后端+数据库)在其他的blog中有完整描述不再赘述，大致步骤为</p><ol><li>安装数据库mysql，可视化工具navicat</li><li>安装jdk，配置环境变量，编译器IDEA</li><li>安装node.js和npm，npm可配置淘宝镜像为cnpm，编译器VSCode</li></ol><p><strong>运行项目</strong></p><p>在配置好的新环境中运行项目</p><ol><li>新建同名database，导入sql文件</li><li>前端：npm run serve运行包</li><li>后端：运行jar包。(有必要时需提前更改数据库配置)</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕设项目简介-云文档管理系统</title>
    <link href="/2020/06/01/2020-06-01-Gra-project/"/>
    <url>/2020/06/01/2020-06-01-Gra-project/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初稿001，之后还有做1-2次完善。</p><p>基于Vue+Springboot+Elasticsearch</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>通用的环境配置不赘述(前端+后端+数据库)，移步其他blog。这里讲一下ElasticSearch的环境配置。</p><ol><li>在官网下载ES的安装包，解压后即可使用，进入bin目录，双击elastic search.bat，访问<a href="http://localhost:9200可以测试是否安装成功。">http://localhost:9200可以测试是否安装成功。</a></li><li>下载head插件，用于对ES数据库进行操作，进入安装目录，在cmd中输入命令grunt server运行head插件，访问<a href="http://localhost:9300测试是否安装成功。">http://localhost:9300测试是否安装成功。</a></li><li>下载logstash插件，用于同步MySQL的数据，在logstash目录下新建一个mysql文件夹，然后再创建一个配置文件mysql.conf，编写如下代码。</li></ol><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">aqinput</span> &#123;<br>  jdbc &#123;<br>    <span class="hljs-attr">jdbc_connection_string</span> =&gt; <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/icloud_note&quot;</span><br>    <span class="hljs-attr">jdbc_user</span> =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-attr">jdbc_password</span> =&gt; <span class="hljs-string">&quot;password&quot;</span><br>    <span class="hljs-attr">jdbc_driver_library</span> =&gt; <span class="hljs-string">&quot;D:/Download/logstash-6.4.3/mysql/mysql-connector-java-8.0.12.jar&quot;</span><br>    <span class="hljs-attr">jdbc_driver_class</span> =&gt; <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>    <span class="hljs-attr">jdbc_paging_enabled</span> =&gt; <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">jdbc_page_size</span> =&gt; <span class="hljs-string">&quot;5000&quot;</span><br>    <span class="hljs-attr">statement</span>=&gt; <span class="hljs-string">&quot;select * from doc&quot;</span><br>    <span class="hljs-attr">schedule</span> =&gt; <span class="hljs-string">&quot;* * * * *&quot;</span><br>    <span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;doc_item&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">output</span> &#123;<br>  elasticsearch &#123;<br>    <span class="hljs-comment">#es服务器</span><br>    <span class="hljs-attr">hosts</span> =&gt; <span class="hljs-string">&quot;localhost:9200&quot;</span><br>    <span class="hljs-comment">#索引名称</span><br>    <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;doc&quot;</span><br>    <span class="hljs-attr">document_type</span> =&gt; <span class="hljs-string">&quot;%&#123;type&#125;&quot;</span><br>    <span class="hljs-comment">#自增id</span><br>    <span class="hljs-attr">document_id</span> =&gt; <span class="hljs-string">&quot;%&#123;id&#125;&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">stdout</span> &#123;<br>    <span class="hljs-attr">codec</span> =&gt; json_lines<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><h5 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h5><p><strong>注册登录</strong><br><img src="/img/2021/Gra-login.png" alt="img"><br><img src="/img/2021/Gra-register.png" alt="img"><br>流程：在前端检测表单的输入格式，在后端检查信息是否正确，用户是否已存在等等。</p><p>前端代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">rules: &#123;<br>  username: [<br>    &#123; required: <span class="hljs-literal">true</span>, message: <span class="hljs-string">&quot;请输入用户名&quot;</span>, trigger: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>    &#123; min: <span class="hljs-number">3</span>, max: <span class="hljs-number">8</span>, message: <span class="hljs-string">&quot;长度在 3 到 8 个字符&quot;</span>, trigger: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>  ],<br>  password:...<br>&#125;<br><br>handleLogin() &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">&quot;loginForm&quot;</span>] !== <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">&quot;loginForm&quot;</span>].validate((valid) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (valid) &#123;<br><span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.radio == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<br><span class="hljs-keyword">this</span>.loginForm.username == <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp;<br><span class="hljs-keyword">this</span>.loginForm.password == <span class="hljs-string">&quot;admin&quot;</span><br>  ) &#123;<br><span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setUser&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br><span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">&quot;/admin&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">this</span>.$message(&#123;<br>  type: <span class="hljs-string">&quot;info&quot;</span>,<br>  message: <span class="hljs-string">&quot;您不是管理员喔~&quot;</span>,<br>&#125;);<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span><br>  <span class="hljs-keyword">this</span>.$store<br>.dispatch(<span class="hljs-string">&quot;Login&quot;</span>, <span class="hljs-keyword">this</span>.loginForm)<br>.then((response) =&gt; &#123;<br>  <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>;<br>  let code = response.<span class="hljs-keyword">data</span>.code;<br>  <span class="hljs-keyword">if</span> (code == <span class="hljs-number">200</span>) &#123;<br><span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setUser&quot;</span>, response.<span class="hljs-keyword">data</span>.<span class="hljs-keyword">data</span>);<br>console.log(<span class="hljs-keyword">this</span>.$store.getters.getUser);<br><span class="hljs-keyword">this</span>.$router.push(&#123;<br>  path: <span class="hljs-string">&quot;/home&quot;</span>,<br>&#125;);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code == <span class="hljs-number">500</span>) &#123;<br><span class="hljs-keyword">this</span>.$message(&#123;<br>  type: <span class="hljs-string">&quot;warning&quot;</span>,<br>  message: <span class="hljs-string">&quot;用户被冻结!&quot;</span>,<br>&#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">this</span>.$message(&#123;<br>  type: <span class="hljs-string">&quot;error&quot;</span>,<br>  message: <span class="hljs-string">&quot;用户名或密码错误!&quot;</span>,<br>&#125;);<br>  &#125;<br>&#125;)<br>.<span class="hljs-keyword">catch</span>(() =&gt; &#123;<br>  <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>;<br>&#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">this</span>.$message(&#123;<br>  type: <span class="hljs-string">&quot;error&quot;</span>,<br>  message: <span class="hljs-string">&quot;参数验证不合法!&quot;</span>,<br>&#125;);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>接口代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//登录校验</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/admin/login&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.POST)</span><br>public CommonResult login(@RequestBody User user) &#123;<br>    User uu = up.get<span class="hljs-constructor">User(<span class="hljs-params">user</span>)</span>;<br>    <span class="hljs-keyword">if</span> (uu!=null&amp;&amp;user.get<span class="hljs-constructor">Password()</span>.equals(uu.get<span class="hljs-constructor">Password()</span>))<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonResult</span>.</span></span>success(uu);<br>    <span class="hljs-keyword">else</span><br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonResult</span>.</span></span>validate<span class="hljs-constructor">Failed()</span>;<br>&#125;<br><span class="hljs-comment">//注册校验</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/admin/register&quot;</span>,<span class="hljs-params">method</span> = RequestMethod.POST)</span><br>public CommonResult <span class="hljs-constructor">Register(@RequestBody User <span class="hljs-params">user</span>)</span> &#123;<br>    User uu = up.get<span class="hljs-constructor">User(<span class="hljs-params">user</span>)</span>;<br>    <span class="hljs-keyword">if</span> (uu==null)&#123;<br>        up.add<span class="hljs-constructor">User(<span class="hljs-params">user</span>)</span>;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonResult</span>.</span></span>success(user.get<span class="hljs-constructor">Username()</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonResult</span>.</span></span>failed<span class="hljs-literal">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>后台管理</strong><br><img src="/img/2021/Gra-admin.png" alt="img"><br><img src="/img/2021/Gra-admin2.png" alt="img"><br>流程：后台管理功能为管理员所特有的操作，选择管理员身份输入特定账号进入后台操作界面进行特定操作。在用户管理分页面控制用户的封禁/解冻状态以及所有用户公开的文档，</p><p>前端代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">changeUser(row) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">data</span> = &#123;<br>id: row.id,<br>status: row.status<br>  &#125;;<br>  <span class="hljs-keyword">this</span>.$store<br>.dispatch(<span class="hljs-string">&quot;changeUser&quot;</span>, <span class="hljs-keyword">data</span>)<br>.then(res =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">data</span>.status == <span class="hljs-number">1</span>) <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;激活成功&quot;</span>);<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;冻结成功&quot;</span>);<br>  console.log(res);<br>  <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>;<br>&#125;)<br>.<span class="hljs-keyword">catch</span>(&#123;&#125;);<br>&#125;,<br>changeDoc(row) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">data</span> = &#123;<br>id: row.id,<br>share: row.share<br>  &#125;;<br>  <span class="hljs-keyword">this</span>.$store<br>.dispatch(<span class="hljs-string">&quot;changeDoc&quot;</span>, <span class="hljs-keyword">data</span>)<br>.then(res =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">data</span>.share == <span class="hljs-number">1</span>) <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;恢复公开状态！&quot;</span>);<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;取消公开状态！&quot;</span>);<br>  console.log(res);<br>  <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>;<br>&#125;)<br>.<span class="hljs-keyword">catch</span>(&#123;&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(value = <span class="hljs-string">&quot;/admin/changeuser&quot;</span>,method = RequestMethod.POST)<br>public void changeUser(<span class="hljs-variable">@RequestBody</span> Map&lt;String, Integer&gt; param)&#123;<br><span class="hljs-selector-tag">up</span><span class="hljs-selector-class">.changeStatus</span>(param);<br><span class="hljs-selector-tag">return</span> ;<br>&#125;    <br>@<span class="hljs-selector-tag">RequestMapping</span>(value = <span class="hljs-string">&quot;/admin/changedoc&quot;</span>,method = RequestMethod.POST)<br><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">changeUser</span>(<span class="hljs-variable">@RequestBody</span> Map&lt;String, Integer&gt; param)&#123;<br><span class="hljs-selector-tag">dp</span><span class="hljs-selector-class">.changeDoc</span>(param);<br><span class="hljs-selector-tag">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h5><p><strong>文档目录</strong><br><img src="/img/2021/Gra-catalog.png" alt="img"><br>流程：在用户点击需要查看的文档类别，会出现一系列符合要求的文档列表，这里分为三种情况，第一种是在个人中心单击某个分类，获取该用户在这个分类文件夹下的个人文档，第二种是对于特殊分类回收站，获取该用户已经删除的文档，第三种是在公共仓库当中，获取所有用户上传到公共仓库的文档。</p><p>前端代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">showlist()&#123;<br>  <span class="hljs-keyword">var</span> listInfo = &#123;<br>category:<span class="hljs-keyword">this</span>.$store.getters.getCat,<br>author:<span class="hljs-keyword">this</span>.$store.getters.getUser.username,<br>share:<span class="hljs-keyword">this</span>.$store.getters.getType==<span class="hljs-string">&quot;home&quot;</span>?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>,<br>recycle:<span class="hljs-keyword">this</span>.$store.getters.getCat==<span class="hljs-string">&quot;5&quot;</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(listInfo.author == <span class="hljs-literal">null</span> &amp;&amp; listInfo.share == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">this</span>.$message(&#123;<br>type: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>message: <span class="hljs-string">&#x27;请先登录!&#x27;</span><br>&#125;);<br><span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">this</span>.$store<br>.dispatch(<span class="hljs-string">&quot;getList&quot;</span>,listInfo)<br>.then(response =&gt; &#123;<br>  console.log(<span class="hljs-string">&quot;list&quot;</span>+response.<span class="hljs-keyword">data</span>)<br>  <span class="hljs-comment">//设置当前编辑文档为list[0]</span><br>  <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setList&quot;</span>,response.<span class="hljs-keyword">data</span>)<br>  <span class="hljs-keyword">this</span>.docs = response.<span class="hljs-keyword">data</span><br>  <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setDoc&quot;</span>,<span class="hljs-keyword">this</span>.docs[<span class="hljs-number">0</span>])<br>&#125;).<span class="hljs-keyword">catch</span>((error) =&gt; &#123;<br>  console.log(error);<br>&#125;);<br>&#125;,<br>myfav()&#123;<br>  <span class="hljs-keyword">var</span> listInfo = &#123;<br>id:<span class="hljs-keyword">this</span>.$store.getters.getUser.id,<br>  &#125;<br><br>  <span class="hljs-keyword">this</span>.$store<br>.dispatch(<span class="hljs-string">&quot;allFav&quot;</span>,listInfo)<br>.then(response =&gt; &#123;<br><br>  <span class="hljs-comment">//设置当前编辑文档为list[0]</span><br>  <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setList&quot;</span>,response.<span class="hljs-keyword">data</span>)<br>  <span class="hljs-keyword">this</span>.docs = response.<span class="hljs-keyword">data</span><br>  <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setDoc&quot;</span>,<span class="hljs-keyword">this</span>.docs[<span class="hljs-number">0</span>])<br>&#125;).<span class="hljs-keyword">catch</span>(() =&gt; &#123;<br><br>  console.log(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>接口代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/doc/getlist&quot;</span>,<span class="hljs-params">method</span> = RequestMethod.POST)</span><br>public List&lt;Doc&gt; get<span class="hljs-constructor">List(@RequestBody Doc <span class="hljs-params">document</span>)</span> &#123;<br>    List&lt;Doc&gt; dc;<br>    <span class="hljs-comment">//分公共文档和个人文档</span><br>    <span class="hljs-keyword">if</span>(document.get<span class="hljs-constructor">Share()</span>.equals(<span class="hljs-number">1</span>))&#123;<br>        dc = dp.getp<span class="hljs-constructor">List(<span class="hljs-params">document</span>.<span class="hljs-params">getCategory</span>()</span>, document.get<span class="hljs-constructor">Share()</span>);   <span class="hljs-comment">//查找公共文档</span><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//分普通文档和回收站文档</span><br>        <span class="hljs-keyword">if</span>(document.get<span class="hljs-constructor">Recycle()</span>.equals(<span class="hljs-number">1</span>))&#123;<br>            dc = dp.getr<span class="hljs-constructor">List(<span class="hljs-params">document</span>.<span class="hljs-params">getAuthor</span>()</span>);<span class="hljs-comment">//查看回收文档</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            dc = dp.get<span class="hljs-constructor">List(<span class="hljs-params">document</span>.<span class="hljs-params">getCategory</span>()</span>, document.get<span class="hljs-constructor">Author()</span>);<span class="hljs-comment">//查看普通文档</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(Doc l :dc)&#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(l.get<span class="hljs-constructor">Content()</span>+<span class="hljs-string">&quot; &quot;</span>+l.get<span class="hljs-constructor">Create_time()</span>+<span class="hljs-string">&quot; &quot;</span>+l.get<span class="hljs-constructor">Update_time()</span>);<br>    &#125;<br>    return dc;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>文档检索</strong></p><p>流程：作为该项目的核心功能，该检索采用了ElasticSearch搜索引擎。该段将详细描述如何使用ES进行高效的关键词检索。首先需要用logstash插件将mysql数据库中的数据同步到ElasticSearch当中，这一步的配置在环境搭建中有详细描述。在项目的运行过程当中，需要保持ES和logstash为开启状态。</p><p>1.在pom.xml中添加elasticsearch所需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在application.properties中添加elasticsearch的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">repositories:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">cluster-nodes:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9300</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">elasticsearch</span><br>      <span class="hljs-attr">rest:</span><br>        <span class="hljs-attr">uris:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9200</span><br></code></pre></td></tr></table></figure><p>3.在用到的实体类中添加注解@Document、@Id、@Field（代码过多，使用截图）<br><img src="/img/2021/Gra-annotation.png" alt="img"></p><p>4.添加DocRepository类以及查询接口findByTitleOrContentOrAuthor。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DocRepository</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">ElasticsearchRepository</span></span>&lt;<span class="hljs-title">Doc</span>,<span class="hljs-title">String</span>&gt; </span>&#123;<br>    Doc findByTitle(<span class="hljs-keyword">String</span> title);<br>    List&lt;Doc&gt; findByTitleOrContentOrAuthor(<span class="hljs-keyword">String</span> s1,<span class="hljs-keyword">String</span> s2,<span class="hljs-keyword">String</span> s3);<br>&#125;<br></code></pre></td></tr></table></figure><p>关于该接口的原理如下图，通过实现该接口实现ES查询。<br><img src="/img/2021/Gra-esinterface.png" alt="img"></p><p>接口代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/doc/searchtest&quot;</span>,<span class="hljs-params">method</span> = RequestMethod.POST)</span><br>  public List&lt;Doc&gt; search<span class="hljs-constructor">Test(@RequestBody Map&lt;String, String&gt; <span class="hljs-params">param</span>)</span> &#123;<br>      String keyword = param.get(<span class="hljs-string">&quot;keyword&quot;</span>) ;<br>      String dval,dtype;<br>      <span class="hljs-keyword">if</span>(param.get(<span class="hljs-string">&quot;share&quot;</span>).equals(<span class="hljs-number">1</span>))&#123;<br>          dtype = <span class="hljs-string">&quot;share&quot;</span>;<br>          dval = <span class="hljs-string">&quot;1&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          dtype = <span class="hljs-string">&quot;author&quot;</span>;<br>          dval = param.get(<span class="hljs-string">&quot;author&quot;</span>);<br>      &#125;<br>      BoolQueryBuilder builder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>      builder.must(<span class="hljs-keyword">new</span> <span class="hljs-constructor">QueryStringQueryBuilder(<span class="hljs-params">param</span>.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;category&quot;</span>)</span>).field(<span class="hljs-string">&quot;category&quot;</span>));<br>      builder.must(<span class="hljs-keyword">new</span> <span class="hljs-constructor">QueryStringQueryBuilder(<span class="hljs-params">dval</span>)</span>.field(dtype));<br>      BoolQueryBuilder <span class="hljs-keyword">and</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>      builder.must(<span class="hljs-keyword">and</span>);<br>      BoolQueryBuilder or1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>      BoolQueryBuilder or2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>      BoolQueryBuilder or3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>      <span class="hljs-keyword">and</span>.should(or1);<span class="hljs-keyword">and</span>.should(or2);<span class="hljs-keyword">and</span>.should(or3);<br>      or1.must(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>wildcard<span class="hljs-constructor">Query(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-params">keyword</span>+<span class="hljs-string">&quot;*&quot;</span>)</span>);<br>      or2.must(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>wildcard<span class="hljs-constructor">Query(<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-params">keyword</span>+<span class="hljs-string">&quot;*&quot;</span>)</span>);<br>      or3.must(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>wildcard<span class="hljs-constructor">Query(<span class="hljs-string">&quot;author.keyword&quot;</span>,<span class="hljs-params">keyword</span>)</span>);<br>      NativeSearchQueryBuilder nativeSearchQueryBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">NativeSearchQueryBuilder()</span><br>              .<span class="hljs-keyword">with</span><span class="hljs-constructor">Query(<span class="hljs-params">builder</span>)</span>;<br>      SearchQuery query = nativeSearchQueryBuilder.build<span class="hljs-literal">()</span>;<br>      Page&lt;Doc&gt; p = docRepository.search(query);<br>      <span class="hljs-built_in">int</span> total = (<span class="hljs-built_in">int</span>) p.get<span class="hljs-constructor">TotalElements()</span>;<br>      List&lt;Doc&gt; content = p.get<span class="hljs-constructor">Content()</span>;<br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;search_result:&quot;</span>+keyword+<span class="hljs-string">&quot;  num:&quot;</span>+total);<br>      <span class="hljs-keyword">for</span>(Doc d: content)&#123;<br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(d.get<span class="hljs-constructor">Title()</span>+<span class="hljs-string">&quot; &quot;</span>+d.get<span class="hljs-constructor">Content()</span>+<span class="hljs-string">&quot; &quot;</span>+d.get<span class="hljs-constructor">Author()</span>+<span class="hljs-string">&quot; &quot;</span>+d.get<span class="hljs-constructor">Create_time()</span>+<span class="hljs-string">&quot; &quot;</span>+d.get<span class="hljs-constructor">Update_time()</span>);<br>      &#125;<br>      return content;<br>  &#125;<br></code></pre></td></tr></table></figure><p>输入特定关键词之后，查询的结果列表界面如下图<br><img src="/img/2021/Gra-search.png" alt="img"></p><p><strong>单个文档</strong></p><p><img src="/img/2021/Gra-content.png" alt="img"><br>流程：用户在想要对某个文档进行特定的操作时，需要将单个文档的具体信息，传入富文本表及其wangEditor中，文档的增删改是其最基本的功能。</p><p>前端代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//添加文档</span><br>newDoc()&#123;<br>console.log(<span class="hljs-keyword">this</span>.p_switch)<br><span class="hljs-keyword">var</span> doc = &#123;<br>  content:<span class="hljs-keyword">this</span>.editor.txt.html(),<br>  author:<span class="hljs-keyword">this</span>.$store.getters.getUser.username,<br>  category:<span class="hljs-keyword">this</span>.$store.getters.getCat,<br>  title:<span class="hljs-keyword">this</span>.input_title,<br>  share:<span class="hljs-keyword">this</span>.p_switch?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>,<br>  recycle:<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setDoc&quot;</span>,doc)<br><span class="hljs-keyword">this</span>.$store.dispatch(<span class="hljs-string">&quot;newDoc&quot;</span>,doc) .then(response =&gt; &#123;<br><span class="hljs-comment">// var list = this.$store.getters.getList.unshift(doc)</span><br><span class="hljs-comment">// this.$store.commit(&quot;setList&quot;,list)</span><br><span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setReload&quot;</span>,<span class="hljs-keyword">this</span>.$store.getters.getReload)<br><span class="hljs-keyword">this</span>.$message(&#123;<br>  type: <span class="hljs-string">&#x27;success&#x27;</span>,<br>  message: <span class="hljs-string">&#x27;创建成功!&#x27;</span><br>&#125;);<br>console.log(response)<br>&#125;).<span class="hljs-keyword">catch</span>((error) =&gt; &#123;<br>console.log(error)<br>&#125;);<br>&#125;<br><span class="hljs-comment">//删除文档</span><br>del()&#123;<br><span class="hljs-keyword">this</span>.$store<br>  .dispatch(<span class="hljs-string">&quot;delDoc&quot;</span>,<span class="hljs-keyword">this</span>.$store.getters.getDoc.id)<br>  .then(response =&gt; &#123;<br><span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setReload&quot;</span>,<span class="hljs-keyword">this</span>.$store.getters.getReload)<br><span class="hljs-keyword">this</span>.$message(&#123;<br>type: <span class="hljs-string">&#x27;success&#x27;</span>,<br>message: <span class="hljs-string">&#x27;删除成功!&#x27;</span><br>  &#125;);<br>console.log(response)<br>  &#125;).<span class="hljs-keyword">catch</span>((error) =&gt; &#123;<br>console.log(error);<br>  &#125;);<br>&#125;<br><span class="hljs-comment">//保存文档</span><br>save()&#123;<br><span class="hljs-keyword">var</span> doc = &#123;<br>  id:<span class="hljs-keyword">this</span>.$store.getters.getDoc.id,<br>  content:<span class="hljs-keyword">this</span>.editor.txt.html(),<br>  title:<span class="hljs-keyword">this</span>.input_title,<br>  share:<span class="hljs-keyword">this</span>.p_switch==<span class="hljs-literal">true</span>?<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;0&quot;</span><br>&#125;<br>console.log(<span class="hljs-string">&quot;保存：&quot;</span>+doc.type);<br><span class="hljs-keyword">this</span>.$store.dispatch(<span class="hljs-string">&quot;saveDoc&quot;</span>,doc) .then(response =&gt; &#123;<br>  <span class="hljs-keyword">this</span>.$message(&#123;<br>type: <span class="hljs-string">&#x27;success&#x27;</span>,<br>message: <span class="hljs-string">&#x27;保存成功!&#x27;</span><br>  &#125;);<br>  <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&quot;setReload&quot;</span>,<span class="hljs-keyword">this</span>.$store.getters.getReload)<br>  console.log(response)<br>&#125;).<span class="hljs-keyword">catch</span>((error) =&gt; &#123;<br>  console.log(error)<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>接口代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新建单个文档</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">document</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span>   <br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/doc/newdoc&quot;</span>, method = RequestMethod.POST)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">newDoc</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Doc <span class="hljs-built_in">document</span></span>)</span> &#123;<br>System.out.println(<span class="hljs-built_in">document</span>.getContent());<br>dp.insertSelective(<span class="hljs-built_in">document</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除单个文档</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">document</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/doc/deldoc&quot;</span>, method = RequestMethod.POST)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">delDoc</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Doc <span class="hljs-built_in">document</span></span>)</span> &#123;<br>dp.deleteToRecycle(<span class="hljs-built_in">document</span>.getId());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新单个文档</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">document</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/doc/updatedoc&quot;</span>, method = RequestMethod.POST)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">UpdateDoc</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Doc <span class="hljs-built_in">document</span></span>)</span> &#123;<br>dp.updateByPrimaryKeySelective(<span class="hljs-built_in">document</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>收藏文档</strong><br>流程：用户可以在公开文档处选择收藏需要的文档，也可以在个人中心删除已收藏的文档。</p><p>前端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//收藏文档  </span><br><span class="hljs-function"><span class="hljs-title">collect</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> fav = &#123;&#125;<br>fav.userid = <span class="hljs-built_in">this</span>.$store.getters.getUser.id<br>fav.docid = <span class="hljs-built_in">this</span>.$store.getters.getDoc.id<br><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;addFav&quot;</span>,fav) .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">this</span>.$message(&#123;<br>type: <span class="hljs-string">&#x27;success&#x27;</span>,<br>message: <span class="hljs-string">&#x27;收藏成功!&#x27;</span><br>  &#125;);<br>  <span class="hljs-built_in">console</span>.log(response)<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">this</span>.$message(&#123;<br>type:<span class="hljs-string">&quot;info&quot;</span>,<br>message: <span class="hljs-string">&#x27;已收藏过了~&#x27;</span><br>  &#125;);<br>  <span class="hljs-built_in">console</span>.log(error)<br>&#125;);<br>&#125;<br><span class="hljs-comment">//取消收藏</span><br><span class="hljs-function"><span class="hljs-title">delfav</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> fav = &#123;&#125;<br>fav.userid = <span class="hljs-built_in">this</span>.$store.getters.getUser.id<br>fav.docid = <span class="hljs-built_in">this</span>.$store.getters.getDoc.id<br><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;delFav&quot;</span>,fav) .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&quot;setReload&quot;</span>,<span class="hljs-built_in">this</span>.$store.getters.getReload)<br>  <span class="hljs-built_in">this</span>.$message(&#123;<br>type: <span class="hljs-string">&#x27;success&#x27;</span>,<br>message: <span class="hljs-string">&#x27;已取消收藏&#x27;</span><br>  &#125;);<br>  <span class="hljs-built_in">console</span>.log(response)<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(error)<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>接口代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加单个文档到个人收藏</span><br><span class="hljs-comment"> * 因为后端在pojo中包含另一个pojo，为了方便在这里传参用map处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@RequestMapping</span>(value = <span class="hljs-string">&quot;/fav/addfav&quot;</span>, method = RequestMethod.POST)<br>public void addFav(<span class="hljs-variable">@RequestBody</span> Map&lt;String, Integer&gt; param) &#123;<br>    <span class="hljs-selector-tag">fap</span><span class="hljs-selector-class">.addFav</span>(param);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除单个文档从个人收藏</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-selector-tag">RequestMapping</span>(value = <span class="hljs-string">&quot;/fav/delfav&quot;</span>, method = RequestMethod.POST)<br><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">delFav</span>(<span class="hljs-variable">@RequestBody</span> Map&lt;String, Integer&gt; param) &#123;<br>    <span class="hljs-selector-tag">fap</span><span class="hljs-selector-class">.delFav</span>(param);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>个人资料</strong><br><img src="/img/2021/Gra-personal.png" alt="img"><br><img src="/img/2021/Gra-portrait.png" alt="img"><br>流程：在界面右上角点击头像，进入个人中心可以修改我的资料，个人中心界面如图，同时可以在在这里查看该用户已经公开的文档。用户也可以在个人中心修改自己的头像，操作界面如图所示。</p><p>前端代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs gradle">data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      portrait_url:require(<span class="hljs-string">&#x27;../assets/&#x27;</span>+<span class="hljs-keyword">this</span>.$store.getters.getUser.portrait),<br>      hideUpload: <span class="hljs-keyword">false</span>,<br>      dialogImageUrl: <span class="hljs-string">&#x27;&#x27;</span>,<br>      dialogVisible: <span class="hljs-keyword">false</span>,<span class="hljs-comment">//图片预览弹窗</span><br>      formLabelWidth: <span class="hljs-string">&#x27;80px&#x27;</span>,<br>      limitNum: <span class="hljs-number">1</span>,<br>      form: &#123;&#125;,<br>      dialogVisible2: <span class="hljs-keyword">false</span><span class="hljs-comment">//弹窗</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    <span class="hljs-comment">// 上传文件之前的钩子</span><br>    handleBeforeUpload (<span class="hljs-keyword">file</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">file</span>.type === <span class="hljs-string">&#x27;image/png&#x27;</span> || <span class="hljs-keyword">file</span>.type === <span class="hljs-string">&#x27;image/gif&#x27;</span> || <span class="hljs-keyword">file</span>.type === <span class="hljs-string">&#x27;image/jpg&#x27;</span> || <span class="hljs-keyword">file</span>.type === <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">this</span>.$notify.warning(&#123;<br>          title: <span class="hljs-string">&#x27;警告&#x27;</span>,<br>          message: <span class="hljs-string">&#x27;请上传格式为image/png, image/gif, image/jpg, image/jpeg的图片&#x27;</span><br>        &#125;)<br>      &#125;<br>      let <span class="hljs-keyword">size</span> = <span class="hljs-keyword">file</span>.<span class="hljs-keyword">size</span> <span class="hljs-regexp">/ 1024 /</span> <span class="hljs-number">1024</span> / <span class="hljs-number">2</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">size</span> &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">this</span>.$notify.warning(&#123;<br>          title: <span class="hljs-string">&#x27;警告&#x27;</span>,<br>          message: <span class="hljs-string">&#x27;图片大小必须小于2M&#x27;</span><br>        &#125;)<br>      &#125;<br>      let fd = <span class="hljs-keyword">new</span> FormData();<span class="hljs-comment">//通过form数据格式来传</span><br>      fd.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;picFile&quot;</span>, <span class="hljs-keyword">file</span>); <span class="hljs-comment">//传文件</span><br>      fd.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">this</span>.$store.getters.getUser.username);<br>      console.log(fd.get(<span class="hljs-string">&#x27;picFile&#x27;</span>));<br>      let config = &#123;<br>          headers:&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;multipart/form-data&#x27;</span>&#125;<br>      &#125;;<br>      axios.post(<span class="hljs-string">&quot;http://127.0.0.1:8088/test/up&quot;</span>,fd,config)<br>        .then((res)=&gt;&#123;<br>          console.log(res);<br>          var fr = <span class="hljs-keyword">new</span> FileReader();<br>          fr.onload = function () &#123;<br>            document.getElementById(<span class="hljs-string">&#x27;portrait&#x27;</span>).src = fr.result;<br>          &#125;;<br>          fr.readAsDataURL(<span class="hljs-keyword">file</span>);<br>          <span class="hljs-keyword">this</span>.$store.getters.getUser.portrait = <span class="hljs-keyword">file</span>.name<br>          <span class="hljs-keyword">this</span>.reload()<br>          console.log( <span class="hljs-keyword">this</span>.$store.getters.getUser.portrait)<br>        &#125;).<span class="hljs-keyword">catch</span>(function (error) &#123;<br>          console.log(error);<br>        &#125;)<br>    &#125;,<br>    <span class="hljs-comment">// 文件超出个数限制时的钩子</span><br>    handleExceed (files, fileList) &#123;<br>        console.log(files+fileList)<br>    &#125;,<br>    <span class="hljs-comment">// 文件列表移除文件时的钩子</span><br>    handleRemove (<span class="hljs-keyword">file</span>, fileList) &#123;<br>      <span class="hljs-keyword">this</span>.hideUpload = fileList.length &gt;= <span class="hljs-keyword">this</span>.limitNum;<br>    &#125;,<br>    <span class="hljs-comment">// 点击文件列表中已上传的文件时的钩子</span><br>    handlePictureCardPreview (<span class="hljs-keyword">file</span>) &#123;<br>      <span class="hljs-keyword">this</span>.dialogImageUrl = <span class="hljs-keyword">file</span>.url;<br>      <span class="hljs-keyword">this</span>.dialogVisible = <span class="hljs-keyword">true</span>;<br>    &#125;,<br>    uploadFile () &#123;<br>      <span class="hljs-keyword">this</span>.$refs.upload.submit()<br>    &#125;,<br>    imgChange (files, fileList) &#123;<br>      <span class="hljs-keyword">this</span>.hideUpload = fileList.length &gt;= <span class="hljs-keyword">this</span>.limitNum;<br>      <span class="hljs-keyword">if</span> (fileList) &#123;<br>        <span class="hljs-keyword">this</span>.$refs.uploadElement.clearValidate();<br>      &#125;<br>    &#125;,<br>    tocancel () &#123;<br>      <span class="hljs-keyword">this</span>.dialogVisible2 = <span class="hljs-keyword">false</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>接口代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/test/up&quot;</span>)</span><br>    public JSONObject up(@<span class="hljs-constructor">RequestParam(<span class="hljs-string">&quot;picFile&quot;</span>)</span> MultipartFile picture,@<span class="hljs-constructor">RequestParam(<span class="hljs-string">&quot;user&quot;</span>)</span> String username) &#123;<br>        User user = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>        user.set<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>;<br>        <span class="hljs-comment">//获取文件在服务器的储存位置</span><br>        String path = (<span class="hljs-string">&quot;D:/myvue/vue-spring-login-summed-master/src/assets&quot;</span>);<br>        File filePath = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">path</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;文件的保存路径：&quot;</span> + path);<br>        <span class="hljs-keyword">if</span> (!filePath.exists<span class="hljs-literal">()</span><span class="hljs-operator"> &amp;&amp; </span>!filePath.is<span class="hljs-constructor">Directory()</span>) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;目录不存在，创建目录:&quot;</span> + filePath);<br>            filePath.mkdir<span class="hljs-literal">()</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取原始文件名称(包含格式)</span><br>        String originalFileName = picture.get<span class="hljs-constructor">OriginalFilename()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;原始文件名称：&quot;</span> + originalFileName);<br>        <span class="hljs-comment">//获取文件类型，以最后一个`.`为标识</span><br>        String <span class="hljs-keyword">type</span> = originalFileName.substring(originalFileName.<br>last<span class="hljs-constructor">IndexOf(<span class="hljs-string">&quot;.&quot;</span>)</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;文件类型：&quot;</span> + <span class="hljs-keyword">type</span>);<br>        <span class="hljs-comment">//获取文件名称（不包含格式）</span><br>        String name = originalFileName.substring(<span class="hljs-number">0</span>, originalFileName.last<span class="hljs-constructor">IndexOf(<span class="hljs-string">&quot;.&quot;</span>)</span>);<br>        String fileName = name + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-keyword">type</span>;<br>        user.set<span class="hljs-constructor">Portrait(<span class="hljs-params">fileName</span>)</span>;<br>        up.update<span class="hljs-constructor">ByPor(<span class="hljs-params">user</span>)</span>;<br>        <span class="hljs-comment">//在指定路径下创建一个文件</span><br>        File targetFile = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">path</span>, <span class="hljs-params">fileName</span>)</span>;<br>        <span class="hljs-comment">//将文件保存到服务器指定位置</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            picture.transfer<span class="hljs-constructor">To(<span class="hljs-params">targetFile</span>)</span>;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            <span class="hljs-comment">//将文件在服务器的存储路径返回</span><br>            return null;<br>        &#125; catch (IOException e) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;上传失败&quot;</span>);<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>            return null;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>因本人技术水平、资源等方面有限，该云文档管理系统仍有以下许多不足之处需要进行完善：</p><ol><li><p>作为一款适合日常使用/办公的文档系统，其界面UI设计方面，缺失一些美感度，需要强化对前端及设计知识的学习，使界面更加友好，带给客户更加舒适的日常使用体验。</p></li><li><p>对于用户上传到该系统的文档及个人数据，在安全加密方面并没有做到很好的保护，这一点需要重视，需要保护好使用该系统的用户的个人隐私，使数据更加安全化。</p></li><li><p>在功能方面做的不太周全，较为单一，在后续的时间里会添加更多个性化的功能供用户使用，以及增加后台管理员的操作权限，对数据进行更加周密的控制。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue框架入门</title>
    <link href="/2020/05/20/2020-05-20-VUE/"/>
    <url>/2020/05/20/2020-05-20-VUE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为毕设需要完成一个基于Vue+Springboot前后端分离的项目，遂来学习这个<strong>很牛</strong>的前端框架。该文并非讲述搭建完整项目的过程，只是简单概括一下其功能及目录结构下的知识点。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="了解Vue"><a href="#了解Vue" class="headerlink" title="了解Vue"></a>了解Vue</h4><p>官网原话说，Vue是一套用于构建用户界面的<strong>渐进式</strong>框架，何为渐进式？即你可以只使用Vue的部分功能，其强大的核心功能有：<br>1.基础功能：页面渲染、表单处理、管理DOM节点<br>2.组件化开发<br>3.状态集中管理<br>4.前端工程化</p><p><strong>页面渲染</strong>指可以使用模板语法将数据写入DOM系统，正如下面的上手案例那样。Vue强大的地方就在于其底层的MVVM响应式编程模型，M：model，V：view，VM：ViewModel，该模型实现了对数据与页面的双向绑定。</p><p><strong>组件化开发</strong>，看名字就明白了，Vue框架内部提供的许多功能被分成一个个组件，使用户使用起来更加轻松快捷。</p><p><strong>状态集中管理</strong>，在后面可以学到的Vuex，是适用于Vue下的状态管理工具，它会在项目的根部目录下创建一个store文件夹并创建一个index.js，通过在App.vue中挂载这个实例，之后我们就可以在其他vue中很方便的使用$store来获取方法和数据了~因为都集中管理在该文件夹下，使得编程更加方便了。</p><p><strong>前端工程化</strong>，这个概念比较抽象暂时不太了解，大致理解是上面所说对各种功能进行模块化的管理，后续还会讲到通过webpack来构建前端项目，使得前端的开发更加高效可维护~</p><h4 id="快速尝试Vue"><a href="#快速尝试Vue" class="headerlink" title="快速尝试Vue"></a>快速尝试Vue</h4><p>在菜鸟教程的上手案例中，只需要引入一个js文件即可完成hello world的操作。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue 测试实例 - 菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">new Vue(&#123;</span><br><span class="xml">  el: &#x27;#app&#x27;,88</span><br><span class="xml">  data: &#123;</span><br><span class="xml">    message: &#x27;Hello Vue.js!&#x27;</span><br><span class="xml">  &#125;</span><br><span class="xml">&#125;)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>简单描述一下上述代码做了什么，必要的第一步，通过new Vue创建了一个Vue实例，这个实例中可以包括的内容：<strong>el</strong> 参数，即对应<strong>dom</strong> 元素的id，接下来的代码仅作用在这个div内部。<strong>data</strong> 用于定义属性，即数据。<strong>methods</strong> 定义函数。在html中通过{ {} }输出属性和函数的返回值。</p><h4 id="Vue的目录结构"><a href="#Vue的目录结构" class="headerlink" title="Vue的目录结构"></a>Vue的目录结构</h4><p>虽然上面说了Vue可以一点一点引入我们需要的内容（渐进式），我们仍有更完整的方法来构建大型项目。官方提供快速搭建Vue项目的脚手架：vue-cli。<br>安装命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g vue-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>下面直接讲述该脚手架构建后的项目结构吧~<br><img src="/img/2021/vue-catalog.png" alt="img"><br>效果图如上，标注几个基础部分</p><p><em>具体描述</em><br>一般<strong>index.html</strong>当中只引入一些js，css文件。<br><strong>main.js</strong>中配置了router和store</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">new</span> Vue(&#123;<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>  router, <span class="hljs-comment">//使用路由配置</span><br>  store <span class="hljs-comment">//使用 Vuex 进行状态管理</span><br>&#125;).<span class="hljs-symbol">$mou</span>nt(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>ps:后来又在这里加入了fundebug的配置</p><p><strong>App.vue</strong>，这里正是一开始快速尝试看到的Vue实例了~组件汇聚，即汇聚router，data，method等等组件。目录下的其他vue都是在这个主Vue下切换的，里面可以写一些用于所有组件的方法等。</p><p><strong>api</strong>目录下存js文件(function)，<strong>assets</strong>目录下存静态文件，<strong>components</strong>目录下存分vue组件，<strong>utils</strong> 目录下写了axios，用于前后端交互。</p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>时间不多了，先写到这里之后再来补充~</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三亚留念</title>
    <link href="/2019/02/01/2019-02-01-sanya/"/>
    <url>/2019/02/01/2019-02-01-sanya/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然已经过去很久很久，但仍想写一篇博客来留念我赚得代码生涯第一桶金的三亚智慧农业项目。导师介绍的机会，带领我完成的也是几位相当厉害的前辈。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>缺少当时小伙伴的部分代码以及公司的硬件设备，找到这份陈旧的老代码也已无法运行，所幸还有找到往日的截图。<br><img src="/img/2021/sanya-run.jpg" alt="img"></p><p>大致功能：</p><ol><li>收集传感器上行的数据，做脏数据处理，实时显示当前环境数据(风速、风向、土壤温湿度…)</li><li>处理数据后以折线图显示最近24h降雨量变化</li><li>通过饼图呈现场馆当天各时段人数</li></ol><p>ps:第三点结合小伙伴的人脸识别获取数据~<br><img src="/img/2021/sanya-demo.jpg" alt="img"></p><p>当时用bootstarap+express写的项目，选择Express是因为它一款Node.js Web应用程序开发框架，更适用于解决高并发的实时推送。现在想来还佩服当年为了做这个项目临时学习一门新的语言的自己，后来又学了echarts这个神奇的工具。<br><img src="/img/2021/sanya-code.png" alt="img"></p><h2 id="留影"><a href="#留影" class="headerlink" title="留影"></a>留影</h2><p>本该是全文的重点，可惜当年负责摄影的大佬手抖把相机里的照片都删了，只剩下各自手机里零星的几张碎碎念~</p><p>美丽的三亚蓝天~<br><img src="/img/2021/sanya-bluesky.jpg" alt="img"></p><p>临时调试代码的场所~<br><img src="/img/2021/sanya-work2.jpg" alt="img"><br><img src="/img/2021/sanya-work1.jpg" alt="img"></p><p>在天涯海角仙人指路~<br><img src="/img/2021/sanya-me.jpg" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口和抽象类的异同</title>
    <link href="/2019/01/27/2019-01-27-java_base/"/>
    <url>/2019/01/27/2019-01-27-java_base/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是2019年的第一篇博客，开始复习整理一下JavaSE的知识点（其实差不多是预习了，参照网上大佬的博客搬运了示例代码QAQ）,写的比较简陋见笑了。。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先分别概括一下什么是接口和抽象类。</p><p>接口：简单说就是一系列抽象方法的集合，如果一个类实现（implements）了某个接口，即继承了这个接口的所有抽象方法，则该类必须实现这些抽象方法。<br>DEMO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口Externalizable</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Externalizable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">writeExternal</span><span class="hljs-params">(ObjectOutput out)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readExternal</span><span class="hljs-params">(ObjectInput in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException</span>;<br>&#125;<br><br><span class="hljs-comment">//实现Externalizable接口的Employee类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Externalizable</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> employeeId;<br>    String employeeName;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readExternal</span><span class="hljs-params">(ObjectInput in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        employeeId = in.readInt();<br>        employeeName = (String) in.readObject();<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeExternal</span><span class="hljs-params">(ObjectOutput out)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        out.writeInt(employeeId);<br>        out.writeObject(employeeName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类：首先，与接口不同的是，抽象类不能直接创建实例对象，抽象类中的抽象方法只能在其子类中实现（即通过extends的方式而不是implements），因此可以把抽象类看作是提供给继承的子类的一个模板。抽象类本身没有任何用处，它是为了继承而存在的，创建一个抽象类而不去继承它等于是做了无用功。<br>DEMO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现...接口的抽象类GenericServlet</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span>, <span class="hljs-title">ServletConfig</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">// abstract method</span><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Its implementation</span><br>    &#125;<br>    <span class="hljs-comment">// other method related to Servlet</span><br>&#125;<br><br><span class="hljs-comment">//继承GenericServlet抽象类的HttpServlet子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> </span>&#123;<br>        <span class="hljs-comment">// implementation</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;<br>        <span class="hljs-comment">// Implementation</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;<br>        <span class="hljs-comment">// Implementation</span><br>    &#125;<br><br>    <span class="hljs-comment">// some other methods related to HttpServlet</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>两者对比</strong></p><table><thead><tr><th>参数</th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>构造方法</td><td>不能有</td><td>可以有</td></tr><tr><td>方法</td><td>只能有抽象方法</td><td>可以包含普通方法</td></tr><tr><td>继承</td><td>一个类可实现多个接口</td><td>只能继承一个抽象类</td></tr><tr><td>成员变量</td><td>只能是public static final类型</td><td>可以是各种类型</td></tr></tbody></table><p>接口和抽象类分别适用于何种场合？这里搬运网上某大佬博客里的一个例子。<br>门和警报的例子：门都有open( )和close( )两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Door</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在需要<strong>部分</strong>门具有报警alarm( )的功能，该如何实现？</p><ol><li>将三个功能都放在抽象类中，但是有的门并不具备报警的功能 ×</li><li>将三个功能都放在接口中，有些类需要实现报警的功能但是并不具备open和close的功能（如火灾报警器）×</li><li>从1和2中可以看出，open和close是门的固有属性，而alarm则是特殊的附加属性，因此最好的解决办法是单独将报警设计为一个接口，包含alarm()行为,Door设计为单独的一个抽象类，包含open和close两种行为。再设计一个报警门继承Door类和实现Alarm接口。√  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Alram</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">alarm</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlarmDoor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Door</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Alarm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">oepn</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//....</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//....</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">alarm</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//....</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<br><a href="http://www.importnew.com/12399.html">http://www.importnew.com/12399.html</a><br><a href="https://www.cnblogs.com/dolphin0520/p/3811437.html">https://www.cnblogs.com/dolphin0520/p/3811437.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS禁用选择框和Click</title>
    <link href="/2018/12/16/2018-12-16-forbidden/"/>
    <url>/2018/12/16/2018-12-16-forbidden/</url>
    
    <content type="html"><![CDATA[<p>项目需求，在单击某开关时，禁用表单的部分选择框以及图标的click事件。</p><p>HTML部分：</p><p>在需要禁用部分的表单外套一层fieldset标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;field1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        ...<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JS部分：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(state<span class="hljs-operator"> == </span>trur)&#123;<br>  <span class="hljs-constructor">$(<span class="hljs-string">&quot;#field1&quot;</span>)</span>.attr(<span class="hljs-string">&quot;disabled&quot;</span>, <span class="hljs-string">&quot;disabled&quot;</span>);           <span class="hljs-comment">//禁用表单部分</span><br>  <span class="hljs-constructor">$(<span class="hljs-string">&quot;#waterclick1&quot;</span>)</span>.prop(<span class="hljs-string">&quot;onclick&quot;</span>,<span class="hljs-literal">false</span>);             <span class="hljs-comment">//禁用click</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-constructor">$(<span class="hljs-string">&quot;#field1&quot;</span>)</span>.remove<span class="hljs-constructor">Attr(<span class="hljs-string">&quot;disabled&quot;</span>)</span>;<br>  <span class="hljs-constructor">$(<span class="hljs-string">&quot;#waterclick1&quot;</span>)</span>.attr(<span class="hljs-string">&quot;onclick&quot;</span>,<span class="hljs-string">&quot;myFun()&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Radio标签自定义图片</title>
    <link href="/2018/12/16/2018-12-16-radio/"/>
    <url>/2018/12/16/2018-12-16-radio/</url>
    
    <content type="html"><![CDATA[<p>项目需求做一组Radio单选框，原生Radio标签的圆圈太丑采用两张深浅图片取代选中/未选中状态。</p><p>HTML部分：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div id=<span class="hljs-string">&quot;myRadio&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">Radio</span>&quot; <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">radioRoom</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">radio1</span>&quot; <span class="hljs-symbol">onclick</span>=&quot;<span class="hljs-symbol">mySelect1</span>()&quot; <span class="hljs-symbol">checked</span>=&quot;<span class="hljs-symbol">checked</span>&quot;/&gt;<br>    &lt;<span class="hljs-symbol">label</span> <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">label1</span>&quot; <span class="hljs-symbol">for</span>=&quot;<span class="hljs-symbol">radio1</span>&quot;&gt;&lt;/<span class="hljs-symbol">label</span>&gt;<br>    &lt;<span class="hljs-symbol">input</span> <span class="hljs-symbol">type</span>=&quot;<span class="hljs-symbol">radio</span>&quot; <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">Radio</span>&quot; <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">radioRoom</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">radio2</span>&quot; <span class="hljs-symbol">onclick</span>=&quot;<span class="hljs-symbol">mySelect2</span>()&quot;/&gt;<br>    &lt;<span class="hljs-symbol">label</span> <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">label2</span>&quot; <span class="hljs-symbol">for</span>=&quot;<span class="hljs-symbol">radio2</span>&quot;&gt;&lt;/<span class="hljs-symbol">label</span>&gt;<br>    &lt;<span class="hljs-symbol">input</span> <span class="hljs-symbol">type</span>=&quot;<span class="hljs-symbol">radio</span>&quot; <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">Radio</span>&quot; <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">radioRoom</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">radio3</span>&quot; <span class="hljs-symbol">onclick</span>=&quot;<span class="hljs-symbol">mySelect3</span>()&quot;/&gt;<br>    &lt;<span class="hljs-symbol">label</span> <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">label3</span>&quot; <span class="hljs-symbol">for</span>=&quot;<span class="hljs-symbol">radio3</span>&quot;&gt;&lt;/<span class="hljs-symbol">label</span>&gt;<br>    &lt;<span class="hljs-symbol">input</span> <span class="hljs-symbol">type</span>=&quot;<span class="hljs-symbol">radio</span>&quot; <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">Radio</span>&quot; <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">radioRoom</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">radio4</span>&quot; <span class="hljs-symbol">onclick</span>=&quot;<span class="hljs-symbol">mySelect4</span>()&quot;/&gt;<br>    &lt;<span class="hljs-symbol">label</span> <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">label4</span>&quot; <span class="hljs-symbol">for</span>=&quot;<span class="hljs-symbol">radio4</span>&quot;&gt;&lt;/<span class="hljs-symbol">label</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>CSS部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.Radio</span>&#123;<br>   <span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<br>   <span class="hljs-attribute">height</span>:<span class="hljs-number">10px</span>;<br> &#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&#x27;radio&#x27;</span>]</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">border</span>:none;<br>&#125;<br><br><span class="hljs-selector-id">#label1</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>  //<span class="hljs-attribute">z-index</span>:<span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/light_1.jpg</span>)no-repeat;<br>  <span class="hljs-attribute">background-size</span>:<span class="hljs-number">100%</span> ;<br>&#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&#x27;radio&#x27;</span>]</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-id">#label1</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">z-index</span>:<span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/dark_1.jpg</span>)no-repeat;<br>  <span class="hljs-attribute">background-size</span>:<span class="hljs-number">100%</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Select下拉框初始化内容</title>
    <link href="/2018/12/16/2018-12-16-select/"/>
    <url>/2018/12/16/2018-12-16-select/</url>
    
    <content type="html"><![CDATA[<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; j++) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">23</span>; i++) &#123;<br>      <span class="hljs-built_in">var</span> s = <span class="hljs-string">&quot;&lt;option value=&quot;</span> + i + <span class="hljs-string">&quot;&gt;&quot;</span> + i + <span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>;<br>      <span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hour&quot;</span> + j.toString();<br>      document.getElementById(<span class="hljs-built_in">str</span>).innerHTML += s;<br>      <span class="hljs-comment">//$(&#x27;#myId&#x27;).append(s);            </span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Switch开关使用，初始化及状态监听</title>
    <link href="/2018/12/16/2018-12-16-bootstrap_switch/"/>
    <url>/2018/12/16/2018-12-16-bootstrap_switch/</url>
    
    <content type="html"><![CDATA[<p>记录在项目中对于Bootstrap的Switch开关的使用过程。</p><p>首先，引入所需的js，css文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;link <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;css/bootstrap-switch.min.css&quot;</span> <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;js/jquery-3.3.1.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;js/bootstrap-switch.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在界面中插入标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;state&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>在js中初始化开关（根据本地数据初始化为ON/OFF）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (myState<span class="hljs-operator"> == </span><span class="hljs-character">&#x27;1&#x27;</span>) &#123;<br>    <span class="hljs-constructor">$(&#x27;#<span class="hljs-params">state</span>&#x27;)</span>.bootstrap<span class="hljs-constructor">Switch(&#x27;<span class="hljs-params">state</span>&#x27;, <span class="hljs-params">true</span>)</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-constructor">$(&#x27;#<span class="hljs-params">state</span>&#x27;)</span>.bootstrap<span class="hljs-constructor">Switch(&#x27;<span class="hljs-params">state</span>&#x27;, <span class="hljs-params">false</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>监听开关状态的变化并使用AJAX发送指令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#state&#x27;</span>).bootstrapSwitch(&#123;<br>    <span class="hljs-comment">//state:myState       </span><br>    onSwitchChange: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event, state</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (state == <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//上线</span><br>            switchstate = <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//下线</span><br>            switchstate = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        $.ajax(&#123;<br>            <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;/whyrain&#x27;</span>,<br>            <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>            <span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;dataType&#x27;</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>            <span class="hljs-string">&#x27;contentType&#x27;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        &#125;);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express初试</title>
    <link href="/2018/11/13/2018-11-13-express/"/>
    <url>/2018/11/13/2018-11-13-express/</url>
    
    <content type="html"><![CDATA[<p>为了处理对ajax的不同HTTP请求进行相应，采用了EXpress框架，在RUNOOB中对Express做了如下解释：Express 是一个简洁而灵活的 node.js Web应用框架,提供了一系列强大特性帮助你创建各种Web应用，和丰富的HTTP工具。</p><p>使用 Express 可以快速地搭建一个完整功能的网站。</p><p>Express 框架核心特性：</p><blockquote><p>可以设置中间件来响应 HTTP 请求。<br>定义了路由表用于执行不同的 HTTP 请求动作。<br>可以通过向模板传递参数来动态渲染 HTML 页面。  </p></blockquote><p>安装Express及其中间件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ cnpm <span class="hljs-keyword">install </span>express --save<br>$ cnpm <span class="hljs-keyword">install </span><span class="hljs-keyword">body-parser </span>--save<br>$ cnpm <span class="hljs-keyword">install </span>cookie-parser --save<br>$ cnpm <span class="hljs-keyword">install </span><span class="hljs-keyword">multer </span>--save<br></code></pre></td></tr></table></figure><p>在项目中使用的Express大致框架。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">// 监听网页</span><br><span class="hljs-keyword">let</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">let</span> app = express()<br><span class="hljs-keyword">let</span> path = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">let</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br>app.<span class="hljs-keyword">use</span>(bodyParser.json());<br>app.<span class="hljs-keyword">use</span>(bodyParser.urlencoded(&#123; extended: <span class="hljs-keyword">false</span> &#125;));<br>app.<span class="hljs-keyword">use</span>(express.<span class="hljs-keyword">static</span>(path.join(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)))<br><br><span class="hljs-comment">//设置允许跨域访问该服务.</span><br>app.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(req, res, next)</span> </span>&#123;<br>    res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>    next();<br>&#125;);<br><br><span class="hljs-comment">// test 路由</span><br>app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>&#123;<br>    console.log(req.body);<br>    res.end(<span class="hljs-string">&quot;The current weather is NICE.&quot;</span>);<br>&#125;);<br><br>app.post(<span class="hljs-string">&quot;/schedule&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req,res)</span></span>&#123;<br><br>&#125;);<br><br>app.post(<span class="hljs-string">&quot;/whyrain&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req,res)</span></span>&#123;<br>    console.log(JSON.stringify(req.body));<br>    res.end(back);<br>&#125;);<br><br><span class="hljs-comment">// 404 页面</span><br>app.<span class="hljs-keyword">use</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>&#123;<br>    res.statusCode = <span class="hljs-number">404</span>;<br>    res.end(<span class="hljs-string">&quot;404!&quot;</span>);<br>&#125;);<br><br>app.listen(<span class="hljs-number">63342</span>,()=&gt;&#123;<br>    console.log(<span class="hljs-string">&#x27;listening at port 63342&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>下面代码是在express添加中间件，设置静态资源路径为public，所有的HTML、CSS、JS等文件都放在public下即可。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">app<span class="hljs-selector-class">.use</span>(express<span class="hljs-selector-class">.static</span>(path<span class="hljs-selector-class">.join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)))<br></code></pre></td></tr></table></figure><p>解析JSON数据</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(bodyParser.json());<br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(bodyParser.urlencoded(&#123; extended: false &#125;));<br></code></pre></td></tr></table></figure><p>解决跨域访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">app.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-keyword">function</span> (req, res, <span class="hljs-keyword">next</span>) &#123;<br>    res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>    <span class="hljs-keyword">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS时间格式转换</title>
    <link href="/2018/11/13/2018-11-13-json&amp;time/"/>
    <url>/2018/11/13/2018-11-13-json&amp;time/</url>
    
    <content type="html"><![CDATA[<p>定义一个日期对象</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> myDate=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>设置想要的规定时间</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var <span class="hljs-keyword">begin</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">new</span> Date()</span>.set<span class="hljs-constructor">Hours(0,0,0,0)</span>);<br><br>var myDate = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br>myDate.set<span class="hljs-constructor">Date(<span class="hljs-params">myDate</span>.<span class="hljs-params">getDate</span>()</span>+<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>下面代码表示将js的时间格式转换为‘2018-11-11 11：11：11’的时间格式。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toDate</span><span class="hljs-params">(date)</span></span>&#123;<br>    Y = <span class="hljs-built_in">date</span>.getFullYear() + <span class="hljs-string">&#x27;-&#x27;</span>;<br>    M = (<span class="hljs-built_in">date</span>.getMonth()+<span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span>+(<span class="hljs-built_in">date</span>.getMonth()+<span class="hljs-number">1</span>) : <span class="hljs-built_in">date</span>.getMonth()+<span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;-&#x27;</span>;<br>    D = <span class="hljs-built_in">date</span>.getDate() + <span class="hljs-string">&#x27; &#x27;</span>;<br>    h = (<span class="hljs-built_in">date</span>.getHours() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span>+(<span class="hljs-built_in">date</span>.getHours()) : <span class="hljs-built_in">date</span>.getHours()) + <span class="hljs-string">&#x27;:&#x27;</span>;<br>    m = (<span class="hljs-built_in">date</span>.getMinutes() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span>+(<span class="hljs-built_in">date</span>.getMinutes()) : <span class="hljs-built_in">date</span>.getMinutes()) + <span class="hljs-string">&#x27;:&#x27;</span>;<br>    s = <span class="hljs-built_in">date</span>.getSeconds() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span>+(<span class="hljs-built_in">date</span>.getSeconds()) : <span class="hljs-built_in">date</span>.getSeconds();<br>    <span class="hljs-keyword">return</span> Y+M+D+h+m+s;<br>&#125;<br></code></pre></td></tr></table></figure><p>在项目中遇到使用ie浏览器时，时间显示为Invalid Date/NaN的情况，在其他浏览器中显示正常，原因时ie不支持‘2018-11-11 11：11：11’的时间格式，因此将其进行转换。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(params.name.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/-/gm</span>),<span class="hljs-string">&quot;/&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>document.ready用法及定时器使用</title>
    <link href="/2018/11/13/2018-11-13-jsschedule/"/>
    <url>/2018/11/13/2018-11-13-jsschedule/</url>
    
    <content type="html"><![CDATA[<p>当 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会发生 ready 事件。</p><p>由于该事件在文档就绪后发生，因此把所有其他的 jQuery 事件和函数置于该事件中是非常好的做法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  $(<span class="hljs-string">&quot;.btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&quot;p&quot;</span>).slideToggle();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>用于定时刷新数据等场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  ...<br>&#125;,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop分布式集群搭建</title>
    <link href="/2018/10/16/2018-10-16-hadoop/"/>
    <url>/2018/10/16/2018-10-16-hadoop/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复盘一下搭建hadoop分布式集群的步骤。<br>（CentOS7+Hadoop2.6.4）</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>1.新建三台CentOS虚拟机（采用NAT上网模式）<br>设置静态IP<br>2.安装破解SecureCRT（按使用说明步骤）<br>连接三台虚拟机<br>3.修改hostname，hosts文件<br>ifconfig查看ip  </p><blockquote><p>$sudo hostnamectl set-hostname master<br>$sudo vim /etc/hosts<br>192.168.138.128 master<br>192.168.138.129 slave1<br>192.168.138.130 slave2</p></blockquote><blockquote><p>ping matser，slave1，slave2 //检查是否设置成功</p></blockquote><p>4.设置ssh双向免密登陆</p><p>生成master的rsa密钥：</p><blockquote><p>$ssh-keygen -t rsa</p></blockquote><p>采用默认值一直敲回车，写入授权文件：</p><blockquote><p>$cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</p></blockquote><p>文件授权：</p><blockquote><p>$chmod 600  ~/.ssh/authorized_keys</p></blockquote><p>进行本机测试:</p><blockquote><p>ssh master</p></blockquote><p>将authorized_keys传到slave1:</p><blockquote><p>sudo scp <del>/.ssh/id_rsa.pub hadoop@slave1:</del>/   </p></blockquote><p>登陆slave1:</p><blockquote><p>$cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</p></blockquote><p>修改authorized_keys权限：</p><blockquote><p>$chmod 600  ~/.ssh/authorized_keys</p></blockquote><p>退出slave1：</p><blockquote><p>$exit</p></blockquote><p>进行免密ssh登陆测试：</p><blockquote><p>$ssh slave1</p></blockquote><p>注意双向！！！在另外两台虚拟机上进行类似的操作<br>5.安装java</p><p>删除centos自带的openjdk</p><blockquote><p>rpm -qa | grep java<br>rpm -e –nodeps …           //删除java开头的文件</p></blockquote><p>安装jdk</p><blockquote><p>rz                           //导入相关文件<br>tar -zxvf jdk-7u80-linux-x64.tar.gz    //解压<br>rm -f jdk-7u80-linux-x64.tar.gz        //删除压缩包<br>vim /etc/profile                       //配置环境变量<br>i  </p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_HOME</span>=/home/hadoop/apps/hadoop-2.6.4<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_COMMON_LIB_NATIVE_DIR</span>=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HADOOP_HOME/bin:$HADOOP_HOME/sbin<br></code></pre></td></tr></table></figure><p>6.Hadoop安装配置<br>关闭防火墙：</p><blockquote><p>$sudo systemctl stop firewalld.service<br>$sudo systemctl disable firewalld.service<br>$sudo vim /usr/sbin/sestatus</p></blockquote><p>安装hadoop：</p><blockquote><p>rz<br>$tar -zxvf ~/hadoop-2.6.4.tar.gz -C ~/</p></blockquote><p>修改配置文件：<br>6-0.hadoop-env.sh</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># The java implementation to use.</span><br><span class="hljs-attribute">export</span> JAVA_HOME=/usr/local/java/jdk<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>6-1.core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://master:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/hadoop/hdpdata<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6-2.hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置dfs副本数，不设置默认是3个   --&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置secondname的端口   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>slave1:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6-3.mapred-env.sh</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/opt/module/jdk1.8<br></code></pre></td></tr></table></figure><p>6-4.mapred-site.xml　</p><blockquote><p>mv mapred-site.xml.template mapred-site.xml  </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6-5.yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>slave1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- reducer获取数据的方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6-6.slaves</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">master</span><br>slave1<br>slave2<br></code></pre></td></tr></table></figure><p>7.Hadoop环境变量配置</p><blockquote><p>sudo /etc/profile</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_HOME</span>=/home/hadoop/hadoop-2.6.4<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_INSTALL</span>=<span class="hljs-variable">$HADOOP_HOME</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_MAPRED_HOME</span>=<span class="hljs-variable">$HADOOP_HOME</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_COMMON_HOME</span>=<span class="hljs-variable">$HADOOP_HOME</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_HDFS_HOME</span>=<span class="hljs-variable">$HADOOP_HOME</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">YARN_HOME</span>=<span class="hljs-variable">$HADOOP_HOME</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_COMMON_LIB_NATIVE_DIR</span>=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HADOOP_HOME/sbin:$HADOOP_HOME/bin<br></code></pre></td></tr></table></figure><p>8.启动Hadoop<br>格式化：</p><blockquote><p>namenode：$hadoop namenode -format</p></blockquote><p>启动hadoop：</p><blockquote><p>$start-all.sh</p></blockquote><p>Web浏览器输入127.0.0.1:50070，查看管理界面  </p><p>9.Hadoop集群测试  </p><blockquote><p>$echo “i am ihan” &gt;&gt; testCount<br>$hadoop fs -mkdir /testInput<br>$hadoop fs -put testCount /testInput<br>$hadoop jar ~/hadoop-2.6.4/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.4.jar   wordcount /testInput /testOutput<br>$hadoop fs -ls /testOutput<br>$hadoop fs -cat /testOutput/part-r-00000</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>结束，心累。</p>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《浪潮之巅 上》读后感</title>
    <link href="/2018/09/25/2018-09-25-read01/"/>
    <url>/2018/09/25/2018-09-25-read01/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一篇读后感，磕磕绊绊了很久才看完了吴军博士的《浪潮之巅 上》，合书之际却对前半本书的内容忘了大半，回忆自己从上了大学以来很少像以前一样静下心来阅读，忘了该如何去阅读，就以此篇博客作为临界点，在大三这一年重拾书香。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>该书主要讲述整个IT行业的发展史，分块介绍各个IT巨头的兴衰。AT&amp;T、IBM、Apple、Intel、Microsoft、Cisco、Yahoo！、Google以及Facebook，随着浪潮的涌动，这些公司有的如今依旧辉煌，有的却已衰弱。我难以将繁杂的历史都印刻在脑海中，却也有幸在书中有所自己的收获及感触，“对于一个人来讲，一生能够赶上这样一次浪潮就足够了”，在二战后这个IT行业迅速发展的这段时间里，郭士纳、乔布斯、格罗夫、盖茨、埃里森等人群雄并起，掀起一场又一场巨浪，他们带给我的，是对整个IT界的敬畏，是一种在身上熠熠闪光的IT精神的鼓舞，敢于创新，敢于拼搏。</p><p>而今回望自己，只是一个普普通通的二流大学生，多么的不甘，IT这个行业是平等的，凭技术实力说话，就如同金庸小说里的武林，而今我也正赶上飞速发展的大数据时代，各种新兴发明和技术依旧如雨后春笋般生长，一切，都还未可知，我将在接下来的两年大学生活里，将自己也塑造成为一个合格的IT人，至少是一个优秀的CS专业本科毕业生，好好学习编程基础和了解这个时代。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>下一本阅读的书籍是《如何阅读一本书》，提高阅读和写作的质量。<br>接下来开始大数据入门学习，同时巩固Java基础。</p>]]></content>
    
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu上使用IDEA搭建maven项目</title>
    <link href="/2018/09/09/2018-09-09-IDEA2jw/"/>
    <url>/2018/09/09/2018-09-09-IDEA2jw/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="安装-Mysql-及设置用户名和密码"><a href="#安装-Mysql-及设置用户名和密码" class="headerlink" title="安装 Mysql 及设置用户名和密码"></a>安装 Mysql 及设置用户名和密码</h4><p>打开命令行依次输入以下三条：</p><blockquote><p>sudo apt-get install mysql-server<br>sudo apt install mysql-client<br>sudo apt install libmysqlclient-dev</p></blockquote><p>这样直接安装的Mysql因为版本问题没有设置密码的步骤，可以采用如下方式自行设置<br>输入：</p><blockquote><p>sudo vi /etc/mysql/debian.cnf  </p></blockquote><p>打开Mysql的配置文件，找到用户名：debian-sys-maint，密码：aWn**********98（随机生成）<br>Esc退出，输入“：q！”</p><blockquote><p>mysql -u debian-sys-maint -p<br>Enter password:(输入刚才的密码)</p></blockquote><p>成功进入到数据库中，接下来设置root用户和密码</p><blockquote><p>mysql&gt; update mysql.user set authentication_string=PASSWORD(“ihan″) where User=’root’;<br>mysql&gt; update mysql.user set plugin=”mysql_native_password”;<br>mysql&gt; flush privileges;<br>mysql&gt; quit;</p></blockquote><p>退出后重启Mysql</p><blockquote><p>sudo /etc/init.d/mysql stop<br>sudo /etc/init.d/mysql start</p></blockquote><p>尝试用设置好的root账户登陆～</p><h4 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h4><p>安装Redis服务端：</p><blockquote><p>sudo apt-get install redis-server</p></blockquote><p>检查Redis服务器系统进程</p><blockquote><p>ps -aux|grep redis</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>     <span class="hljs-number">4162</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">10676</span>  <span class="hljs-number">1420</span> ?        Ss   <span class="hljs-number">23</span>:<span class="hljs-number">24</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> /usr/bin/redis-server /etc/redis/redis.conf<br><span class="hljs-attribute">conan</span>     <span class="hljs-number">4172</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">11064</span>   <span class="hljs-number">924</span> pts/<span class="hljs-number">0</span>    S+   <span class="hljs-number">23</span>:<span class="hljs-number">26</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> grep --color=auto redis<br></code></pre></td></tr></table></figure><p>检查Redis服务器状态</p><blockquote><p>netstat -nlt|grep 6379<br> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">127.0.0.1:6379</span>          <span class="hljs-number">0.0.0.0</span>:*               LISTEN<br></code></pre></td></tr></table></figure></p></blockquote><p>如果报错Command ‘netstat’ not found<br>先sudo apt install net-tools</p><h4 id="安装-Tomcat-及在IDEA上进行配置"><a href="#安装-Tomcat-及在IDEA上进行配置" class="headerlink" title="安装 Tomcat 及在IDEA上进行配置"></a>安装 Tomcat 及在IDEA上进行配置</h4><p>在官网上下载需要的tomcat版本</p><blockquote><p><a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p></blockquote><p>解压到新目录下：</p><blockquote><p>sudo mkdir /opt/tomcat<br>sudo tar -xzvf apache-tomcat-9.0.4.tar.gz<br>sudo mv apache-tomcat-9.0.4 /opt/tomcat/</p></blockquote><p>以管理员权限进到bin目录下，然后</p><blockquote><p>sudo vi startup.sh</p></blockquote><p>添加如下配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jdk/</span>jdk1.<span class="hljs-number">8.0</span>_151<br>JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br>PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br>CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span><span class="hljs-regexp">/lib/</span>dt.jar:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span><span class="hljs-regexp">/lib/</span>tools.jar<br>TOMCAT_HOME=<span class="hljs-regexp">/opt/</span>tomcat/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><blockquote><p>sudo vi shutdown.sh</p></blockquote><p>然后在shutdown.sh，开启tomcat：</p><blockquote><p>./startup.sh</p></blockquote><p>在浏览器中观察8080的小黄毛，关闭tomcat：</p><blockquote><p>./shutdown.sh</p></blockquote><h4 id="安装-Maven-及导入-Maven-项目"><a href="#安装-Maven-及导入-Maven-项目" class="headerlink" title="安装 Maven 及导入 Maven 项目"></a>安装 Maven 及导入 Maven 项目</h4><p>手动下载Maven包</p><blockquote><p><a href="http://apache.fayea.com/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz">http://apache.fayea.com/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz</a></p></blockquote><p>解压到路径下，在命令后输入sudo gedit ~/.bashrc 配置环境变量<br>在末尾加入路径</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">M2_HOME</span>=/opt/apache-maven-3.3.9<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$M2_HOME</span>/bin:$PATH<br></code></pre></td></tr></table></figure><p>配置好后保存关闭，然后输入source ~/.bashrc<br>修改 $M2_HOME conf目录下的settings.xml文件使用国内镜像<br>在mirros下加入如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-comment">&lt;!-- 中央仓库1 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-comment">&lt;!-- 中央仓库2 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public /<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>保存关闭，输入mvn help:system<br>然后下载系统jar包：mvn archetype:generate -DgroupId=kkkk -DartifactId=test-DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false?</p><p>之后在IDEA中新建maven项目时选择自己的maven文件夹和对应的setting文件即可。</p><p>导入Maven项目：File -&gt; New -&gt; Module from Existing Sources…</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 初试及 IDEA&amp;Git&amp;Atom 使用</title>
    <link href="/2018/09/03/2018-09-03-linux/"/>
    <url>/2018/09/03/2018-09-03-linux/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是在Ubuntu下使用Atom编写的第一篇博文，主要讲述近日来关于Ubuntu使用上遇到的一些问题，关于在Ubuntu下使用IDEA编译器，配置java环境，XMind相关软件的使用，以及Git的操作，和Github远程仓库进行代码同步，使用Atom编译器进行代码的编写更改。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="IDEA的使用及配置jdk变量"><a href="#IDEA的使用及配置jdk变量" class="headerlink" title="IDEA的使用及配置jdk变量"></a>IDEA的使用及配置jdk变量</h4><p>由于IDEA编译器良好的跨平台性，只需要先在Ubuntu下配置jdk环境即可，首先在官网下载对应linux版本的jdk</p><blockquote><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p></blockquote><p>对其进行解压缩，然后设置环境变量：<br>ctrl+alt+T进入终端，打开.bashrc:  sudo gedit ~/.bashrc<br>将以下内容拷贝到文档末尾，更改成自己的路径</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># The PATH of jdk1.8.0_144</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/opt/jdk1.8.0_181<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JRE_HOME</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH<br></code></pre></td></tr></table></figure><p>保存文本，在终端中输入: source ~/.bashrc 生效<br>检查是否配置成功: java -version<br>若配置成功，打印以下内容</p><blockquote><p>java version “1.8.0_181”<br>Java(TM) SE Runtime Environment (build 1.8.0_181-b13)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</p></blockquote><p>然后在官网下载IDEA编译器，选择without jdk版本</p><blockquote><p><a href="https://www.jetbrains.com/idea/download/#section=linux">https://www.jetbrains.com/idea/download/#section=linux</a></p></blockquote><p>在下载目录进入终端，解压到opt:</p><blockquote><p>sudo tar -zxvf ideaIC-2018.2.2.tar.gz -C /opt</p></blockquote><p>进入IDEA目录的bin文件夹下:</p><blockquote><p>cd /opt/ideaIC-2018.2.2.tar.gz/bin</p></blockquote><p>最后输入:</p><blockquote><p>./idea.sh  </p></blockquote><p>傻瓜式操作至安装完成。</p><h4 id="XMind8的使用"><a href="#XMind8的使用" class="headerlink" title="XMind8的使用"></a>XMind8的使用</h4><p>步骤很简单，先在官网下载XMind8</p><blockquote><p><a href="http://www.xmind.net/download/linux/">http://www.xmind.net/download/linux/</a></p></blockquote><p>下载完成后解压，进入解压后目录，终端输入</p><blockquote><p>sudo ./setup</p></blockquote><p>然后进入xmind_amd64（64位系统）或者xmind_i386(32位系统)，双击XMind文件即可使用，因为XMind8 for Ubuntu使用java开发，无需安装，为了使用的方便，下面生成其快捷方式，进入存放快捷方式的目录并创建图标</p><blockquote><p>cd /usr/share/applications<br>sudo gedit XMind.desktop</p></blockquote><p>在文档中输入:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Desktop Entry]</span><br><span class="hljs-attr">Encoding</span>=UTF-<span class="hljs-number">8</span><br><span class="hljs-attr">Name</span>=eclipse  <br><span class="hljs-attr">Comment</span>=Eclipse IDE  <br><span class="hljs-attr">Exec</span>=/home/下载/xmind-<span class="hljs-number">8</span>-update8-linux/XMind_amd64/XMind<br><span class="hljs-attr">Icon</span>=/home/下载/xmind-<span class="hljs-number">8</span>-update8-linux/XMind_amd64/XMind.png<br><span class="hljs-attr">Terminal</span>=<span class="hljs-literal">false</span>  <br><span class="hljs-attr">StartupNotify</span>=<span class="hljs-literal">true</span>  <br><span class="hljs-attr">Type</span>=Application  <br><span class="hljs-attr">Categories</span>=Application<span class="hljs-comment">;Development;</span><br></code></pre></td></tr></table></figure><p>大功告成。</p><h4 id="Git-amp-Atom的使用"><a href="#Git-amp-Atom的使用" class="headerlink" title="Git&amp;Atom的使用"></a>Git&amp;Atom的使用</h4><p>使用终端安装Git并进行配置:</p><blockquote><p>sudo apt-get install git<br>git –version<br>git config –global user.name “XXX”<br>git config –global user.email “<a href="mailto:&#88;&#x58;&#x58;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#88;&#x58;&#x58;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>“</p></blockquote><p>本地创建SSH Key。在终端输入（用自己的注册邮箱!）:</p><blockquote><p>ssh-keygen -t rsa -C “<a href="mailto:&#121;&#111;&#x75;&#114;&#101;&#x6d;&#x61;&#x69;&#108;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#121;&#111;&#x75;&#114;&#101;&#x6d;&#x61;&#x69;&#108;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>“</p></blockquote><p>在主目录下找到.ssh目录，有id_rsa和id_rsa.pub两个文件，是SSH Key的密钥对,然后连接github上的远程仓库:登陆github，在”setting”中找到”SSH Keys”页面，New Key 输入id_rsa.pub中内容，title随意<br><img src="/img/ssh.png" alt="img"></p><p>在自定义目录下建立本地仓库:</p><blockquote><p>mkdir ihan-blog<br>cd ihan-blog<br>git init</p></blockquote><p>克隆github上的仓库</p><blockquote><p>git clone <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;</a>:YourCat/YourCat.github.io.git</p></blockquote><p>第一次clone会收到警告，确认GitHub的Key的指纹信息是否真的来自GitHub的服务器,输入yes即可</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">The authenticity <span class="hljs-keyword">of</span> host <span class="hljs-comment">&#x27;github.com (xx.xx.xx.xx)&#x27; can&#x27;t be established.</span><br>RSA <span class="hljs-keyword">key</span> fingerprint <span class="hljs-built_in">is</span> xx.xx.xx.xx.xx.<br>Are you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (yes/no)?<br></code></pre></td></tr></table></figure><p>进入clone的项目目录下:</p><blockquote><p>cd YourCat.github.io</p></blockquote><p>灵活使用以下命令完成同步操作</p><blockquote><p>git add example.markdown             //添加指定文件到暂存区<br>git commit -m “description”          //提交暂存区到仓库区<br>git commit -a                        //提交工作区自上次commit之后的变化到仓库区<br>git remote add origin <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>:YourCat/YourCat.github.io.git    //关联远程仓库<br>git pull origin master               //合并远程分支与本地分支<br>git push origin master               //提交到远程仓库进行同步</p></blockquote><p>第一次推送加上-u参数</p><blockquote><p>git push -u origin master</p></blockquote><p>最后，祭出这张图，愿早日熟悉git命令！<br><img src="/img/git.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1104 Sum of Number Segments（20） -PAT甲级</title>
    <link href="/2018/08/12/2018-08-12-PAT-1104/"/>
    <url>/2018/08/12/2018-08-12-PAT-1104/</url>
    
    <content type="html"><![CDATA[<p>Given a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence { 0.1, 0.2, 0.3, 0.4 }, we have 10 segments: (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) and (0.4). </p><p>Now given a sequence, you are supposed to find the sum of all the numbers in all the segments. For the previous example, the sum of all the 10 segments is 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0.</p><p><strong>Input Specification:</strong><br>Each input file contains one test case. For each case, the first line gives a positive integer N, the size of the sequence which is no more than 10<br>​5 . The next line contains N positive numbers in the sequence, each no more than 1.0, separated by a space.</p><p><strong>Output Specification:</strong><br>For each test case, print in one line the sum of all the numbers in all the segments, accurate up to 2 decimal places.  </p><p><strong>Sample Input:</strong><br>4<br>0.1 0.2 0.3 0.4<br><strong>Sample Output:</strong><br>5.00</p><p>题目大意：求元素能组成的集合的总和<br>分析：数学题，公式法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">double</span> a[<span class="hljs-number">100001</span>];<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>        sum = sum + a[i] * i * (n - i + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1101 Quick Sort（25） -PAT甲级</title>
    <link href="/2018/08/12/2018-08-12-PAT-1101/"/>
    <url>/2018/08/12/2018-08-12-PAT-1101/</url>
    
    <content type="html"><![CDATA[<p>There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given N distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?</p><p>For example, given N=5 and the numbers 1, 3, 2, 4, and 5. We have:  </p><p>1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;<br>3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;<br>2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;<br>and for the similar reason, 4 and 5 could also be the pivot.<br>Hence in total there are 3 pivot candidates.  </p><p><strong>Input Specification:</strong><br>Each input file contains one test case. For each case, the first line gives a positive integer N (≤10^5 ). Then the next line contains N distinct positive integers no larger than 10^9. The numbers in a line are separated by spaces.  </p><p><strong>Output Specification:</strong><br>For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.</p><p><strong>Sample Input:</strong><br>5<br>1 3 2 4 5<br><strong>Sample Output:</strong><br>3<br>1 4 5  </p><p>题目大意：给定快排划分后的序列，问多少个数可以作为主元<br>分析；遵循排序后位置不变且比左边大即满足条件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100000</span>], b[<span class="hljs-number">100000</span>];<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        b[i] = a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a, a + n);<br>    <span class="hljs-keyword">int</span> v[<span class="hljs-number">100000</span>], max = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == b[i] &amp;&amp; b[i] &gt; max)<br>            v[cnt++] = b[i];<br>        <span class="hljs-keyword">if</span> (b[i] &gt; max)<br>            max = b[i];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, v[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1100 Mars Numbers（20） -PAT甲级</title>
    <link href="/2018/08/08/2018-08-08-PAT-1100/"/>
    <url>/2018/08/08/2018-08-08-PAT-1100/</url>
    
    <content type="html"><![CDATA[<p>People on Mars count their numbers with base 13:  </p><p>Zero on Earth is called “tret” on Mars.<br>The numbers 1 to 12 on Earch is called “jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec” on Mars, respectively.<br>For the next higher digit, Mars people name the 12 numbers as “tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou”, respectively.<br>For examples, the number 29 on Earth is called “hel mar” on Mars; and “elo nov” on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.</p><p><strong>Input Specification:</strong><br>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;100). Then N lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.</p><p><strong>Output Specification:</strong><br>For each number, print in a line the corresponding number in the other language.</p><p><strong>Sample Input:</strong><br>4<br>29<br>5<br>elo nov<br>tam<br><strong>Sample Output:</strong><br>hel mar<br>may<br>115<br>13  </p><p>题目大意：按13进制规则转换火星文<br>分析：水题，逻辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a[] = &#123;<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;jan&quot;</span>,<span class="hljs-string">&quot;feb&quot;</span>,<span class="hljs-string">&quot;mar&quot;</span>,<span class="hljs-string">&quot;apr&quot;</span>,<span class="hljs-string">&quot;may&quot;</span>,<span class="hljs-string">&quot;jun&quot;</span>,<span class="hljs-string">&quot;jly&quot;</span>,<span class="hljs-string">&quot;aug&quot;</span>,<span class="hljs-string">&quot;sep&quot;</span>,<span class="hljs-string">&quot;oct&quot;</span>,<span class="hljs-string">&quot;nov&quot;</span>,<span class="hljs-string">&quot;dec&quot;</span>&#125;;<br>    string b[] = &#123;<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;tam&quot;</span>,<span class="hljs-string">&quot;hel&quot;</span>,<span class="hljs-string">&quot;maa&quot;</span>,<span class="hljs-string">&quot;huh&quot;</span>,<span class="hljs-string">&quot;tou&quot;</span>,<span class="hljs-string">&quot;kes&quot;</span>,<span class="hljs-string">&quot;hei&quot;</span>,<span class="hljs-string">&quot;elo&quot;</span>,<span class="hljs-string">&quot;syy&quot;</span>,<span class="hljs-string">&quot;lok&quot;</span>,<span class="hljs-string">&quot;mer&quot;</span>,<span class="hljs-string">&quot;jou&quot;</span>&#125;;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(N--)&#123;<br>        string tmp;<br>        <span class="hljs-built_in">getline</span>(cin, tmp);<br>        <span class="hljs-keyword">if</span>(tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;tret&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp[<span class="hljs-number">0</span>] &gt; <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; tmp[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br><br>            <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tmp.<span class="hljs-built_in">length</span>(); i++)&#123;<br>                num = num * <span class="hljs-number">10</span> + (tmp[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(num &gt;= <span class="hljs-number">13</span>)&#123;<br>                cout &lt;&lt; b[num/<span class="hljs-number">13</span>] ;<br>                <span class="hljs-keyword">if</span>(num % <span class="hljs-number">13</span>) cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            &#125;<br>            cout&lt;&lt; a[num%<span class="hljs-number">13</span>] &lt;&lt;endl;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(tmp == <span class="hljs-string">&quot;tret&quot;</span>) cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt;endl;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp.<span class="hljs-built_in">length</span>() == <span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)&#123;<br>                    <span class="hljs-keyword">if</span>(a[i] == tmp)<br>                        cout &lt;&lt; i &lt;&lt; endl;<br>                    <span class="hljs-keyword">if</span>(b[i] == tmp)<br>                        cout &lt;&lt; i * <span class="hljs-number">13</span> &lt;&lt; endl;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                string bb = tmp.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>                string aa = tmp.<span class="hljs-built_in">substr</span>(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>                    <span class="hljs-keyword">if</span>(b[i] == bb)<br>                        num +=  <span class="hljs-number">13</span> * i;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>                    <span class="hljs-keyword">if</span>(a[i] == aa)<br>                        num += i;<br>                cout &lt;&lt; num &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1097 Deduplication on a Linked List (25) -PAT甲级</title>
    <link href="/2018/08/08/2018-08-08-PAT-1097/"/>
    <url>/2018/08/08/2018-08-08-PAT-1097/</url>
    
    <content type="html"><![CDATA[<p>Given a singly linked list L with integer keys, you are supposed to remove the nodes with duplicated absolute values of the keys. That is, for each value K, only the first node of which the value or absolute value of its key equals K will be kept. At the mean time, all the removed nodes must be kept in a separate list. For example, given L being 21→-15→-15→-7→15, you must output 21→-15→-7, and the removed list -15→15.</p><p><strong>Input Specification:</strong>  </p><p>Each input file contains one test case. For each case, the first line contains the address of the first node, and a positive N (&lt;= 10^5^) which is the total number of nodes. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p><p>Then N lines follow, each describes a node in the format:  </p><p>Address Key Next  </p><p>where Address is the position of the node, Key is an integer of which absolute value is no more than 10^4^, and Next is the position of the next node.</p><p><strong>Output Specification:</strong>   </p><p>For each case, output the resulting linked list first, then the removed list. Each node occupies a line, and is printed in the same format as in the input.</p><p><strong>Sample Input:</strong>  </p><p>00100 5<br>99999 -7 87654<br>23854 -15 00000<br>87654 15 -1<br>00000 -15 99999<br>00100 21 23854<br><strong>Sample Output:</strong>  </p><p>00100 21 23854<br>23854 -15 99999<br>99999 -7 -1<br>00000 -15 87654<br>87654 15 -1   </p><p>题目大意：给定一个链表，去除绝对值相同的数，然后输出链表和去掉的链表<br>分析：用一个结构体存储一个数的地址，值和下一个数的地址，暴力。  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> addr;<br>    <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">int</span> next;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> first, n;<br>    <span class="hljs-function">vector&lt;node&gt; <span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">100000</span>)</span></span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;first, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        node tmp;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;tmp.addr, &amp;tmp.value, &amp;tmp.next);<br>        data[tmp.addr] = tmp;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-number">10000</span>,<span class="hljs-number">0</span>)</span></span>;<br>    vector&lt;node&gt; ans, rem;<br>    <span class="hljs-keyword">int</span> k = first;<br>    <span class="hljs-keyword">while</span>(k != <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(count[<span class="hljs-built_in">abs</span>(data[k].value)] == <span class="hljs-number">0</span>)<br>            ans.<span class="hljs-built_in">push_back</span>(data[k]);<br>        <span class="hljs-keyword">else</span><br>            rem.<span class="hljs-built_in">push_back</span>(data[k]);<br>        count[<span class="hljs-built_in">abs</span>(data[k].value)] = <span class="hljs-number">1</span>;<br>        k = data[k].next;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>,ans[i].addr,ans[i].value,ans[i+<span class="hljs-number">1</span>].addr);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1\n&quot;</span>,ans[i].addr,ans[i].value);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rem.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; rem.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>,rem[i].addr,rem[i].value,rem[i+<span class="hljs-number">1</span>].addr);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1\n&quot;</span>,rem[i].addr,rem[i].value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1094 The Largest Generation (25) -PAT甲级</title>
    <link href="/2018/08/05/2018-08-05-PAT-1094/"/>
    <url>/2018/08/05/2018-08-05-PAT-1094/</url>
    
    <content type="html"><![CDATA[<p>A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is to find the generation with the largest population.</p><p><strong>Input Specification:</strong>   </p><p>Each input file contains one test case. Each case starts with two positive integers N (&amp;lt100) which is the total number of family members in the tree (and hence assume that all the members are numbered from 01 to N), and M (&amp;ltN) which is the number of family members who have children. Then M lines follow, each contains the information of a family member in the following format:</p><p>ID K ID[1] ID[2] … ID[K]</p><p>where ID is a two-digit number representing a family member, K (&amp;gt0) is the number of his/her children, followed by a sequence of two-digit ID’s of his/her children. For the sake of simplicity, let us fix the root ID to be 01. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong>  </p><p>For each test case, print in one line the largest population number and the level of the corresponding generation. It is assumed that such a generation is unique, and the root level is defined to be 1.</p><p><strong>Sample Input:</strong>  </p><p>23 13<br>21 1 23<br>01 4 03 02 04 05<br>03 3 06 07 08<br>06 2 12 13<br>13 1 21<br>08 2 15 16<br>02 2 09 10<br>11 2 19 20<br>17 1 22<br>05 1 11<br>07 1 14<br>09 1 17<br>10 1 18<br><strong>Sample Output:</strong>  </p><p>9 4</p><p>题目大意：一棵树有N个结点，给定非叶子结点的孩子结点编号，问结点数最多的层的数目和层号<br>分析：dfs遍历，用一个v数组存储结点的孩子，a数组存储当前层结点数，最后按层遍历一遍找max</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v[<span class="hljs-number">100</span>];      <span class="hljs-comment">//存当前结点的孩子</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>];              <span class="hljs-comment">//当前层的结点数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> level)</span></span>&#123;<br>    a[level]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v[index].<span class="hljs-built_in">size</span>(); i++)<br>        <span class="hljs-built_in">dfs</span>(v[index][i], level+<span class="hljs-number">1</span>);          <span class="hljs-comment">//dfs遍历树</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m, x, k, t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>            v[x].<span class="hljs-built_in">push_back</span>(t);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">0</span>, maxl = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &gt; maxn)&#123;          <span class="hljs-comment">//找结点最多的层</span><br>            maxn = a[i];<br>            maxl = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, maxn, maxl);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1096 Consecutive Factors (20) -PAT甲级</title>
    <link href="/2018/08/01/2018-08-01-PAT-1096/"/>
    <url>/2018/08/01/2018-08-01-PAT-1096/</url>
    
    <content type="html"><![CDATA[<p>Among all the factors of a positive integer N, there may exist several consecutive numbers. For example, 630 can be factored as 3<em>5</em>6*7, where 5, 6, and 7 are the three consecutive numbers. Now given any positive N, you are supposed to find the maximum number of consecutive factors, and list the smallest sequence of the consecutive factors.</p><p><strong>Input Specification:</strong>  </p><p>Each input file contains one test case, which gives the integer N (1&lt;N&lt;2^31^).</p><p><strong>Output Specification:</strong>  </p><p>For each test case, print in the first line the maximum number of consecutive factors. Then in the second line, print the smallest sequence of the consecutive factors in the format “factor[1]*factor[2]*…*factor[k]”, where the factors are listed in increasing order, and 1 is NOT included.</p><p><strong>Sample Input:</strong>   </p><p>630<br><strong>Sample Output:</strong>   </p><p>3<br>5<em>6</em>7</p><p>题目大意：给定一个数，输出其最长的连续因子<br>分析：暴力</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> len = <span class="hljs-number">12</span>; len &gt; <span class="hljs-number">0</span>; len--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> s = <span class="hljs-number">2</span>;s &lt;= <span class="hljs-built_in">sqrt</span>(n); s++)&#123;<br>            ll ans = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s;i - s &lt;= len - <span class="hljs-number">1</span>;i++)<br>                ans *= i;<br>            <span class="hljs-keyword">if</span>(n%ans == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d&quot;</span>, len, s);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = s + <span class="hljs-number">1</span>;i - s &lt;= len <span class="hljs-number">-1</span>; i++)&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*%d&quot;</span>, i);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n%d&quot;</span>, n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1090 Highest Price in Supply Chain (25) -PAT甲级</title>
    <link href="/2018/08/01/2018-08-01-PAT-1090/"/>
    <url>/2018/08/01/2018-08-01-PAT-1090/</url>
    
    <content type="html"><![CDATA[<p>A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to customer.</p><p>Starting from one root supplier, everyone on the chain buys products from one’s supplier in a price P and sell or distribute them in a price that is r% higher than P. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle.</p><p>Now given a supply chain, you are supposed to tell the highest price we can expect from some retailers.</p><p><strong>Input Specification:</strong>  </p><p>Each input file contains one test case. For each case, The first line contains three positive numbers: N (&lt;=10^5^), the total number of the members in the supply chain (and hence they are numbered from 0 to N-1); P, the price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then the next line contains N numbers, each number S<del>i</del> is the index of the supplier for the i-th member. S<del>root</del> for the root supplier is defined to be -1. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong>  </p><p>For each test case, print in one line the highest price we can expect from some retailers, accurate up to 2 decimal places, and the number of retailers that sell at the highest price. There must be one space between the two numbers. It is guaranteed that the price will not exceed 10^10^.</p><p><strong>Sample Input:</strong>  </p><p>9 1.80 1.00<br>1 5 4 4 -1 4 5 3 6<br><strong>Sample Output:</strong>  </p><p>1.85 2  </p><p>题目大意：给定一棵树，树根处价格p，每往下一层加r%，问所有叶子的最高价格和该层叶子数<br>分析；用v[i] [j]存储，结点i的孩子结点下标存在v[i]中，dfs保存下标和所在层数，叶子结点时更新maxdepth和maxnum</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n, maxdepth = <span class="hljs-number">0</span>, maxnum = <span class="hljs-number">0</span>, temp, root;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v[<span class="hljs-number">100010</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(v[index].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span>(maxdepth == depth)<br>            maxnum++;<br>        <span class="hljs-keyword">if</span>(maxdepth &lt; depth) &#123;<br>            maxdepth = depth;<br>            maxnum = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v[index].<span class="hljs-built_in">size</span>(); i++)<br>        <span class="hljs-built_in">dfs</span>(v[index][i], depth + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> p, r;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %lf %lf&quot;</span>, &amp;n, &amp;p, &amp;r);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temp);<br>        <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">-1</span>)<br>            root = i;<br>        <span class="hljs-keyword">else</span><br>            v[temp].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f %d&quot;</span>, p * <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> + r/<span class="hljs-number">100</span>, maxdepth), maxnum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis 批量更新</title>
    <link href="/2018/07/22/2018-07-22-mybatis/"/>
    <url>/2018/07/22/2018-07-22-mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在实际业务中遇到需要一次更新多条数据时，需要采用批量更新(updateBatch)的方法，下面介绍两种不同的方式。</p><p>1.逐条更新</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lasso">updateBatch(<span class="hljs-built_in">List</span>&lt;MyData&gt; datas)&#123;<br>    for(MyData <span class="hljs-built_in">data</span> : datas)&#123;<br>        try&#123;<br>            myDataDao.update(<span class="hljs-built_in">data</span>);<span class="hljs-comment">//更新一条数据，mybatis中如下面的xml文件的update</span><br>        &#125;<br>        catch(Exception e)&#123;<br>            <span class="hljs-params">...</span><span class="hljs-comment">//如果更新失败可以做一些其他的操作，比如说打印出错日志等</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//mybatis中update操作的实现</span><br>&lt;update&gt;<br>    update mydata<br>    <span class="hljs-built_in">set</span>   <span class="hljs-params">...</span><br>    <span class="hljs-keyword">where</span> <span class="hljs-params">...</span><br>&lt;/update&gt;<br></code></pre></td></tr></table></figure><p>这种方式效率极低，每次都会连接数据库，更新，释放资源，一般不采用。</p><p>2.sql批量更新</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">update</span> id=&quot;updateBatch&quot; parameterType=&quot;java.util.List&quot;&gt;<br>  <span class="hljs-keyword">update</span> goods<br>  <span class="hljs-keyword">set</span> num = num-<br>  &lt;<span class="hljs-keyword">foreach</span> collection=&quot;list&quot; item=&quot;item&quot; <span class="hljs-keyword">index</span>=&quot;index&quot;<br>        separator=&quot; &quot; <span class="hljs-keyword">open</span>=&quot;case ID&quot; <span class="hljs-keyword">close</span>=&quot;end&quot;&gt;<br>        <span class="hljs-keyword">when</span> #&#123;item.id&#125; <span class="hljs-keyword">then</span> #&#123;item.upnum&#125;<br>    &lt;/<span class="hljs-keyword">foreach</span>&gt;<br>    <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span><br>    &lt;<span class="hljs-keyword">foreach</span> collection=&quot;list&quot; <span class="hljs-keyword">index</span>=&quot;index&quot; item=&quot;item&quot;<br>        separator=&quot;,&quot; <span class="hljs-keyword">open</span>=&quot;(&quot; <span class="hljs-keyword">close</span>=&quot;)&quot;&gt;<br>        #&#123;item.id,jdbcType=<span class="hljs-type">BIGINT</span>&#125;<br>    &lt;/<span class="hljs-keyword">foreach</span>&gt;<br>&lt;/<span class="hljs-keyword">update</span>&gt;<br></code></pre></td></tr></table></figure><p>其中when…then…是sql中的”switch” 语法。这里借助mybatis的<foreach>语法来拼凑成了批量更新的sql，上面的意思就是批量更新id在updateBatch参数所传递List中的数据的status字段。还可以使用<trim>实现同样的功能,代码如下:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBatch&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="xml">        update mydata_table</span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;set&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">            </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;status =case&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;end,&quot;</span>&gt;</span></span><br><span class="xml">                </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">                     when id=#</span><span class="xquery">&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.id</span>&#125;</span><span class="xml"> then #</span><span class="xquery">&#123;<span class="hljs-type">item</span>.status&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">        where id in</span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span></span><br><span class="xml">            #</span><span class="xquery">&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.id</span>,jdbcType=BIGINT&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ali Link Develop 入门学习</title>
    <link href="/2018/07/07/2018-07-07-ali/"/>
    <url>/2018/07/07/2018-07-07-ali/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>Link Develop</strong></p><p>何为Link Develop？官方文档中这样介绍：Link Develop是阿里云针对物联网领域提供的端到端一站式开发平台，可覆盖各个物联网行业应用场景，主要解决物联网开发领域开发链路长、技术栈复杂、协同成本高、方案移植困难的问题，提供了从硬件设备、模组、数据、服务API、Web应用开发到移动APP开发全链路的开发流程、框架／引擎和调试工具，并可将成熟的开发产出物对接阿里云云市场进行售卖，为开发者实现商业收益。<br>简言之，它是阿里专门为物联网开发推出的一项技术，一个可以供大家使用的开发平台。</p><p>Link Develop 架构图：</p><p><img src="/img/LinkDevelop.jpg" alt="img"></p><p>下面简单复盘一下设备端开发和前端应用开发两个入门案例。</p><h4 id="设备端开发"><a href="#设备端开发" class="headerlink" title="设备端开发"></a>设备端开发</h4><p>首先，需要 创建产品和测试设备  </p><p><strong>创建RGB智能灯产品</strong><br>从项目控制台左侧的设备菜单项里找到“产品开发”，点击进入并点击“立即创建产品”。<br><img src="/img/LD1.png" alt="img"><br>按下图填写表单，所属分类选择“智能生活/电工照明/灯”，节点类型选择“设备”，通讯网络选择“Wi-Fi”，数据格式选择“Alink”，然后点“提交”后点击“进入开发”按钮。<br><img src="/img/LD2.png" alt="img"><br>创建好产品后，我们发现产品界面上已经有了故障和主灯开关这两个设备的标准功能定义。产品功能定义使用的是 ICA 联盟 定义的标准产品功能规范，用来描述设备能做什么有什么能力。我们开发的产品原型是 RGB 小灯，所以我们还需要添加一个 RGB 调色的功能定义。<br><img src="/img/LD3.png" alt="img"><br>点击标准功能一栏右侧的“新增”按钮。在弹出的“新增可选功能”对话框左侧列表中，找到 RGB 调色功能并单击进行选择，然后点击“确定”。<br><img src="/img/LD4.png" alt="img"><br>在标准功能定义里就有了 RGB调色的功能属性。<br><img src="/img/LD5.png" alt="img"><br>有了开关和 RGB 调色的功能，我们的 RGB 全彩灯产品就定义好了，这台灯有什么功能跟能做什么已经描述清楚了。</p><p>产品功能定义好了之后，我们就可以申请测试设备的激活凭证，设备的激活凭证就像设备连接到云端的 id 和密码，设备有了 id 和密码，才能通过云端的身份鉴权连接到云端。</p><p><strong>创建测试设备</strong><br>我们从“功能定义”的 Tab 切换到“设备开发”的 Tab。</p><p>点击“设备列表”一栏右侧的“新增测试设备”按钮。<br><img src="/img/LD6.png" alt="img"><br>在弹出的“新增测试设备”对话框中直接点击“确定”，我们就可以得到一个测试设备的激活凭证。激活凭证是包括 ProductKey、DeviceName 和 DeviceSecret（注意是 DeviceSercet） 的一个三元组，用来进行设备与云端的连接和激活，其中 DeviceSecret 是最重要字段，也就是设备的密码，需要妥善保存。<br><img src="/img/LD7.png" alt="img"><br>这时候看看设备列表当中已经有了一个未激活的设备：<br><img src="/img/LD8.png" alt="img"><br>下一步我们要使用创建的设备激活凭证将设备连接到云端进行激活。</p><p>方案四：基于 Web Device 虚拟设备</p><blockquote><p>Web Device 是用来在浏览器中进行设备快速模拟的工具，此方案的优势是不需要依赖其他硬件和编程工具，只要使用浏览器打开一个 URL，就&gt;能实现设备连接、数据上下行通信模拟。开始前请确保完成了产品和测试设备创建。</p></blockquote><p>在设备列表中打开在线模拟链接：<br><img src="/img/LD9.png" alt="img"><br><strong>设备上线</strong><br>点击“设备模拟”新窗口右上角的“上线”按钮，将设备上线：<br><img src="/img/LD10.png" alt="img"><br>可以看到设备已上线：<br><img src="/img/LD11.png" alt="img"><br><strong>云端下发消息到设备</strong><br>点击模拟设备界面右上角的“在线调试”按钮，打开在线调试页面：<br><img src="/img/LD12.png" alt="img"><br>在页面下方的调试功能里选择“RGB调色（RGBColor）”，方法选为“设置”。  </p><p>将下方 JSON 编辑器的内容替换成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;RGBColor&quot;</span>:&#123;<span class="hljs-attr">&quot;Red&quot;</span>:<span class="hljs-number">255</span>,<span class="hljs-attr">&quot;Blue&quot;</span>:<span class="hljs-number">255</span>,<span class="hljs-attr">&quot;Green&quot;</span>:<span class="hljs-number">0</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>然后点击“发送指令”按钮，切换到设备模拟界面上，可以看到，模拟设备收到了云端消息：<br><img src="/img/LD13.png" alt="img"><br><strong>设备上报消息到云端</strong><br>将模拟设备的 RGBColor 属性值改成（255,255,0），点击“上报”，在右侧可以看到设备上报属性成功的消息：<br><img src="/img/LD14.png" alt="img"><br>云端也收到了设备上报的数据：<br><img src="/img/LD15.png" alt="img"><br>自此，我们基于 Web Device 模拟的 RGB 小灯设备端就完成了。在 IoT 应用端开发中，我们可以借助这个虚拟的设备来完成应用端和设备端的联调，用它来模拟 IoT 设备的各种行为，比如连续上报、定时上报等功能。更多关于 Web Device 设备模拟工具的内容请参考它的详细使用文档。</p><p>接下来我们可以进入 Web 应用的开发，Link Develop提供了Web前端应用和第三方应用开发能力，前往查看。</p><h4 id="前端应用开发"><a href="#前端应用开发" class="headerlink" title="前端应用开发"></a>前端应用开发</h4><p><strong>软件安装</strong><br>安装 Node.js LTS 版本（&gt;=8.9)：<code>https://nodejs.org/zh-cn/</code><br>安装 Ruff SDK：<code>https://ruff.io/zh-cn/docs/download.html</code><br>安装 Web 应用开发工具 Bone Cli：<code>https://bone.aliyun.com/bone-web/bonewebsdk.html?name=zm1rpl</code><br>文本编辑器：<code>VSCode / Sublime / Vim...</code></p><p>版本检查：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>bnpm -v<br>rap -V<br>bone -v<br></code></pre></td></tr></table></figure><p>请确认高于或者等于以下版本：<br><img src="/img/LD16.png" alt="img"><br><strong>创建应用</strong><br>从项目控制台左侧菜单进入“应用-Web 应用”，点击右上角的“新增应用”按钮。<br><img src="/img/LD17.png" alt="img"><br>如图所示填写表单，新建一个托管应用，点击提交进入下一步。<br><img src="/img/LD18.png" alt="img"><br>在应用“创建成功”的页面上点击“进入开发”按钮。<br>我们得到了一个 AppKey ，一个 AppSecret 和一个用来访问应用的三级域名。有了 AppKey 和 AppSecret，就能进行应用开发了。<br><img src="/img/LD19.png" alt="img"><br><strong>Web 应用编码</strong><br>新建目录，进行项目初始化：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">mkdir</span> linkdevelop-webapp-rgblight<br><span class="hljs-built_in">cd</span> linkdevelop-webapp-rgblight<br>bone init<br></code></pre></td></tr></table></figure><p><img src="/img/LD20.png" alt="img"><br>安装 @bone/iot-gateway 和 react-color 颜色选择组件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">bnpm <span class="hljs-selector-tag">i</span> --save <span class="hljs-keyword">@bone</span>/iot-gateway react-color<br></code></pre></td></tr></table></figure><p><img src="/img/LD21.png" alt="img"><br>修改 app/pages/home/index.js 代码，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Button, Switch, Form, Grid, Input, Dialog &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@bone/bone-web-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> IotGateway <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@bone/iot-gateway&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; HuePicker &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-color&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Row = Grid.Row;<br><span class="hljs-keyword">const</span> Col = Grid.Col;<br><span class="hljs-keyword">const</span> FormItem = Form.Item;<br><span class="hljs-keyword">const</span> formItemLayout = &#123;<br>  labelCol: &#123;<br>    fixedSpan: <span class="hljs-number">12</span><br>  &#125;,<br>  wrapperCol: &#123;<br>    span: <span class="hljs-number">12</span><br>  &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> insetLayout = &#123;<br>  labelCol: &#123; <span class="hljs-attr">fixedSpan</span>: <span class="hljs-number">4</span> &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      <span class="hljs-keyword">switch</span>: <span class="hljs-literal">false</span>,<br>      color: <span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-comment">// 刷新页面不用重复输入</span><br>      productKey: <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;productKey&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>,<br>      deviceName: <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;deviceName&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;;<br>    <span class="hljs-comment">// 获取初始数据</span><br>    <span class="hljs-built_in">this</span>.getProps(<span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        <span class="hljs-keyword">switch</span>: props.LightSwitch === <span class="hljs-number">1</span>,<br>        color: rgbToHex(<br>          props.RGBColor.Red,<br>          props.RGBColor.Green,<br>          props.RGBColor.Blue<br>        )<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">getProps</span>(<span class="hljs-params">cb</span>)</span> &#123;<br>    IotGateway.post(&#123;<br>      url: <span class="hljs-string">&#x27;https://api.link.aliyun.com/thing/device/status/query&#x27;</span>,<br>      apiVer: <span class="hljs-string">&#x27;1.0.1&#x27;</span>,<br>      params: &#123;<br>        ProductKey: <span class="hljs-built_in">this</span>.state.productKey,<br>        DeviceName: <span class="hljs-built_in">this</span>.state.deviceName<br>      &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (res.code !== <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(res.localizedMsg || res.message);<br>      &#125;<br>      <span class="hljs-keyword">let</span> props = &#123;&#125;;<br>      res.data.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        props[item.attribute] = item.value;<br>      &#125;);<br>      <span class="hljs-keyword">if</span> (cb) &#123;<br>        cb(props);<br>      &#125;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get props successfully:&#x27;</span>, props);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">setProps</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    IotGateway.post(&#123;<br>      url: <span class="hljs-string">&#x27;https://api.link.aliyun.com/thing/device/properties/set&#x27;</span>,<br>      apiVer: <span class="hljs-string">&#x27;1.0.1&#x27;</span>,<br>      params: &#123;<br>        ThingId: &#123;<br>          productKey: <span class="hljs-built_in">this</span>.state.productKey,<br>          deviceName: <span class="hljs-built_in">this</span>.state.deviceName<br>        &#125;,<br>        Items: props<br>      &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (res.code !== <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(res.localizedMsg || res.message);<br>      &#125;<br>      <span class="hljs-built_in">console</span>.log(res);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">showValidationText</span>(<span class="hljs-params"></span>)</span> &#123;<br>    Dialog.alert(&#123;<br>      title: <span class="hljs-string">&#x27;提示&#x27;</span>,<br>      content: <span class="hljs-string">&#x27;请输入设备的 productKey 和 deviceName 才能控制设备哦&#x27;</span><br>    &#125;);<br>  &#125;<br>  onChange = <span class="hljs-function"><span class="hljs-params">checked</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.state.productKey || !<span class="hljs-built_in">this</span>.state.deviceName) &#123;<br>      <span class="hljs-built_in">this</span>.showValidationText();<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      <span class="hljs-keyword">switch</span>: checked<br>    &#125;);<br>    <span class="hljs-built_in">this</span>.setProps(&#123;<br>      LightSwitch: checked ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span><br>    &#125;);<br>  &#125;;<br>  onInput = <span class="hljs-function">(<span class="hljs-params">field, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.state[field] = value;<br>    <span class="hljs-built_in">localStorage</span>.setItem(field, value);<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      [field]: value<br>    &#125;);<br>  &#125;;<br>  onColorChange = <span class="hljs-function"><span class="hljs-params">color</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.state.productKey || !<span class="hljs-built_in">this</span>.state.deviceName) &#123;<br>      <span class="hljs-built_in">this</span>.showValidationText();<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      color: color.hex<br>    &#125;);<br>    <span class="hljs-built_in">this</span>.setProps(&#123;<br>      RGBColor: hexToRgb(color.hex)<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div style=&#123;&#123; <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;30px 0 0 30px&#x27;</span> &#125;&#125;&gt;<br>        &lt;Form style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;0 0 0 30px&#x27;</span> &#125;&#125; &#123;...formItemLayout&#125;&gt;<br>          &lt;FormItem label=<span class="hljs-string">&quot;设备 id&quot;</span>&gt;<br>            &lt;Row&gt;<br>              &lt;Col&gt;<br>                &lt;FormItem<br>                  label=<span class="hljs-string">&quot;productKey&quot;</span><br>                  required=&#123;<span class="hljs-literal">false</span>&#125;<br>                  labelAlign=<span class="hljs-string">&quot;inset&quot;</span><br>                  &#123;...insetLayout&#125;<br>                &gt;<br>                  &lt;Input<br>                    placeholder=<span class="hljs-string">&quot;请输入&quot;</span><br>                    value=&#123;<span class="hljs-built_in">this</span>.state.productKey&#125;<br>                    onChange=&#123;<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">this</span>.onInput(<span class="hljs-string">&#x27;productKey&#x27;</span>, value)&#125;<br>                  /&gt;<br>                &lt;/FormItem&gt;<br>              &lt;/Col&gt;<br>              &lt;Col&gt;<br>                &lt;FormItem<br>                  label=<span class="hljs-string">&quot;deviceName&quot;</span><br>                  required=&#123;<span class="hljs-literal">false</span>&#125;<br>                  labelAlign=<span class="hljs-string">&quot;inset&quot;</span><br>                  &#123;...insetLayout&#125;<br>                &gt;<br>                  &lt;Input<br>                    placeholder=<span class="hljs-string">&quot;请输入&quot;</span><br>                    value=&#123;<span class="hljs-built_in">this</span>.state.deviceName&#125;<br>                    onChange=&#123;<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">this</span>.onInput(<span class="hljs-string">&#x27;deviceName&#x27;</span>, value)&#125;<br>                  /&gt;<br>                &lt;/FormItem&gt;<br>              &lt;/Col&gt;<br>            &lt;/Row&gt;<br>          &lt;/FormItem&gt;<br>          &lt;FormItem label=<span class="hljs-string">&quot;开关&quot;</span>&gt;<br>            &lt;Switch onChange=&#123;<span class="hljs-built_in">this</span>.onChange&#125; checked=&#123;<span class="hljs-built_in">this</span>.state.switch&#125; /&gt;<br>          &lt;/FormItem&gt;<br>          &lt;FormItem label=<span class="hljs-string">&quot;调色&quot;</span>&gt;<br>            &lt;div style=&#123;&#123; <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;7px 0 0 10px&#x27;</span> &#125;&#125;&gt;<br>              &lt;HuePicker<br>                onChangeComplete=&#123;<span class="hljs-built_in">this</span>.onColorChange&#125;<br>                color=&#123;<span class="hljs-built_in">this</span>.state.color&#125;<br>              /&gt;<br>            &lt;/div&gt;<br>          &lt;/FormItem&gt;<br>        &lt;/Form&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rgbToHex</span>(<span class="hljs-params">r, g, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;#&#x27;</span> + ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>) + (r &lt;&lt; <span class="hljs-number">16</span>) + (g &lt;&lt; <span class="hljs-number">8</span>) + b).toString(<span class="hljs-number">16</span>).slice(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hexToRgb</span>(<span class="hljs-params">hex</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> result = <span class="hljs-regexp">/^#?([a-f\d]&#123;2&#125;)([a-f\d]&#123;2&#125;)([a-f\d]&#123;2&#125;)$/i</span>.exec(hex);<br>  <span class="hljs-keyword">return</span> result<br>    ? &#123;<br>        Red: <span class="hljs-built_in">parseInt</span>(result[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>),<br>        Green: <span class="hljs-built_in">parseInt</span>(result[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>),<br>        Blue: <span class="hljs-built_in">parseInt</span>(result[<span class="hljs-number">3</span>], <span class="hljs-number">16</span>)<br>      &#125;<br>    : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行调试</strong><br>启动项目</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">bone <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p><img src="/img/LD22.png" alt="img"><br>使用 Chrome 浏览器访问：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8000</span>/<br></code></pre></td></tr></table></figure><p>这时候页面会提示输入应用的 appKey 和 appSecret，从平台上复制过来填好，点击“确认”按钮。<br><img src="/img/LD23.png" alt="img"><br>我们要在 Web 应用上控制一台设备，得知道它的唯一标识（设备id），云端才能找到对应的设备进行操作。</p><p>设备的唯一标识就是刚才创建的测试设备激活凭证中的 productKey 和 deviceName 两个字段。有了这两个字段，云端就可以找到我们的刚才开发的那台设备。</p><p>将测试设备激活凭证中的 productKey + deviceName 填入 Web 界面输入框中：<br><img src="/img/LD24.png" alt="img"><br>接着我们刷新一下页面，查看一下 Chrome 浏览器控制台（按 F12 或者 Ctrl+Shift+i），发现设备的属性已经能正常获取了。<br><img src="/img/LD25.png" alt="img"><br>点击“设置属性”按钮，待页面刷新后，观察测试设备的日志接收情况，这里以 Web Device 模拟设备为例，可以看到 Web Device 模拟设备成功接收到到云端设置属性的消息：<br><img src="/img/LD26.png" alt="img"><br>将模拟设备的 RGBColor 属性值改成（255,255,0），点击“上报”，在右侧可以看到设备上报属性成功的消息：<br><img src="/img/LD27.png" alt="img"><br>这时候我们再刷新应用页面，发现页面也加载到了最新上报的属性值。</p><p>至此，RGB 全彩智能灯的 Web 应用也完毕！</p><p><strong>应用发布</strong><br>由于该功能善未完全实现，将在之后补出</p><p>上面内容大都为搬运官方文档，下面是一张个人总结的简单流程图</p><p><img src="/img/LD28.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>阿里</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap的模态框案例</title>
    <link href="/2018/06/05/2018-06-05-modal/"/>
    <url>/2018/06/05/2018-06-05-modal/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Bootstrap的模态框实现注册登录案例</p><p>1.右上角</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user!=null &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:inline-block;color:white;&quot;</span>&gt;</span>欢迎你，$</span><span class="hljs-template-variable">&#123;user.username&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;User/LogOut&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;注销&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-icon icon-tuichu&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:otherwise</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span><span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#register&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>注册/<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span><span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#login&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:otherwise</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.注册窗口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;register&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:450px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;frm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;hhd()&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lousername&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;6-15位字母或数字&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;radio-inline&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optionsRadiosinline&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">checked</span>&gt;</span> 男<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;radio-inline&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optionsRadiosinline&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span> 女<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>职工号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;至少6位字母或数字&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lopassword&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;至少6位字母或数字&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>再次输入密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;至少6位字母或数字&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>选择列表<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;education&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>大专<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>本科<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>硕士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>博士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>博士后<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>QQ<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qq&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;例如:150XXXXX&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#login&quot;</span>&gt;</span>已有账号？点我登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注册成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> style=<span class="hljs-string">&quot;width:450px&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>                &lt;button <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span>&gt;<br>                    &lt;span&gt;&amp;<span class="hljs-keyword">times</span>;&lt;/span&gt;<br>                &lt;/button&gt;<br>            &lt;/<span class="hljs-keyword">div</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;<br>                &lt;h1 <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;注册成功&lt;br&gt;<span class="hljs-number">3</span>秒后跳转到登录界面&lt;/h1&gt;<br>            &lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>登录窗口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:450px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return login();&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#register&quot;</span>&gt;</span>还没有账号？点我注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring日期转换</title>
    <link href="/2018/05/30/2018-05-30-springdate/"/>
    <url>/2018/05/30/2018-05-30-springdate/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在Controller中对表单提交的数据进行处理时，如果pojo中有Date属性，转换时需要做如下处理</p><p>方法一：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateController</span> </span>&#123;<br><br>    <span class="hljs-meta">@InitBinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">intDate</span>(<span class="hljs-params">WebDataBinder dataBinder</span>)</span>&#123;<br>        dataBinder.addCustomFormatter(<span class="hljs-keyword">new</span> DateFormatter(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;test&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"> User date</span>)</span>&#123;<br>        System.out.println(date);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>  <span class="hljs-meta">@DateTimeFormat</span>(pattern=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> birthday;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">Date</span> <span class="hljs-function"><span class="hljs-title">getBirthday</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> birthday;&#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setBirthday</span>(<span class="hljs-params"><span class="hljs-built_in">Date</span> birthday</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.birthday = birthday;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX实现封装JSON传值到Controller</title>
    <link href="/2018/05/30/2018-05-30-ajax-con/"/>
    <url>/2018/05/30/2018-05-30-ajax-con/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>传统的表单传值方式：<br>在form标签内填写action属性，表单提交到目标地址，表单内各项id与pojo一致，SpringMVC可自动封装为实体型传给Controller处理。</p><p>AJAX传值方式：<br>在form标签内填写onsubmit=”方法名”</p><p>然后function写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hhd</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.event.returnValue = <span class="hljs-literal">false</span>;       <span class="hljs-comment">//禁止表单提交(刷新页面)</span><br><br>    $.ajax(&#123;<br>      type:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>      url:<span class="hljs-string">&#x27;User/Register&#x27;</span>,<br>      data:&#123;<span class="hljs-attr">jsondata</span>:getFormJson()&#125;,<br>      dataType:<span class="hljs-string">&#x27;json&#x27;</span>,<br>      contentType: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>      <span class="hljs-keyword">async</span>:<span class="hljs-literal">false</span>,<br>      success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br><br>      &#125;,<br>      error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br><br>      &#125;<br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(go,<span class="hljs-number">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用getFormJson()方法将表单内信息封装成JSON字符串，该方法比较笨重…</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> get<span class="hljs-constructor">FormJson()</span>&#123;<br>  jsonObj = &#123;&#125;;<br>  jsonObj.username=<span class="hljs-constructor">$(<span class="hljs-string">&quot;#lousername&quot;</span>)</span>.<span class="hljs-keyword">val</span><span class="hljs-literal">()</span>;<br>  jsonObj.gender=<span class="hljs-constructor">$(<span class="hljs-string">&quot;input[name=&#x27;optionsRadiosinline&#x27;]:checked&quot;</span>)</span>.<span class="hljs-keyword">val</span><span class="hljs-literal">()</span>;<br>  jsonObj.password = <span class="hljs-constructor">$(&#x27;#<span class="hljs-params">lopassword</span>&#x27;)</span>.<span class="hljs-keyword">val</span><span class="hljs-literal">()</span>;<br>  return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(jsonObj);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以将表单数据以字符串形式传给后端<br>接下来在Controller中对数据进行解析</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//注册</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/Register&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.POST)</span><br>public void <span class="hljs-constructor">Register(@RequestParam(<span class="hljs-string">&quot;jsondata&quot;</span>)</span> String aa) throws UnsupportedEncodingException&#123;<br>  User user = (User) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONObject</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Bean(JSONObject.<span class="hljs-params">fromObject</span>(<span class="hljs-params">aa</span>)</span>,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span><span class="hljs-keyword">class</span>);  <br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserService</span>.</span></span>add<span class="hljs-constructor">User(<span class="hljs-params">user</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>标明传值方式，将JSON转为POJO</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>智能柜项目中的处理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;count()&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;settlement&quot;</span>&gt;结算&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>标签id不能带杂七杂八的符号…因为在EL表达式中不能调用js变量，采用c：forEach遍历</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> count()&#123;<br>  //添加<span class="hljs-keyword">if</span>判断是否选中该商品，未选中更新为<span class="hljs-number">0</span><br>  var up = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Array</span>();<br>  &lt;c:<span class="hljs-keyword">forEach</span> items=&quot;$&#123;Goods&#125;&quot; var=&quot;good&quot; varStatus=&quot;status&quot;&gt;<br>    var test = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>();var <span class="hljs-keyword">index</span> = $&#123;status.<span class="hljs-keyword">index</span>&#125;;<br>    test.id = $&#123;good.id&#125;;<br>    test.upnum = $(&quot;#listup&quot;+ <span class="hljs-keyword">index</span>).text();<br>    <span class="hljs-keyword">if</span>($(&quot;#check&quot;+<span class="hljs-keyword">index</span>).<span class="hljs-keyword">is</span>(<span class="hljs-string">&#x27;:checked&#x27;</span>)==<span class="hljs-keyword">false</span>)&#123;test.upnum=<span class="hljs-number">0</span>;&#125;<br>    up.push(test);<br>  &lt;/c:<span class="hljs-keyword">forEach</span>&gt;<br><br>  alert(<span class="hljs-type">JSON</span>.stringify(up));<br>  $.ajax(&#123;<br>    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url:<span class="hljs-string">&#x27;User/Count&#x27;</span>,<br>    data:&#123;uplist:<span class="hljs-type">JSON</span>.stringify(up)&#125;,<br>    contentType:&quot;application/x-www-form-urlencoded&quot;,<br>    success:<span class="hljs-keyword">function</span>(data)&#123;<br>      <span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.href=&quot;User/Pay?total=&quot;+<span class="hljs-type">JSON</span>.stringify($(&quot;#AllTotal&quot;).text());  <br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>当AJAX不执行回调函数时，可能的原因为：传送数据格式不符，回传数据格式不符。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echarts 入门</title>
    <link href="/2018/05/25/2018-05-25-echarts/"/>
    <url>/2018/05/25/2018-05-25-echarts/</url>
    
    <content type="html"><![CDATA[<h2 id="项目中的Echarts案例"><a href="#项目中的Echarts案例" class="headerlink" title="项目中的Echarts案例"></a>项目中的Echarts案例</h2><p>一些辅助js函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetQueryString</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span> + name + <span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);<br>    <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">window</span>.location.search.substr(<span class="hljs-number">1</span>).match(reg);<br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(r[<span class="hljs-number">2</span>]); <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bl</span>(<span class="hljs-params">s</span>)</span>&#123;<br><span class="hljs-keyword">return</span> s&lt;<span class="hljs-number">10</span>?<span class="hljs-string">&#x27;0&#x27;</span>+s:s;<br>&#125;<br></code></pre></td></tr></table></figure><p>引入echarts所需的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts-all.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>AJAX异步加载数据，数据用JSON格式传输<br>页面加载完后执行js函数</p><p>(option是echarts的配置项，series是系列列表，可表示有几组数据)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;body onload=&quot;loadData()&quot;&gt;<br>&lt;div id=&quot;myLineDiv&quot; style=&quot;height: 400px; width: 800px;display:inline-block;&quot;&gt;&lt;/div&gt;<br><br>    &lt;script <span class="hljs-keyword">type</span>=&quot;text/javascript&quot;&gt;<br>    &lt;!<span class="hljs-comment">--这个是折线图--&gt;</span><br>    var bdate = GetQueryString(&quot;bdate&quot;);<br>    var edate = GetQueryString(&quot;edate&quot;);<br>    var id = GetQueryString(&quot;id&quot;);<br>    var category = GetQueryString(&quot;category&quot;);<br>    <span class="hljs-keyword">function</span> loadData(<span class="hljs-keyword">option</span>) &#123;<br>        $.ajax(&#123;<br>            <span class="hljs-keyword">type</span> : <span class="hljs-string">&#x27;post&#x27;</span>,  //传输类型<br>            async : <span class="hljs-keyword">false</span>,  //同步执行<br>            url : <span class="hljs-string">&#x27;BarDao?bdate=&#x27;</span>+bdate+&quot;&amp;edate=&quot;+edate+&quot;&amp;id=&quot;+id+&quot;&amp;category=&quot;+category,   <br>            //data : &#123;&#125;,<br>            dataType : <span class="hljs-string">&#x27;json&#x27;</span>, //返回数据形式为<span class="hljs-type">json</span><br>            success : <span class="hljs-keyword">function</span>(result) &#123;<br>                <span class="hljs-keyword">if</span> (result) &#123;<br>                var str = result[<span class="hljs-number">0</span>].time.substring(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>                str = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>(str);   <br>                var now = str.getFullYear()+<span class="hljs-string">&#x27;/&#x27;</span>+(str.getMonth()+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;/&#x27;</span>+str.getDate();<br>                var end = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>(result[result.length<span class="hljs-number">-1</span>].time.substring(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>));<br>                end = +<span class="hljs-keyword">end</span>+<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>;<br>                end = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>(<span class="hljs-keyword">end</span>);<br><br>                var item2 = &#123;<br>                <span class="hljs-type">name</span>:now+<span class="hljs-string">&#x27; 00:00:00&#x27;</span>,<br>                <span class="hljs-keyword">value</span>:<span class="hljs-built_in">new</span> <span class="hljs-keyword">Array</span>(now+<span class="hljs-string">&#x27; 00:00:00&#x27;</span>,<span class="hljs-number">0</span>)<br>                &#125;;<br><br>                //now.setDate(now.getDate()+<span class="hljs-number">1</span>);<br>                var ss = <span class="hljs-keyword">end</span>.getFullYear()+&quot;-&quot;+(<span class="hljs-keyword">end</span>.getMonth()+<span class="hljs-number">1</span>)+&quot;-&quot;+<span class="hljs-keyword">end</span>.getDate();<br>                var item3 = &#123;<br>                <span class="hljs-type">name</span>:ss+<span class="hljs-string">&#x27; 00:00:00&#x27;</span>,<br>                <span class="hljs-keyword">value</span>:<span class="hljs-built_in">new</span> <span class="hljs-keyword">Array</span>(ss+<span class="hljs-string">&#x27; 00:00:00&#x27;</span>,<span class="hljs-number">0</span>)        //造一条的水平线<br><br>                &#125;;<br>                //alert(now+ss);<br>                <span class="hljs-keyword">option</span>.series[<span class="hljs-number">1</span>].data=[];<br>                <span class="hljs-keyword">option</span>.series[<span class="hljs-number">1</span>].data.push(item2);<br>                <span class="hljs-keyword">option</span>.series[<span class="hljs-number">1</span>].data.push(item3);           //加入水平线<br><br>                <span class="hljs-keyword">option</span>.series[<span class="hljs-number">0</span>].data=[];<br>                <span class="hljs-keyword">for</span> (var i=<span class="hljs-number">0</span>; i&lt;result.length; i++) &#123;<br>                //alert(<span class="hljs-string">&#x27;mmp&#x27;</span>);<br>                    var item=&#123;<br>                    <span class="hljs-type">name</span>:result[i].time,<br>                    <span class="hljs-keyword">value</span>:<span class="hljs-built_in">new</span> <span class="hljs-keyword">Array</span>(result[i].time,result[i].data)<br>                    &#125;;<br>                    <span class="hljs-keyword">option</span>.series[<span class="hljs-number">0</span>].data.push(item);<br><br>                &#125;<br>                &#125;<br><br>            &#125;,<br>            error : <span class="hljs-keyword">function</span>(errorMsg) &#123;<br>                alert(&quot;加载数据失败&quot;);<br>            &#125;<br>        &#125;);//AJAX<br>    &#125;//loadData()<br><br>    var myChart = echarts.init(document.getElementById(<span class="hljs-string">&#x27;myLineDiv&#x27;</span>));<br>    var <span class="hljs-keyword">option</span> = &#123;<br>        title: &#123;<br>            <span class="hljs-type">text</span>: <span class="hljs-string">&#x27;当天心率&#x27;</span><br>        &#125;,<br>        tooltip: &#123;<br>            <span class="hljs-keyword">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>            formatter: <span class="hljs-keyword">function</span> (params) &#123;<br>                params = params[<span class="hljs-number">0</span>];<br>                var <span class="hljs-type">date</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>(params.name);<br><br>                <span class="hljs-keyword">return</span> bl(<span class="hljs-type">date</span>.getHours()) + <span class="hljs-string">&#x27;:&#x27;</span> + bl(<span class="hljs-type">date</span>.getMinutes())   + <span class="hljs-string">&#x27; - &#x27;</span> + params.<span class="hljs-keyword">value</span>[<span class="hljs-number">1</span>];<br>            &#125;,<br>            axisPointer: &#123;<br>                animation: <span class="hljs-keyword">false</span><br>            &#125;<br>        &#125;,    <br>        toolbox: &#123;<br>            <span class="hljs-keyword">show</span>: <span class="hljs-keyword">true</span>,<br>            feature: &#123;<br>                dataZoom: &#123;<br>                    yAxisIndex: <span class="hljs-string">&#x27;none&#x27;</span><br>                &#125;,<br>                dataView: &#123;readOnly: <span class="hljs-keyword">false</span>&#125;,<br>                magicType: &#123;<span class="hljs-keyword">type</span>: [<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>]&#125;,<br>                restore: &#123;&#125;,<br>                saveAsImage: &#123;&#125;<br>            &#125;<br>        &#125;,<br>        xAxis :  &#123;<br>            <span class="hljs-keyword">type</span> : <span class="hljs-string">&#x27;time&#x27;</span>,<br>            splitLine:&#123;<br>            <span class="hljs-keyword">show</span>:<span class="hljs-keyword">false</span><br>            &#125;<br>        &#125; ,<br>        yAxis :  &#123;<br>            <span class="hljs-keyword">type</span> : <span class="hljs-string">&#x27;value&#x27;</span>,<br>            boundaryGap:[<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;100%&#x27;</span>],<br>            splitLine:&#123;<br>               <span class="hljs-keyword">show</span>:<span class="hljs-keyword">false</span><br>            &#125;<br>        &#125;,<br>        series : [&#123;        //图表系列<br>            <span class="hljs-type">name</span> : <span class="hljs-string">&#x27;心率&#x27;</span>,<br>            <span class="hljs-keyword">type</span> : <span class="hljs-string">&#x27;line&#x27;</span>,<br>            showSymbol : <span class="hljs-keyword">false</span><br>        //data : data<br>        &#125;,<br>        &#123;<br>        <span class="hljs-type">name</span> : <span class="hljs-string">&#x27;ii&#x27;</span>,<br>        <span class="hljs-keyword">type</span> : <span class="hljs-string">&#x27;line&#x27;</span>,<br>        showSymbol : <span class="hljs-keyword">false</span>,<br>        itemStyle:&#123;normal:&#123;opacity:<span class="hljs-number">0</span>&#125;&#125;,<br>        lineStyle:&#123;normal:&#123;opacity:<span class="hljs-number">0</span>&#125;&#125;<br>        &#125;]<br>    &#125;;<br>    //加载数据到<span class="hljs-keyword">option</span><br>    loadData(<span class="hljs-keyword">option</span>);<br>    //设置<span class="hljs-keyword">option</span><br>    myChart.setOption(<span class="hljs-keyword">option</span>);<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>Controller里的BarDao</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;BarDao&quot;</span>)</span><br>public @ResponseBody JSONArray <span class="hljs-constructor">BarDao(String <span class="hljs-params">bdate</span>,String <span class="hljs-params">edate</span>,String <span class="hljs-params">id</span>,String <span class="hljs-params">category</span>,Model <span class="hljs-params">model</span>)</span>&#123;<br>  String table = id+<span class="hljs-character">&#x27;_&#x27;</span>+category;;<br>  String barArr = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BarService</span>.</span></span>queryby(table,category,bdate,edate);<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print(barArr);<br>  JSONArray json = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONArray</span>.</span></span>from<span class="hljs-constructor">Object(<span class="hljs-params">barArr</span>)</span>;<br>  return json;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义404页面</title>
    <link href="/2018/05/23/2018-05-23-404/"/>
    <url>/2018/05/23/2018-05-23-404/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>编写web.xml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;error-page&gt;</span><br>  <span class="hljs-params">&lt;error-code&gt;</span><span class="hljs-number">404</span><span class="hljs-params">&lt;/error-code&gt;</span><br>  <span class="hljs-params">&lt;location&gt;</span><span class="hljs-meta-keyword">/error/</span><span class="hljs-number">404.</span>html<span class="hljs-params">&lt;/location&gt;</span><br><span class="hljs-params">&lt;/error-page&gt;</span><br></code></pre></td></tr></table></figure><p>GG.</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于表单提交的一些细节</title>
    <link href="/2018/05/23/2018-05-23-submit/"/>
    <url>/2018/05/23/2018-05-23-submit/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>背景：在写表单提交信息时，遇见两种不同的方式。  </p><ol><li>用form的形式，提交按钮设置为input submit/button类型，在form标签下写action，点击时表单提交，执行action。  </li><li>用form/div的形式，提交按钮用button类型(有别于input button)，设置button的id，在javascript添加其onclick方法，以dom获取表单中的数据，ajax异步回传数据。该方法适用于登录时需要处理比对数据库中数据~  </li></ol><p>PS：遇到ajax不执行回调函数的情况，在网上找到原因及解决方法。  </p><p>在form表单提交时，会刷新页面，验证尚未成功，导致data丢失。<br>如何阻止表单自动刷新？  </p><ol><li>将<form>改为<div>  </li><li>在<form>中添加 onsubmit=”return login();”而非在按钮中添加方法。  </li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSP调用本地图片</title>
    <link href="/2018/05/23/2018-05-23-jsp4jpg/"/>
    <url>/2018/05/23/2018-05-23-jsp4jpg/</url>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在做瀑布流时，存储图片在服务器内部时，重启tomcat会导致文件丢失，因而需要把图片存在本地路径下，于是在访问时遇到了问题。</p><p>当JSP中需要访问本地图片时，普通的访问方式&lt;img src=”D:/…”&gt;无法取到，因为在页面解析时，路径是从当前项目工程目录下寻找，所以需要配置虚拟路径。</p><p>步骤：</p><p>1.进到tomcat安装目录下，找到conf文件夹中的server.xml文件</p><p>2.在eclipse中访问Servers中tomcat里的server.xml文件</p><p>3.在两个server.xml中执行同样的操作，在<host></host>里面加入如下代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Context <span class="hljs-attribute">docBase</span>=<span class="hljs-string">&quot;D:\pubufiles\&quot; path=&quot;</span>/pubufiles&quot; <span class="hljs-attribute">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/jsp4jpg1.jpg" alt="img"></p><p>即可在JSP页面内，直接通过/pubufiles访问D盘pubufiles下的图片了。<br><img src="/img/jsp4jpg2.jpg" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html中隐藏域hidden的作用</title>
    <link href="/2018/05/13/2018-05-13-hidden/"/>
    <url>/2018/05/13/2018-05-13-hidden/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该篇内容转载自<a href="http://www.jb51.net/web/100210.html">http://www.jb51.net/web/100210.html</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>基本语法：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;field＿name&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>作用：</strong></p><p>1 隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器。</p><p>2 有些时候我们要给用户一信息，让他在提交表单时提交上来以确定用户身份，如sessionkey，等等．当然这些东西也能用cookie实现，但使用隐藏域就简单的多了．而且不会有浏览器不支持，用户禁用cookie的烦恼。</p><p>3 有些时候一个form里有多个提交按钮，怎样使程序能够分清楚到底用户是按那一个按钮提交上来的呢？我们就可以写一个隐藏域，然后在每一个按钮处加上onclick=”document.form.command.value=”xx””然后我们接到数据后先检查command的值就会知道用户是按的那个按钮提交上来的。</p><p>4 有时候一个网页中有多个form，我们知道多个form是不能同时提交的，但有时这些form确实相互作用，我们就可以在form中添加隐藏域来使它们联系起来。</p><p>5 javascript不支持全局变量，但有时我们必须用全局变量，我们就可以把值先存在隐藏域里，它的值就不会丢失了。</p><p>6 还有个例子，比如按一个按钮弹出四个小窗口，当点击其中的一个小窗口时其他三个自动关闭．可是IE不支持小窗口相互调用，所以只有在父窗口写个隐藏域，当小窗口看到那个隐藏域的值是close时就自己关掉。</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于mybatis的一些知识点</title>
    <link href="/2018/05/13/2018-05-13-mybatis01/"/>
    <url>/2018/05/13/2018-05-13-mybatis01/</url>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>又可以更博了，突然有点开始思考自己这样弄一个博客的意义所在，因为自己的水平实在有限，想借此方式得以提升，然而之前因为一些知识点在网上有很优秀讲述以及时间的因素，博客的大部分内容都是拼拼凑凑而成，虽然自己有对那些内容进行认真的阅读和记忆，但还是感觉不太合适，缺少了自己的思考和总结，所以会尽力在接下来的更博里多一点自己的东西，而网上的文献为辅，得以更好的进步。  </p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>该篇记录自己在之前的项目练习中遇到的一些mybatis相关的知识点，加深自己对这个框架的认知，简由三部分构成。</p><p>1.SqlSessionFactory和SqlSession介绍和运用<br>2.resultmap和resulttype的区别和使用<br>3.传递参数的多种方式<br>4.parameterType的用法  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>1.SqlSessionFactory和SqlSession介绍和运用</p><p>在Spring和MyBatis的结合中，使用SqlSessionFactoryBean代替原先的SqlSessionBuilder创建SqlSessionFactory。<br>原先要在Dao层中新建SqlSeesion来调用Sql语句，现在只需要使用如下配置即可自动完成操作，配置中以有详细注释。  </p><p>在Spring-mybatis.xml中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 自动扫描mapping.xml文件  + mybatis 核心配置文件！与pagehelper有关--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/mapping/*.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlConfig.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.IDao&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>sqlConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置分页插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置数据库类型Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库--&gt;</span>       <br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.resultmap和resulttype的区别和使用</p><p>虽然Dao，Mapper，Pojo是由MyBatis Generator自动创建的，但还是会手动在Mapper.xml中添加一些操作，所以简单讲述一下其中的一些小细节。<br>resultType：查询的结果对应相应的pojo中的字段，最适用于单表查询。<br>resultMap： 数据库表中的字段和pojo不对应时使用，使用时需要定义resultMap。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;resultMap <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> type=<span class="hljs-string">&quot;com.domain.Person&quot;</span> &gt;<br>  &lt;<span class="hljs-built_in">id</span> column=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;id&quot;</span> jdbcType=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;<br>  &lt;<span class="hljs-literal">result</span> column=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;ip&quot;</span> jdbcType=<span class="hljs-string">&quot;VARCHAR&quot;</span> /&gt;<br>  &lt;<span class="hljs-literal">result</span> column=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;name&quot;</span> jdbcType=<span class="hljs-string">&quot;VARCHAR&quot;</span> /&gt;<br>  ...<br>&lt;/resultMap&gt;<br></code></pre></td></tr></table></figure><p>在一对一表连接时，通常在主表pojo中嵌套另一个表的pojo，然后在mapper.xml中采用association节点元素对另一个表连接处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 订单查询关联用户的resultMap  </span><br><span class="hljs-comment">    将整个查询的结果映射到cn.itcast.mybatis.po.Orders中  </span><br><span class="hljs-comment">     --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.itcast.mybatis.po.Orders&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrdersUserResultMap&quot;</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- 配置映射的订单信息 --&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- id：指定查询列中的唯 一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id  </span><br><span class="hljs-comment">            column：订单信息的唯 一标识 列  </span><br><span class="hljs-comment">            property：订单信息的唯 一标识 列所映射到Orders中哪个属性  </span><br><span class="hljs-comment">          --&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;number&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;createtime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createtime&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;note&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">note/</span>&gt;</span>  <br><br>        <span class="hljs-comment">&lt;!-- 配置映射的关联的用户信息 --&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- association：用于映射关联查询单个对象的信息  </span><br><span class="hljs-comment">        property：要将关联查询的用户信息映射到Orders中哪个属性  </span><br><span class="hljs-comment">         --&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user&quot;</span>  <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;cn.itcast.mybatis.po.User&quot;</span>&gt;</span>  <br>            <span class="hljs-comment">&lt;!-- id：关联查询用户的唯 一标识  </span><br><span class="hljs-comment">            column：指定唯 一标识用户信息的列  </span><br><span class="hljs-comment">            javaType：映射到user的哪个属性  </span><br><span class="hljs-comment">             --&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span>  <br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>在一对多的连接方式中，如订单表和订单明细表一对多，为避免出现重复，在订单表数据的pojo中添加一个list，list中为订单明细表的属性，在mapper.xml中如下处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!-- 订单及订单明细的resultMap  <br>    使用<span class="hljs-keyword">extends</span>继承，不用在中配置订单信息和用户信息的映射  <br>     --&gt;  <br>    &lt;resultMap type=<span class="hljs-string">&quot;cn.itcast.mybatis.po.Orders&quot;</span> id=<span class="hljs-string">&quot;OrdersAndOrderDetailResultMap&quot;</span> <span class="hljs-keyword">extends</span>=<span class="hljs-string">&quot;OrdersUserResultMap&quot;</span>&gt;  <br>        &lt;!-- 订单信息 --&gt;  <br>        &lt;!-- 用户信息 --&gt;  <br>        &lt;!-- 使用<span class="hljs-keyword">extends</span>继承，不用在中配置订单信息和用户信息的映射 --&gt;  <br>        &lt;!-- 订单明细信息  <br>        一个订单关联查询出了多条明细，要使用collection进行映射  <br>        collection：对关联查询到多条记录映射到集合对象中  <br>        property：将关联查询到多条记录映射到cn.itcast.mybatis.po.Orders哪个属性  <br>        ofType：指定映射到list集合属性中pojo的类型  <br>         --&gt;  <br>         &lt;collection property=<span class="hljs-string">&quot;orderdetails&quot;</span> ofType=<span class="hljs-string">&quot;cn.itcast.mybatis.po.Orderdetail&quot;</span>&gt;  <br>            &lt;!-- id：订单明细唯 一标识  <br>            property:要将订单明细的唯 一标识 映射到cn.itcast.mybatis.po.Orderdetail的哪个属性  <br>              --&gt;  <br>            &lt;id column=<span class="hljs-string">&quot;orderdetail_id&quot;</span> property=<span class="hljs-string">&quot;id&quot;</span>/&gt;  <br>            &lt;result column=<span class="hljs-string">&quot;items_id&quot;</span> property=<span class="hljs-string">&quot;itemsId&quot;</span>/&gt;  <br>            &lt;result column=<span class="hljs-string">&quot;items_num&quot;</span> property=<span class="hljs-string">&quot;itemsNum&quot;</span>/&gt;  <br>            &lt;result column=<span class="hljs-string">&quot;orders_id&quot;</span> property=<span class="hljs-string">&quot;ordersId&quot;</span>/&gt;  <br>         &lt;/collection&gt;  <br>    &lt;/resultMap&gt;  <br></code></pre></td></tr></table></figure><p>3.Mapper传递参数<br>对于复杂的查询，需要传递参数时，可采用下面两种方式<br>第一种：适用于参数&lt;=5时，@Param注解</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> List&lt;<span class="hljs-keyword">Role</span>&gt; findA(@Param(&quot;roleName&quot;)String roleName,@Param(&quot;note&quot;)String note);//接口  <br><br>&lt;<span class="hljs-keyword">select</span> id=&quot;findA&quot; resultMap=&quot;roleMap&quot;&gt;  <br>    <span class="hljs-keyword">SELECT</span>  <br>    id,role_name,note <span class="hljs-keyword">FROM</span> t_role  <br>    <span class="hljs-keyword">WHERE</span> role_name <span class="hljs-keyword">like</span> concat  <br>    (<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;roleName&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)  <br>    <span class="hljs-keyword">and</span> note <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;note&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)  <br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>第二种：参数&gt;=5时建议用JavaBean</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;select id=<span class="hljs-string">&quot;findA&quot;</span> parametertype=<span class="hljs-string">&quot;com.learn.params.RoleParam&quot;</span> resultMap=<span class="hljs-string">&quot;roleMap&quot;</span>&gt;  <br>    SELECT  <br>    id,role_name,note FROM t_role  <br>    WHERE role_name like concat  <br>    (<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;roleName&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)  <br>    <span class="hljs-keyword">and</span> note like <span class="hljs-built_in">concat</span>(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;note&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)  <br>&lt;/select&gt;  <br><br><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-built_in">findA</span>(RoleParam roleParam);<span class="hljs-comment">//接口  </span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleParam</span> &#123;</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> roleName;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> note;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getRoleName</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> roleName;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getNote</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> note;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleName</span><span class="hljs-params">(<span class="hljs-keyword">String</span> roleName)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.roleName = roleName;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNote</span><span class="hljs-params">(<span class="hljs-keyword">String</span> note)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.note = note;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>parameterType为输入参数，在配置的时候，配置相应的输入参数类型即可<br><strong>基本数据类型</strong>：包含int,String,Date等。<br>通过#{参数名}，只能传入一个参数；通过#{0}、#{1}……索引方式，可以传入多个参数；如果通过#{参数名}传多个值，又不想使用索引方式，可以使用@param()注解。<br><strong>复杂数据类型</strong>：包含JAVA实体类、Map。<br>通过#{属性名}或#{map的KeyName}即可获取传入的值。</p><p><strong>关于#{}与${}的区别</strong></p><p>1.#{}拿到值之后，拼装sql，会自动对值添加引号” ，推荐使用这种方式，因为它能很大程度地防止sql注入。<br>2.${}则把拿到的值直接拼装进sql，如果需要加单引号”，必须手动添加，一般用于动态传入表名或字段名使用，同时需要添加属性statementType=”STATEMENT”，使用非预编译模式。可用于对表名的传参。</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端预备小知识</title>
    <link href="/2018/05/01/2018-05-01-front/"/>
    <url>/2018/05/01/2018-05-01-front/</url>
    
    <content type="html"><![CDATA[<h2 id="JS同步和异步"><a href="#JS同步和异步" class="headerlink" title="JS同步和异步"></a>JS同步和异步</h2><p>Javascript语言的执行环境是”单线程”（single thread）。<br>所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。    </p><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。  </p><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。<br>“异步模式”编程的4种方法<br>一、回调函数  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">callback</span>)</span>&#123;<br><br>　　　　<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>　　　　　　<span class="hljs-comment">// f1的任务代码</span><br><br>　　　　　　callback();<br><br>　　　　&#125;, <span class="hljs-number">1000</span>);<br><br>　　&#125;<br></code></pre></td></tr></table></figure><p>二、事件监听<br>三、发布/订阅<br>四、Promises对象</p><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>是一套封装JS的框架，就是用JS更加方便的查询和控制页面控件。<br>它支持JS的常规操作以及一些扩展，比如图形等，对JSON格式也能很好的解析，ajax也做了封装，语法也比较简单。很强大。</p><p>对比：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">JS:</span>       document.getElementByID(<span class="hljs-string">&quot;control_id&quot;</span>)<br><span class="hljs-symbol">jQuery:</span>   $(<span class="hljs-string">&quot;control_id&quot;</span>)<br></code></pre></td></tr></table></figure><p>jQuery优势~</p><p>1).轻量级<br>2).强大的选择器<br>3).出色的DOM操作封装<br>4).可靠的事件处理机制<br>5).出色的浏览器兼容性<br>6).完善的Ajax支持<br>7).出色的浏览器兼容性等<br>8).jQuery理念：写的少，做的多</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>异步的JS+XML，可以实现在不刷新页面的情况下对页面某部分进行更新。<br>－同步交互：就是最常见的click-refresh模式，点一个连接或提交一个表单，然后就必须重载整个页面<br>－异步交互：提交请求返回对象是不可见的层，通过javascripts根据返回数据，不刷新页面而改变当前页面的显示，例如：新浪微博，百度地图</p><p>省略常规JS用法 <a href="https://blog.csdn.net/akkzhjj/article/details/17421497/">(五步，使用XMLHTTPRequest对象异步交互客户端)</a></p><p>ajax()方法通过HTTP请求加载远程数据。<br>该方法是jQuery底层AJAX实现。<a href="https://www.cnblogs.com/tylerdonet/p/3520862.html">参数详解点这里~</a></p><p>案例代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;#send&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>         $.ajax(&#123;<br>             type: <span class="hljs-string">&quot;GET&quot;</span>,<br>             url: <span class="hljs-string">&quot;test.json&quot;</span>,<br>             data: &#123;<span class="hljs-attr">username</span>:$(<span class="hljs-string">&quot;#username&quot;</span>).val(), <span class="hljs-attr">content</span>:$(<span class="hljs-string">&quot;#content&quot;</span>).val()&#125;,<br>             dataType: <span class="hljs-string">&quot;json&quot;</span>,<br>             success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                         $(<span class="hljs-string">&#x27;#resText&#x27;</span>).empty();   <span class="hljs-comment">//清空resText里面的所有内容</span><br>                         <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&#x27;</span>;<br>                         $.each(data, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">commentIndex, comment</span>)</span>&#123;<br>                               html += <span class="hljs-string">&#x27;&lt;div class=&quot;comment&quot;&gt;&lt;h6&gt;&#x27;</span> + comment[<span class="hljs-string">&#x27;username&#x27;</span>]<br>                                         + <span class="hljs-string">&#x27;:&lt;/h6&gt;&lt;p class=&quot;para&quot;&#x27;</span> + comment[<span class="hljs-string">&#x27;content&#x27;</span>]<br>                                         + <span class="hljs-string">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>                         &#125;);<br>                         $(<span class="hljs-string">&#x27;#resText&#x27;</span>).html(html);<br>                      &#125;<br>         &#125;);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JavaScript 对象表示法（JavaScript Object Notation），是存储和交换文本信息的语法。类似 XML，它比XML 更小、更快，更易解析。  </p><p>JSON 键值对是用来保存 JS 对象的一种方式，和 JS 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：<br>{“firstName”: “Json”}<br>这很容易理解，等价于这条 JavaScript 语句：<br>{firstName : “Json”}  </p><p><a href="https://blog.csdn.net/xujie3/article/details/52954940">JS操作JSON常用方法~</a></p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM可以看做节点，通过DOM可以改变网页。<a href="https://www.zhihu.com/question/34219998/answer/58211568">详请点击</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于$(function() {})</title>
    <link href="/2018/04/28/2018-04-28-jqready/"/>
    <url>/2018/04/28/2018-04-28-jqready/</url>
    
    <content type="html"><![CDATA[<h2 id="文档就绪函数"><a href="#文档就绪函数" class="headerlink" title="文档就绪函数"></a>文档就绪函数</h2><p>所有 jQuery 函数位于一个 document ready 函数中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>--- jQuery functions go here ----<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。  </p><p>如果在文档没有完全加载之前就运行函数，操作可能失败。下面是两个具体的例子：  </p><p>试图隐藏一个不存在的元素<br>获得未完全加载的图像的大小  </p><p>它的缩写形式为</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;);  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取url的几种方式</title>
    <link href="/2018/04/28/2018-04-08-geturl/"/>
    <url>/2018/04/28/2018-04-08-geturl/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简单总结获取url的几种方式（其实是个搬运工…）</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先是 <strong>Servlet</strong> 获取URL地址。在HttpServletRequest类里，有以下六个取URL的函数：  </p><p>getScheme  //输出: http<br>getServerName  //输出： localhost<br>getServerPort  //输出： 8080<br>getContextPath 取得项目名<br>getServletPath 取得Servlet名<br>getPathInfo 取得Servlet后的URL名，不包括URL参数<br>getRequestURL 取得不包括参数的URL<br>getRequestURI 取得不包括参数的URI，即去掉协议和服务器名的URL</p><p><img src="/img/geturl.png" alt="img"></p><p>相对应的函数的值如下：</p><p>getContextPath：/ServletTest<br>getServletPath：/main<br>getPathInfo：/index/testpage/test<br>getRequestURL：<a href="http://localhost:8080/ServletTest/main/index/testpage/test">http://localhost:8080/ServletTest/main/index/testpage/test</a><br>getRequestURI：/ServletTest/main/index/testpage/test</p><p>然后是 <strong>js</strong> 中获取url地址。</p><p>1、window.location.href(设置或获取整个 URL 为字符串)</p><p>2、window.location.protocol(设置或获取 URL 的协议部分)</p><p>3、window.location.host(设置或获取 URL 的主机部分)</p><p>4、window.location.port(设置或获取与 URL 关联的端口号码)</p><p>5、window.location.pathname(设置或获取与 URL 的路径部分（就是文件地址）)</p><p>6、window.location.search(设置或获取 href 属性中跟在问号后面的部分)<br>PS：获得查询（参数）部分，除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相信应的参数值。</p><p>7、window.location.hash(设置或获取 href 属性中在井号“#”后面的分段)</p><p>8、js获取url中的参数值（<strong>很重要！！！</strong>）<br>8.1 正则法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getQueryString</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="hljs-string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>);<br>  <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">window</span>.location.search.substr(<span class="hljs-number">1</span>).match(reg);<br>  <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(r[<span class="hljs-number">2</span>]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// 这样调用：</span><br>alert(GetQueryString(<span class="hljs-string">&quot;参数名1&quot;</span>));<br><br>alert(GetQueryString(<span class="hljs-string">&quot;参数名2&quot;</span>));<br><br>alert(GetQueryString(<span class="hljs-string">&quot;参数名3&quot;</span>));<br></code></pre></td></tr></table></figure><p>8.2 split拆分法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> GetRequest() &#123;<br>  var url = location.search; <span class="hljs-regexp">//</span>获取url中<span class="hljs-string">&quot;?&quot;</span>符后的字串<br>  var theRequest = new Object();<br>  <span class="hljs-keyword">if</span> (url.indexOf(<span class="hljs-string">&quot;?&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>    var str = url.substr(<span class="hljs-number">1</span>);<br>    strs = str.split(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">for</span>(var i = <span class="hljs-number">0</span>; i &lt; strs.length; i ++) &#123;<br>      theRequest[strs[i].split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">0</span>]] = unescape(strs[i].split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>]);<br>    &#125;<br>  &#125;<br>  return theRequest;<br>&#125;<br>var Request = new Object();<br>Request = GetRequest();&lt;br&gt;<span class="hljs-regexp">//</span> var id=Request[<span class="hljs-string">&quot;id&quot;</span>];<br><span class="hljs-regexp">//</span> var 参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>,参数<span class="hljs-number">3</span>,参数N;<br><span class="hljs-regexp">//</span> 参数<span class="hljs-number">1</span> = Request[<span class="hljs-string">&#x27;参数1&#x27;</span>];<br><span class="hljs-regexp">//</span> 参数<span class="hljs-number">2</span> = Request[<span class="hljs-string">&#x27;参数2&#x27;</span>];<br><span class="hljs-regexp">//</span> 参数<span class="hljs-number">3</span> = Request[<span class="hljs-string">&#x27;参数3&#x27;</span>];<br><span class="hljs-regexp">//</span> 参数N = Request[<span class="hljs-string">&#x27;参数N&#x27;</span>];<br></code></pre></td></tr></table></figure><p>8.3 单个参数获取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> GetRequest() &#123;<br>  var url = location.search; <span class="hljs-regexp">//</span>获取url中<span class="hljs-string">&quot;?&quot;</span>符后的字串<br>  <span class="hljs-keyword">if</span> (url.indexOf(<span class="hljs-string">&quot;?&quot;</span>) != -<span class="hljs-number">1</span>) &#123;  <span class="hljs-regexp">//</span>判断是否有参数<br>   var str = url.substr(<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span>从第一个字符开始 因为第<span class="hljs-number">0</span>个是?号 获取所有除问号的所有符串<br>   strs = str.split(<span class="hljs-string">&quot;=&quot;</span>);  <span class="hljs-regexp">//</span>用等号进行分隔 （因为知道只有一个参数 所以直接用等号进分隔 如果有多个参数 要用&amp;号分隔 再用等号进行分隔）<br>   alert(strs[<span class="hljs-number">1</span>]);     <span class="hljs-regexp">//</span>直接弹出第一个参数 （如果有多个参数 还要进行循环的）<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>ps：额外增加一个知识点</p><p>关于JSP中<base href="<%=basePath%>">的作用：</p><p>为页面上所有相对 URL 规定基准 URL，采用绝对路径的方式。</p><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>结.</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>页面跳转</title>
    <link href="/2018/04/28/2018-04-28-jump/"/>
    <url>/2018/04/28/2018-04-28-jump/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简单总结一下有关页面跳转的知识点，以后也会将类似的小知识放到博客里来方便自己翻阅。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>在JSP中</strong></p><p>常见的几种跳转方式：<br>1.href超链接标记</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;new.jsp&quot;</span>&gt;</span>跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.使用js完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可以在JavaScript代码里写提交表单的写法</span><br>&lt;scripttype=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;  <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">submit</span>(<span class="hljs-params"></span>) </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;queryFunction&quot;</span>)</span>)</span> &#123;  <br>      action=<span class="hljs-string">&quot;new.jsp&quot;</span>;  <br>      method=<span class="hljs-string">&quot;post&quot;</span>;  <br>      ubmit();<br>    &#125;  <br>&#125;  <br>&lt;/script &gt;<br><span class="hljs-comment">//也可以直接定位, 给window.location属性赋值,而不提交表单</span><br>&lt;script  type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;  <br>  <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">go</span> </span>&#123;  <br>      <span class="hljs-built_in">window</span>.self.location = <span class="hljs-string">&quot;new.jsp”;  </span><br><span class="hljs-string">  &#125;  </span><br><span class="hljs-string">&lt;/script &gt;  </span><br></code></pre></td></tr></table></figure><p>3.表单提交完成跳转</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">&lt;form name=<span class="hljs-string">&quot;form1&quot;</span>method=<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span> action=<span class="hljs-string">&quot;new.jsp&quot;</span>&gt;...&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>4.使用response对象,为Jsp的内置对象</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//直接使用sendRedirect()重定向, 重定向后在浏览器地址栏上会出现重定向页面的URL.代码:  </span><br>&lt;%  <br>  response.sendRedirect(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>  <span class="hljs-keyword">return</span>;        <br>%&gt;<br><span class="hljs-comment">//使用setHeader()方法,直接修改地址栏来实现页面的重定向</span><br>&lt;%  <br>  response.setHeader(<span class="hljs-string">&quot;Refresh&quot;</span>,<span class="hljs-string">&quot;1;url=http://www.baidu.com&quot;</span>);        <br>%&gt;<br></code></pre></td></tr></table></figure><p>5.使用requestDispatcher类</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">RequestDispatcher  rd = <span class="hljs-built_in">request</span>.getRequestDispatcher(<span class="hljs-string">&quot;目标页面&quot;</span>);  <br>rd.forward(<span class="hljs-built_in">response</span>,<span class="hljs-built_in">request</span>);  <br></code></pre></td></tr></table></figure><p>调用ServletContext的getRequestDispatcher(String path)方法，path参数指定目标组件的路径。<br>调用ServletRequest的getRequestDispatcher(String path)方法与上一个方式的区别在于，前者的path参数必须是绝对路径，而后者的path参数可以是绝对路径，也可以是相对路径。所谓绝对路径，就是指以符号”/“开头的路径，”/“表示当前web应用的URL入口。</p><p><strong>敲重点！！JSP中获取绝对路径的方式！！</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;pageContext.request.contextPath&#125;</span><br><span class="hljs-regexp">//</span>等价于&lt;%=request.getContextPath()%&gt;或者可以说是它的EL版<br></code></pre></td></tr></table></figure><p><strong>在Servlet中</strong>  </p><p>请求重定向和请求转发的语句为：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">request</span><span class="hljs-selector-class">.getRequestDispatcher</span>(<span class="hljs-string">&quot;new.jsp&quot;</span>)<span class="hljs-selector-class">.forward</span>(request, response);<span class="hljs-comment">//转发到new.jsp</span><br><span class="hljs-selector-tag">response</span><span class="hljs-selector-class">.sendRedirect</span>(<span class="hljs-string">&quot;new.jsp&quot;</span>);<span class="hljs-comment">//重定向到new.jsp</span><br></code></pre></td></tr></table></figure><p>在这里需要对两者的区别略做解释，重定向是客户端行为，转发是服务器行为。</p><p>重定向是两次request，第一次，客户端request   A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。  </p><p>请求转发是服务器内部把对一个request/response的处理权，移交给另外一个  </p><p>对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于SpringMVC的一些知识点</title>
    <link href="/2018/04/24/2018-04-24-springmvc/"/>
    <url>/2018/04/24/2018-04-24-springmvc/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>嗯..该篇的内容是东拼西凑而来的…但是我都认认真真地看明白了~  </p><p>使用Spring时，当浏览器有请求时。所有请求Spring都会让DispatcherServlet拦截然后根据配置转发给对用的处理器（controller）去处理。DispatcherServlet实际上就是一个servlet。所有如果使用Spring我们首先需要在web.xml里配置servlet  DispatcherServlet 。DispatcherServlet处理的请求必须在同一个web.xml文件里使用url-mapping定义映射。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring MVC servlet --&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <br>          <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <br>          <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">async-supported</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">async-supported</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringMVC-基于注解的控制器"><a href="#SpringMVC-基于注解的控制器" class="headerlink" title="SpringMVC - 基于注解的控制器"></a>SpringMVC - 基于注解的控制器</h2><p><strong>SpringMVC</strong> 是一个基于DispatcherServlet的MVC框架，每个请求最先访问的是DispatcherServlet，DispatcherServlet负责将每一个Request转发到相应的Handler，Handler处理后再返回相应的模型（Model）和视图（View）。在使用注解的Spring MVC中，处理器Handler是基于@Controller和@RequestMapping两个注解的，这两个注解可以提供 <strong>非常灵活</strong> 的匹配和处理方式。</p><p>@Controller和@RequestMapping注解</p><p>Controller注解类型<br>声明一个控制器类，Spring使用扫描机制来找到应用程序中所有基于注解的控制器类，控制器类的内部包含每个动作相应的处理方法，如下是一个@Controller的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;<br>...<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> </span>&#123;<br>    <span class="hljs-comment">//request-handling methods here</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为了保证Spring能扫描到控制器类，需要完成两个配置，首先要在Spring MVC的配置文件中声明Spring-context如下所示：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">&lt;beans<br>    ...<br>    xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>    ...<br>&gt;<br></code></pre></td></tr></table></figure><p>其次需要应用<component-scan/>元素，在该元素中指定控制器类的基本包。例如所有的控制器类都在com.example.controller及其子包下，则该元素如下：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">&lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">component</span>-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.example.controller&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>RequestMapping注解类型<br>该注解类型在控制器类的内部定义每一个动作相应的处理方法，一个采用@RequestMapping注释的方法将成为一个请求处理方法，并由调度程序在接收到对应的URL请求时调用，下面是一个RequestMapping注解方法的控制器类。  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.controller;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMethod;<br>...<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value=<span class="hljs-meta-string">&quot;/productInput&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String inputProduct()&#123;<br>        <span class="hljs-comment">//do something here</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ProductForm&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用RequestMapping注解的value属性将URL映射到方法，在如上的例子中，我们将productInput映射到inputProduct()方法，通过<a href="http://localhost:8081/SpringMVC/productInput%E8%AE%BF%E9%97%AEinputProduct%E6%96%B9%E6%B3%95%E3%80%82RequestMapping%E6%96%B9%E6%B3%95%E9%99%A4%E4%BA%86%E6%9C%89value%E5%B1%9E%E6%80%A7%E5%A4%96%EF%BC%8C%E8%BF%98%E6%9C%89method%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%AF%A5%E5%B1%9E%E6%80%A7%E7%94%A8%E6%9D%A5%E6%8C%87%E7%A4%BA%E8%AF%A5%E6%96%B9%E6%B3%95%E4%BB%85%E5%A4%84%E7%90%86%E5%93%AA%E4%BA%9Bhttp%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BE%8B%E5%A6%82%EF%BC%8C%E4%BB%85%E5%BD%93HTTP">http://localhost:8081/SpringMVC/productInput访问inputProduct方法。RequestMapping方法除了有value属性外，还有method属性，该属性用来指示该方法仅处理哪些http方法，例如，仅当HTTP</a> POST或PUT方法时，调用下面的processOrder方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">&quot;/order_process&quot;</span>, method=&#123;RequestMethod.POST, RequestMethod.PUT&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">processOrder</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//do something here</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OrderForm&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果method属性只有一个HTTP方法值，则无需{},直接为method=RequestMethod.POST，如果未指定method属性，则请求处理方法可以处理任意HTTP方法。此外RequestMapping注释类型也可以用来注释一个控制器类，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br>...<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value=<span class="hljs-meta-string">&quot;/customer&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerController</span></span>&#123;<br>    <span class="hljs-meta">@RequestMapping(value=<span class="hljs-meta-string">&quot;/delete&quot;</span>, method=&#123;RequestMethod.POST, RequestMethod.PUT&#125;)</span><br>    <span class="hljs-keyword">public</span> String deleteCustomer()&#123;<br>        <span class="hljs-comment">//do something here</span><br>        <span class="hljs-keyword">return</span> ...;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>RequestParam注解类型<br>通过该注解可以轻松的将URL中的参数绑定到处理函数方法的变量中，就是跳转到该方法的时候把参数带过来！很好用！</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;userInfo&quot;</span>)</span><br>  public String get<span class="hljs-constructor">Users(@RequestParam(<span class="hljs-params">value</span>=<span class="hljs-string">&quot;pn&quot;</span>,<span class="hljs-params">defaultValue</span>=<span class="hljs-string">&quot;1&quot;</span>)</span>Integer pn,Model model)&#123;<br>      <span class="hljs-comment">//从第一条开始 每页查询五条数据</span><br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">pn</span>, 5)</span>;<br>      List&lt;User&gt; users = userService.find<span class="hljs-constructor">All()</span>;<br>      <span class="hljs-comment">//将用户信息放入PageInfo对象里</span><br>  PageInfo page = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PageInfo(<span class="hljs-params">users</span>,5)</span>;<br><br>      model.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;pageInfo&quot;</span>, <span class="hljs-params">page</span>)</span>;<br>      return <span class="hljs-string">&quot;allUser&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="续"><a href="#续" class="headerlink" title="续"></a>续</h2><p>在Controller中返回JSON数据时，应添加@RequestBody</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/MyCheck&quot;</span>)</span><br>public @ResponseBody JSONObject <span class="hljs-constructor">MyCheck(String <span class="hljs-params">username</span>,String <span class="hljs-params">password</span>,HttpSession <span class="hljs-params">session</span>)</span> &#123;<br>  User user = UserService.<span class="hljs-constructor">CheckLoginAndPwd(<span class="hljs-params">username</span>,<span class="hljs-params">password</span>)</span>;<br>  session.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-params">user</span>)</span>;<br>  JSONObject json=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONObject</span>.</span></span>from<span class="hljs-constructor">Object(<span class="hljs-params">user</span>)</span>;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(json);<br>  return json;<br>&#125;<br><span class="hljs-comment">//此方法返回的是json对象</span><br></code></pre></td></tr></table></figure><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>哦了，关于应用就不做搬运了，之前的两个案例里满满的都是~</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM 框架实现简单CURD</title>
    <link href="/2018/04/24/2018-04-24-ssm2/"/>
    <url>/2018/04/24/2018-04-24-ssm2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过借chao鉴xi网上的教程，将之前的入门案例改造，实现基本的增删改查功能，并加深自己对SSM框架的理解，下面做简单复盘。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>1.在dao层和service层中添加findAll()方法，为之后的CRUD功能做铺垫。<br>2.重点！敲黑板！！在UserControleer中添加 增删改查 以及 分页 的方法代码，SpringMVC中的控制器起到替代Servlet的功能，处理了所有的请求！！并且它是以基于注解的方式去实现的！<br>关于SpringMVC以及它的注解控制器移步[here]做详细讲解~~ (<a href="https://yourcat.github.io/2018/04/24/springmvc/">https://yourcat.github.io/2018/04/24/springmvc/</a>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *跳转到添加用户界面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;toAddUser&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toAddUser</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addUser&quot;</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户并重定向  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">model</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">user</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;addUser&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">addUser</span>(<span class="hljs-params">Model model,User user</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;<br>        userService.insert(user);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/user/userInfo&quot;</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">model</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">request</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">user</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;updateUser&quot;</span>)  <br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">UpdateUser</span>(<span class="hljs-params">Model model,User user</span>)</span>&#123;<br>         <span class="hljs-keyword">if</span>(userService.updateUserById(user))&#123;  <br>                user = userService.getUserById(user.getId());  <br>                model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);  <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/user/userInfo&quot;</span>;  <br>            &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/error&quot;</span>;  <br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">request</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">model</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;getAllUser&quot;</span>)  <br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getAllUser</span>(<span class="hljs-params">Model model</span>)</span>&#123;<br>    List&lt;User&gt; user = userService.findAll();<br>    model.addAttribute(<span class="hljs-string">&quot;userList&quot;</span>,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allUser&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询单个用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">id</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">request</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">model</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/getUser&quot;</span>)  <br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getUser</span>(<span class="hljs-params">int id,Model model</span>)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, userService.getUserById(id));  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;editUser&quot;</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id删除用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">id</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">request</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">response</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/delUser&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">deleteUser</span>(<span class="hljs-params">int id,Model model</span>)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, userService.deleteUserById(id));  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/user/userInfo&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>pn 默认从第一页开始  请求参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">model</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;userInfo&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getUsers</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(value=<span class="hljs-string">&quot;pn&quot;</span>,defaultValue=<span class="hljs-string">&quot;1&quot;</span>)Integer pn,Model model</span>)</span>&#123;<br>    <span class="hljs-comment">//从第一条开始 每页查询五条数据</span><br>    PageHelper.startPage(pn, <span class="hljs-number">5</span>);<br>    List&lt;User&gt; users = userService.findAll();<br>    <span class="hljs-comment">//将用户信息放入PageInfo对象里</span><br>PageInfo page = <span class="hljs-keyword">new</span> PageInfo(users,<span class="hljs-number">5</span>);<br><br>    model.addAttribute(<span class="hljs-string">&quot;pageInfo&quot;</span>, page);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allUser&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于Controller中的Model，个人感觉取代了原先servlet里的各种域，携带信息在页面间进行传输，在上面给的springmvc中有详细点的讲解。<br>不要忘记在pom.xml中引入pageHelper的jar包！！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.下面正式开始写jsp页面的代码了~<br>首先是allUser.jsp页面，注意这是从controller中的userInfo过来的，并且带着pageInfo(分页信息)。  </p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="xml">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="xml">&lt;%</span><br><span class="xml">    pageContext.setAttribute(&quot;path&quot;, request.getContextPath());</span><br><span class="xml">%&gt;</span><br><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 标题 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 col-md-offset-8&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/toAddUser&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 表格  --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover&quot;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.list&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;user.id&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;user.username&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;user.password&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;user.age &#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-comment">&lt;!-- &lt;td&gt;&lt;a  class=&quot;edit&quot;&gt;编辑&lt;/a&gt; &lt;a</span></span><br><span class="xml">                                 class=&quot;delete&quot;&gt;删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> --&gt;</span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/getUser?id=$</span></span></span><span class="hljs-template-variable">&#123;user.id&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info btn-sm&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-pencil&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">                                   编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/delUser?id=$</span></span></span><span class="hljs-template-variable">&#123;user.id&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-trash&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">                                    删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:1px;border:none;border-top:1px solid #ccc;&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 分页导航栏 --&gt;</span></span><br><br><span class="xml">        <span class="hljs-comment">&lt;!-- 分页信息 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-comment">&lt;!-- 分页文字信息，其中分页信息都封装在pageInfo中 --&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="xml">                当前第：$</span><span class="hljs-template-variable">&#123;pageInfo.pageNum&#125;</span><span class="xml">页，总共：$</span><span class="hljs-template-variable">&#123;pageInfo.pages&#125;</span><span class="xml">页，总共：$</span><span class="hljs-template-variable">&#123;pageInfo.total&#125;</span><span class="xml">条记录</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-comment">&lt;!-- 分页条 --&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Page navigation&quot;</span>&gt;</span></span><br><span class="xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/userInfo?pn=1&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.hasPreviousPage &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">                         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/userInfo?pn=$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.pageNum-1&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">                          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.navigatepageNums &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;page_Num&quot;</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;page_Num == pageInfo.pageNum &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123; page_Num&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;page_Num != pageInfo.pageNum &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/userInfo?pn=$</span></span></span><span class="hljs-template-variable">&#123; page_Num&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123; page_Num&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.hasNextPage &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/userInfo?pn=$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.pageNum+1&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">                          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span>   </span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/user/userInfo?pn=$</span></span></span><span class="hljs-template-variable">&#123;pageInfo.pages&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>末页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>接着是addUser.jsp页面  </p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="vbscript">    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="vbscript">&lt;%  </span><br><span class="vbscript">    String path = <span class="hljs-built_in">request</span>.getContextPath();  </span><br><span class="vbscript">    String basePath = <span class="hljs-built_in">request</span>.getScheme() + <span class="hljs-string">&quot;://&quot;</span>  </span><br><span class="vbscript">            + <span class="hljs-built_in">request</span>.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">request</span>.getServerPort()  </span><br><span class="vbscript">            + path + <span class="hljs-string">&quot;/&quot;</span>;  </span><br><span class="vbscript">%&gt;</span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userForm&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>         </span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;addUser()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="xml">        function addUser() &#123;</span><br><span class="xml">            var form = document.forms[0];</span><br><span class="xml">            form.action = &quot;</span><span class="vbscript">&lt;%=basePath %&gt;</span><span class="xml">user/addUser&quot;;</span><br><span class="xml">            form.method = &quot;post&quot;;</span><br><span class="xml">            form.submit();</span><br><span class="xml">        &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>删除不需要页面，然后是editUser.jsp页面，它是由Controller中getUser过来的，带着id进行查询。  </p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="vbscript">    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="vbscript">&lt;%  </span><br><span class="vbscript">    String path = <span class="hljs-built_in">request</span>.getContextPath();  </span><br><span class="vbscript">    String basePath = <span class="hljs-built_in">request</span>.getScheme() + <span class="hljs-string">&quot;://&quot;</span>  </span><br><span class="vbscript">            + <span class="hljs-built_in">request</span>.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">request</span>.getServerPort()  </span><br><span class="vbscript">            + path + <span class="hljs-string">&quot;/&quot;</span>;  </span><br><span class="vbscript">%&gt;</span><span class="xml">  </span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="vbscript">&lt;%@ taglib uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="hljs-string">&quot;c&quot;</span>%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>编辑用户<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="xml">    function updateUser() &#123;</span><br><span class="xml">        var form = document.forms[0];</span><br><span class="xml">        form.action = &quot;</span><span class="vbscript">&lt;%=basePath %&gt;</span><span class="xml">user/updateUser&quot;;</span><br><span class="xml">        form.method = &quot;post&quot;;</span><br><span class="xml">        form.submit();</span><br><span class="xml">    &#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>编辑用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userForm&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user.id &#125;&quot;</span> /&gt;</span> 姓名：&lt;input</span><br><span class="xml">       type=&quot;text&quot; name=&quot;username&quot; value=&quot;$&#123;user.username &#125;&quot; /&gt; 密码：&lt;input</span><br><span class="xml">            type=&quot;text&quot; name=&quot;password&quot; value=&quot;$&#123;user.password &#125;&quot; /&gt; 年龄：&lt;input</span><br><span class="xml">            type=&quot;text&quot; name=&quot;age&quot; value=&quot;$&#123;user.age &#125;&quot; /&gt; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="xml">            value=&quot;修改&quot; onclick=&quot;updateUser()&quot; /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>大功告成，下面去补springmvc中的知识点，之后再整理另一个案例！溜了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM 框架整合入门练习</title>
    <link href="/2018/04/22/2018-04-22-ssm1/"/>
    <url>/2018/04/22/2018-04-22-ssm1/</url>
    
    <content type="html"><![CDATA[<p>记录第一次通过学习应用 <strong>SSM</strong> 和 <strong>Maven</strong> 框架搭建项目。<br>首先简单介绍需要几个基本知识点，何为SSM？ 全称为 Spring + SpingMVC + Mybatis</p><p><strong>Spring</strong><br>Spring框架是个轻量级的Java EE框架。以IoC、AOP为主要思想，其中IoC，Inversion of Control 指控制反转或反向控制。在Spring框架中我们通过配置创建类对象，由Spring在运行阶段实例化、组装对象。AOP，Aspect Oriented Programming，面向切面编程，其思想是在执行某些代码前执行另外的代码，使程序更灵活、扩展性更好，可以随便地添加、删除某些功能。Servlet中的Filter便是一种AOP思想的实现。<br>Spring同时也是一个“一站式”框架，即Spring在JavaEE的三层架构[表现层（Web层）、业务逻辑层（Service层）、数据访问层（DAO层）]中，每一层均提供了不同的解决技术。如下：  </p><ul><li>表现层（Web层）：<strong>Spring MVC</strong></li><li>业务逻辑层（Service层）：Spring的IoC</li><li>数据访问层（DAO层）：Spring的jdbcTemplate</li></ul><p><strong>Maven</strong><br>Apache Maven 是一套软件工程管理和整合工具。基于工程对象模型（POM）的概念，通过一个中央信息管理模块，Maven 能够管理项目的构建、报告和文档。</p><p>直接跳过 开发环境搭建 和 Maven 项目的构建步骤。  </p><p>0.首先看一下整个项目的目录<br><img src="/img/ssmml.jpg" alt="img"></p><p>1.在Maven中通过pom.xml文件引入开发所需要的jar包</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="xml">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.ihan<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mavendemo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mavendemo Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>4.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slf4j.version</span>&gt;</span>1.7.7<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>jdk15<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ezmorph<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ezmorph<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- spring核心包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-oxm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;mybatis.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- mybatis/spring包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 导入java ee jar 包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaee-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- JSTL标签类 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 日志文件管理包 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- log start --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log4j.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 格式化对象，方便输出日志 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.41<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;slf4j.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;slf4j.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- log end --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 映入JSON --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.jackson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 上传组件包 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>mavendemo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>2.Spring整合MyBatis<br>2.1 建立jdbc属性文件  – （jdbc.properties ，文件编码修改为 utf-8 ）  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">driver</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql://<span class="hljs-number">10.221</span>.<span class="hljs-number">10.111</span>:<span class="hljs-number">8080</span>/db_zsl<br><span class="hljs-attr">username</span>=demao<br><span class="hljs-attr">password</span>=demao<br><span class="hljs-comment">#定义初始连接数</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-number">0</span><br><span class="hljs-comment">#定义最大连接数</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-number">20</span><br><span class="hljs-comment">#定义最大空闲</span><br><span class="hljs-attr">maxIdle</span>=<span class="hljs-number">20</span><br><span class="hljs-comment">#定义最小空闲</span><br><span class="hljs-attr">minIdle</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#定义最长等待时间</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-number">60000</span><br></code></pre></td></tr></table></figure><p>2.2 建立spring-mybatis.xml配置文件 – （spring-mybatis.xml  ）</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="xml">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="xml">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="xml">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans  </span><br><span class="xml">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </span><br><span class="xml">http://www.springframework.org/schema/context  </span><br><span class="xml">http://www.springframework.org/schema/context/spring-context-3.1.xsd  </span><br><span class="xml">http://www.springframework.org/schema/mvc  </span><br><span class="xml">http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;</span><br><span class="xml"><span class="hljs-comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.cn.hnust&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propertyConfigurer&quot;</span></span></span><br><span class="xml">class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;location&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span></span></span><br><span class="xml">destroy-method=&quot;close&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;initialSize&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;maxActive&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;maxIdle&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;minIdle&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;maxWait&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/cn/hnust/mapping/*.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.cn.hnust.dao&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span></span><br><span class="xml">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.3 Log4j的配置<br>为了方便调试，一般都会使用日志来输出信息， Log4j是 Apache 的一个开放源代码项目，通过使用Log4j，我们可以控制 日志 信息输送的目的地是 控制台 、文件、 GUI 组件，甚至是套接口服务器、 NT 的事件记录器、 UNIX   Syslog 守护进程 等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#定义LOG输出级别</span><br><span class="hljs-attr">log4j.rootLogger</span>=INFO,Console,File<br><span class="hljs-comment">#定义日志输出目的地为控制台</span><br><span class="hljs-attr">log4j.appender.Console</span>=org.apache.log4j.ConsoleAppender<br><span class="hljs-attr">log4j.appender.Console.Target</span>=System.out<br><span class="hljs-comment">#可以灵活地指定日志输出格式，下面一行是指定具体的格式</span><br><span class="hljs-attr">log4j.appender.Console.layout</span> = org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.Console.layout.ConversionPattern</span>=[%c] - %m%n<br><br><span class="hljs-comment">#文件大小到达指定尺寸的时候产生一个新的文件</span><br><span class="hljs-attr">log4j.appender.File</span> = org.apache.log4j.RollingFileAppender<br><span class="hljs-comment">#指定输出目录</span><br><span class="hljs-attr">log4j.appender.File.File</span> = logs/ssm.log<br><span class="hljs-comment">#定义文件最大大小</span><br><span class="hljs-attr">log4j.appender.File.MaxFileSize</span> = <span class="hljs-number">10</span>MB<br><span class="hljs-comment"># 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志</span><br><span class="hljs-attr">log4j.appender.File.Threshold</span> = ALL<br><span class="hljs-attr">log4j.appender.File.layout</span> = org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.File.layout.ConversionPattern</span> =[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%c]%m%n<br></code></pre></td></tr></table></figure><p>3.JUnit测试<br>3.1 建表  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`user_t`</span> (<br>  <span class="hljs-symbol">`id`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`user_name`</span> varchar(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`password`</span> varchar(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`age`</span> int(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">2</span> DEFAULT CHARSET=utf8;<br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> <span class="hljs-symbol">`user_t`</span>(<span class="hljs-symbol">`id`</span>,<span class="hljs-symbol">`user_name`</span>,<span class="hljs-symbol">`password`</span>,<span class="hljs-symbol">`age`</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;测试&#x27;</span>,<span class="hljs-string">&#x27;sfasgfaf&#x27;</span>,<span class="hljs-number">24</span>);<br></code></pre></td></tr></table></figure><p>3.2 利用MyBatis Generator自动创建代码<br>详见 <a href="https://blog.csdn.net/zhshulin/article/details/23912615">https://blog.csdn.net/zhshulin/article/details/23912615</a></p><p>3.3 建立Service接口和实现类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">IUserService.jave<br><br><span class="hljs-keyword">package</span> com.cn.hnust.service;<br><br><span class="hljs-keyword">import</span> com.cn.hnust.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserService</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span></span>;<br>&#125;<br>UserServiceImpl.java<br><br><span class="hljs-keyword">package</span> com.cn.hnust.service.impl;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> com.cn.hnust.dao.IUserDao;<br><span class="hljs-keyword">import</span> com.cn.hnust.pojo.User;<br><span class="hljs-keyword">import</span> com.cn.hnust.service.IUserService;<br><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserService</span> </span>&#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> IUserDao userDao;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.userDao.selectByPrimaryKey(userId);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.4 建立测试类  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package org.zsl.testmybatis;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">import</span> org.junit.<span class="hljs-keyword">Before</span>;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.cn.hnust.pojo.<span class="hljs-keyword">User</span>;<br><span class="hljs-keyword">import</span> com.cn.hnust.service.IUserService;<br><br>@RunWith(SpringJUnit4ClassRunner.<span class="hljs-keyword">class</span>)//表示继承了SpringJUnit4ClassRunner类<br>@ContextConfiguration(locations = &#123;&quot;classpath:spring-mybatis.xml&quot;&#125;)<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TestMyBatis &#123;<br>private static Logger logger = Logger.getLogger(TestMyBatis.<span class="hljs-keyword">class</span>);<br>//private ApplicationContext ac = <span class="hljs-keyword">null</span>;<br>@Resource<br>private IUserService userService = <span class="hljs-keyword">null</span>;<br><br>//@<span class="hljs-keyword">Before</span><br>//<span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">before</span>() &#123;<br>//ac = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);<br>//userService = (IUserService) ac.getBean(&quot;userService&quot;);<br>//&#125;<br><br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test1() &#123;<br><span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = userService.getUserById(<span class="hljs-number">1</span>);<br>// <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.getUserName());<br>// logger.<span class="hljs-keyword">info</span>(&quot;值：&quot;+<span class="hljs-keyword">user</span>.getUserName());<br>logger.<span class="hljs-keyword">info</span>(<span class="hljs-type">JSON</span>.toJSONString(<span class="hljs-keyword">user</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整合成功结果图<br><img src="/img/ssm1.jpg" alt="img"></p><ol start="4"><li>下面开始整合SpringMVC<br>上面已经完成了2大框架的整合，SpringMVC的配置文件单独放，然后在web.xml中配置整合。  </li></ol><p>4.1 配置spring-mvc.xml  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans  </span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context  </span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context-3.1.xsd  </span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc  </span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.cn.hnust.controller&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mappingJacksonHttpMessageConverter&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span><br>&lt;bean<br>class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;messageConverters&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;mappingJacksonHttpMessageConverter&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- JSON转换器 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  </span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- 默认编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- 文件大小最大值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760000&quot;</span> /&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- 内存中的最大值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span> /&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.2配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Spring和mybatis的配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mybatis.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 编码过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">async-supported</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">async-supported</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Spring监听器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 防止Spring内存溢出监听器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring MVC servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">async-supported</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">async-supported</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>/index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.3 测试<br>建立jsp页面  </p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> import=<span class="hljs-string">&quot;java.util.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    $&#123;user.userName&#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">&lt;/html</span><br></code></pre></td></tr></table></figure><p>建立UserController类  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.cn.hnust.controller;<br><br><span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<br><br><span class="hljs-keyword">import</span> com.cn.hnust.pojo.User;<br><span class="hljs-keyword">import</span> com.cn.hnust.service.IUserService;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/user&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> IUserService userService;<br><br><span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/showUser&quot;</span>)</span><br><span class="hljs-keyword">public</span> String toIndex(HttpServletRequest request,Model model)&#123;<br>int userId = Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;id&quot;</span>));<br>User user = <span class="hljs-keyword">this</span>.userService.getUserById(userId);<br>model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;showUser&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.4 部署项目<br>输入地址： localhost:8080/ 项目名称 /user/showUser?id=1</p><p>大功告成~<br><img src="/img/ssm2.jpg" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四月随想</title>
    <link href="/2018/04/17/2018-04-17-new/"/>
    <url>/2018/04/17/2018-04-17-new/</url>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>转眼已进入了四月，细数已有27天未曾更博，与自己之前说下的誓言相差甚远，这近一个月以来实在发生了太多，突然的发病，一直在忙于就医，又疲于项目和学习，同时沉迷了一段时间的游戏，借着需要放松的名义去放纵自己，说来实在惭愧。总之这真的是一个灰暗的三月，希望四月的到来能为这一切照亮一道曙光。</p><h2 id="关于四月"><a href="#关于四月" class="headerlink" title="关于四月"></a>关于四月</h2><p>希望这是一个全新的开始，积压了太多的事情需要去完成，需要制定一份完备的计划给自己。</p><ol><li>继续深入Java web的学习。整理之前学习的内容并进行总结， 同时跟进两个项目组的进度。</li><li>每天刷1～2道PAT题目，以及算法的适当学习（leetcode），迎战月末的省赛。</li><li>补上专业课的学习，尤其是Linux和组成原理，这是两门很重要的课程。</li><li>祛痘&amp;护肤，养成良好的生活习惯，早睡早起多吃水果，唉！！！</li><li>摆脱拖延症，提高自己的执行力，效率！效率！！效率！！！</li></ol><h2 id="一些细则"><a href="#一些细则" class="headerlink" title="一些细则"></a>一些细则</h2><p>具体的实施计划需要在这里列出来</p><ul><li>生活清单，可考虑纸质贴在桌上</li><li>学习清单，iPad笔记形式</li><li>理清桌面，理清头绪，不积压</li><li>禁令，列出不能做的事严格监督自己</li></ul><h2 id="续"><a href="#续" class="headerlink" title="续"></a>续</h2><p>四月半，这个月的事情多的头皮发麻，这篇日记，告诫自己接下里的日子里该做出怎样的改变，以应对扑面而来的就业危机。</p><ol><li><p>不要再按部就班的过日子，需要深知自己所处的环境，课堂上所学的知识远远不能够让你能够找到一份满意的工作，应该逃掉不相干的选修课，把大量的精力放在四大基础课和Java开发相关的事情上，看一些大牛们的笔经面经，了解自己缺什么，该学什么。</p></li><li><p>平时笔记在ipad上完成，每隔一个时间段在博客上进行学习总结，不为了写博客而写博客，因为之后会有大量的时间做项目，关于javaweb的内容，将在项目的阶段性成果之后写出对应的博客总结，并对先前滥竽充数的内容进行完善和整改，刷题题解以及日记应正常发布在博客上。</p></li><li><p>关于项目，请先在五月中旬之前，学掉SSM框架，达到会用的程度，之后再在项目运用中，对原理进行深度理解。</p></li><li><p>基础，很重要，额外挑选时间进行学习，可以是周末。</p></li></ol><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>之后的学习是SSM框架，然后组成原理，算法，备战期末考。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习08-过滤器&amp;监听器</title>
    <link href="/2018/03/15/2018-02-25-javaweb8/"/>
    <url>/2018/03/15/2018-02-25-javaweb8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暂放，关于 <strong>过滤器及封装器</strong> 的讲述，后面添上 <strong>监听器</strong>。  </p><h2 id="过滤器与封装器"><a href="#过滤器与封装器" class="headerlink" title="过滤器与封装器"></a>过滤器与封装器</h2><p><strong>过滤器</strong>：拦截过滤浏览器对Servlet的请求，也可以改变Servlet对浏览器的响应。  </p><p>所有的Servlet过滤器类都必须实现 <strong>javax.servlet.Filter</strong> 接口。该接口定义了以下3个方法：</p><ul><li>init(FilterConfig)  这是Servlet过滤器的初始化方法，Servlet容器创建Servlet过滤器实例后就会调用这个方法。在这个方法中可以通过FilterConfig来读取web.xml文件中Servlet过滤器的初始化参数。   </li><li>doFilter(ServletRequest, ServletResponse, FilterChain)  这是完成实际的过滤操作的方法，当客户请求访问与过滤器关联的URL时，Servlet容器先调用该方法。FilterChain参数用来访问后续的过滤器的doFilter()方法。   </li><li>destroy()  Servlet容器在销毁过滤器实例前调用该方法，在这个方法中，可以释放过滤器占用的资源。</li></ul><p>过滤器设置： web.xml设置过滤器时，filter-mapping中可以使用url-pattern来指定哪些URL请求将应用此过滤器，也可用<servlet-name>指定Servlet名称，表示哪些Servlet将应用此过滤器。</p><p>触发过滤器时机默认是浏览器直接发出请求。如果是通过RequestDispatcher的forward()或include()请求，则可以在web.xml中设置<dispatcher>标签，指定哪些需求转发类型可以出发过滤器，不设置则默认为REQUEST。</p><p><strong>搭配封装器</strong>：将容器产生的请求与响应对象加以封装，以针对某些请求信息或响应进行加工处理。</p><ul><li>请求封装器：通过HttpServletRequestWrapper实现HttpServletRequest接口，只要继承这个类，并编写想要重新定义的方法即可。相对应于ServletRequest接口，也有个ServletRequestWrapper类可以使用。</li></ul><p>以下范例通过继承HttpServletRequestWrapper实现一个请求封装器，可以将请求参数中的HTML字符替换为HTML实体字符。   </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EscapeWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">EscapeWrapper</span>(<span class="hljs-params">HttpServletRequest request</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(request);<span class="hljs-comment">//必须调用父类构造器，将HttpServletRequest实例传入</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getParameter</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> value = getRequest().getParameter(name);<br>        <span class="hljs-keyword">return</span> StringEscapeUtils.escapeHtml(value);   <br>        <span class="hljs-comment">//将请求参数值进行字符替换</span><br>    &#125;<br><br>&#125;<br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">之后若有Servlet想取得请求参数值，都会调用getParameter()方法，所以这里重新定义这个方法，在此方法中，进行字符替换动作。可以使用这个请求封装器搭配过滤器，以进行字符过滤的服务。例如：  </span><br></code></pre></td></tr></table></figure><p>@WebFilter(<br>        filterName=”EscapeFilter”,<br>        urlPatterns={“/guestbook”},<br>        dispatcherTypes={<br>                DispatcherType.FORWARD,<br>                DispatcherType.INCLUDE,<br>                DispatcherType.REQUEST,<br>                DispatcherType.ERROR,DispatcherType.ASYNC<br>            })<br>public class EscapeFilter implements Filter {<br>    private FilterConfig config;</p><pre><code>public EscapeFilter() &#123;&#125;public void destroy() &#123;    System.out.println(&quot;EscapeFilter calling done!&quot;);&#125;public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;    long begin = System.currentTimeMillis();    HttpServletRequest requestWrapper = new EscapeWrapper((HttpServletRequest)request);    chain.doFilter(requestWrapper, response);    config.getServletContext().log(&quot;Request escaping HTML tags in &quot; +            (System.currentTimeMillis() - begin) + &quot; milliseconds&quot;);&#125;public void init(FilterConfig fConfig) throws ServletException &#123;    this.config = fConfig;    System.out.println(&quot;EscapeFilter init done!&quot;);&#125;</code></pre><p>}</p><pre><code>- 响应封装器：在Servlet中，是通过HttpServletResponse对象来对浏览器进行响应的，如果想要对响应的内容进行压缩处理，就要想办法让HttpServletResponse对象具有压缩处理的功能。前面介绍过请求封装器的实现，而在响应封装器的部分，可以继承HttpServletResponseWrapper类来对HttpServletResponse对象进行封装。若要对浏览器进行输出响应，必须通过getWriter()取得PrintWriter，或是通过getOutputStream()取得ServletOutputStream。 所以针对压缩输出的需求，主要就是继承HttpServletResponseWrapper类之后，通过重新定义这两个方法来达成。在下面例子中，压缩的功能采用GZIP格式，这是浏览器可以授受的压缩格式，可以使用GZIPOutputStream类来实现。由于getWriter()的PrintWriter在创建时，也是必须使用到ServletOutputStream，所以在这里先扩展ServletOutputStream类，让它具有压缩的功能。    </code></pre><p>public class GZipServletOutputStream extends ServletOutputStream {<br>    private GZIPOutputStream gzipOutputStream;</p><pre><code>public GZipServletOutputStream(ServletOutputStream servletOutputStream) throws IOException &#123;    this.gzipOutputStream = new GZIPOutputStream(servletOutputStream);&#125;@Overridepublic boolean isReady() &#123;    return false;&#125;@Overridepublic void setWriteListener(WriteListener listener) &#123;&#125;public GZIPOutputStream getGzipOutputStream()&#123;    return gzipOutputStream;&#125;@Overridepublic void write(int b) throws IOException &#123;    gzipOutputStream.write(b);  //输出时通过gzipOutputStream来压缩输出&#125;</code></pre><p>}</p><pre><code>在HttpServletResponse对象传入Servlet的service()方法前，必须先封装它，使得调用getOutputStream()时，可以取得这里所实现的GZipServletOutputStream对象，而调用getWriter()时，也可以利用GZipServletOutputStream对象来构造PrintWriter对象。   </code></pre><p>public class CompressionWrapper extends HttpServletResponseWrapper {<br>    private GZipServletOutputStream gzServletOutputStream;<br>    private PrintWriter printWriter;</p><pre><code>public CompressionWrapper(HttpServletResponse response) &#123;    super(response);&#125; @Overridepublic ServletOutputStream getOutputStream() throws IOException &#123;    //响应中已经调用过getWriter，再调用getOutputStream就抛出异常    if(printWriter != null) &#123;        throw new IllegalStateException();    &#125;    if(null == gzServletOutputStream) &#123;        gzServletOutputStream =        new GZipServletOutputStream(getResponse().getOutputStream());    &#125;    return gzServletOutputStream;&#125; @Override public PrintWriter getWriter() throws IOException &#123;     //响应中已经调用过getOutputStream，再调用getWriter就抛出异常     if(gzServletOutputStream != null) &#123;         throw new IllegalStateException();     &#125;     if(null == printWriter) &#123;         gzServletOutputStream = new GZipServletOutputStream(getResponse().getOutputStream());         OutputStreamWriter osw = new OutputStreamWriter(                 gzServletOutputStream, getResponse().getCharacterEncoding());         printWriter = new PrintWriter(osw);     &#125;     return printWriter; &#125; //不实现此方法，因为真正的输出会被压缩，忽略原来的内容长度设置 @Override public void setContentLength(int len)&#123; &#125; public GZIPOutputStream getGZIPOutputStream() &#123;     if(this.gzServletOutputStream == null)         return null;     return this.gzServletOutputStream.getGzipOutputStream(); &#125;</code></pre><p>}</p><pre><code>在上例中要注意，由于Servlet规范中规定，在同一个请求期间，getWriter()与getOutputStream()只能择一调用，否则必抛出IllegalStateException，因此建议在实现响应封装器时，也遵循这个规范。因此在重新定义getOutputStream()与getWriter()方法时，分别要检查是否已经存在PrintWriter与ServletOutputStream实例。## 监听器1.生命周期监听器：就是可以在某个对象生成到被容器销毁之前，监听对象生命周期的状态变化。可作用于ServeltRequest,HttpSession与ServletContext。  在web.xml上使用&lt;listener&gt;与&lt;listener-class&gt;设置监听器类。  </code></pre><p>ServletContextListener<br>  contextInitialized(sce: ServletContextEvent): void<br>  contextDestroyed(sce: ServletContextEvent): void  </p><p>ServletContextEvent<br>  ServletContextEvent(source: ServletContext)<br>  getServletContext(): ServletContext  </p><pre><code></code></pre><p>ServletRequestListener<br>  requestInitialized(sre: ServletRequestEvent): void<br>  requestDestroyed(sce: ServletRequestEvent): void  </p><p>ServletRequestEvent<br>  ServletRequestEvent(sc: ServletContext, request: ServletRequest)<br>  getServletRequest(): ServletRequest<br>  getServletContext(): ServletContext  </p><pre><code></code></pre><p>HttpSessionListener<br>  sessionCreated(sre: HttpSessionEvent): void<br>  sessionDestroyed(sce: HttpSessionEvent): void    </p><p>HttpSessionEvent<br>  HttpSessionEvent(source: HttpSession)<br>  getSession(): HttpSession  </p><pre><code>2.属性操作监听器：在Servlet/JSP中，有三个对象可以设置属性，分别是ServletContext、HttpSession和ServletRequest。如果想要在这些对象被设置、删除或替换属性时，收到通知以进行一些动作，则可以实现相对应的ServletContextAttributeListener、HttpSessionAttributeListener和ServletRequestAttributeListener接口。    如果要使用这几个监听器，必须同样在web.xml中使用&lt;listener&gt;与&lt;listener-class&gt;进行设置。3.会话属性类监听器：前面几个监听器都必须在web.xml中进行设置，这里所要介绍的HttpSessionBindingListener与HttpSessionActivationListener，则是让即将加入HttpSession的属性对象实现，HttpSession在适当的时机就会直接调用接口上对应的方法，不必在web.xml中做任何设置。   **HttpSessionBindingListener**   如果有个即将加入HttpSession的属性对象，希望在设置给HttpSession成为属性或从HttpSession中删除时，可以收到HttpSession的通知，则可以让该对象实现HttpSessionBindingListener接口。当属性对象被加入到HttpSession中或从中删除时，就会调用对应的valueBound()与valueUnbound()方法。范例：  </code></pre><p>public class Login extends HttpServlet{<br>    //…<br>    protected void doPost(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {<br>        String username = request.getParameter(“username”);<br>        String password = request.getParameter(“password”);<br>        if (“abc”.equals(username) &amp;&amp; “123”.equals(password)) {<br>            User user = new User(name);<br>            request.getSession().setAttribute(“login”, user);<br>            request.getRequestDispatcher(“user.jsp”)<br>                .forward(request, response);<br>        } else {<br>            response.sendRedirect(“login.html”);<br>        }<br>    }<br>}</p><pre><code>当用户输入正确的用户名和密码时，首先会以用户名称来创建User实例，而后加入HttpSession中作为属性。当希望User实例被加入成为HttpSession属性时，可以自动从数据库中加载用户的其他数据，比如地址、相片等，并在日志中记录用户登录的信息；而当HttpSession失效或者因用户注销而User实例从HttpSession中删除时，则在日志中记录用户注销的信息。在这种情况下，可以让User类实现HttpSessionBindingListener接口。例如：  </code></pre><p>import java.util.logging.Level;<br>import java.util.logging.Logger;</p><p>import javax.servlet.http.HttpSessionBindingEvent;<br>import javax.servlet.http.HttpSessionBindingListener;</p><p>public class User implements HttpSessionBindingListener {<br>    private String name;<br>    private String otherData;</p><pre><code>public User(String name) &#123;    this.name = name;&#125;@Overridepublic void valueBound(HttpSessionBindingEvent event) &#123;    this.otherData = name + &quot;: query data from database...&quot;;    Logger.getLogger(User.class.getName()).log(Level.SEVERE, this.name + &quot; login...&quot;, event);&#125;@Overridepublic void valueUnbound(HttpSessionBindingEvent event) &#123;    Logger.getLogger(User.class.getName()).log(Level.SEVERE, this.name + &quot; logout...&quot;, event);&#125;//Getter and Setter</code></pre><p>}</p><pre><code>**HttpSessionActivationListener**  HttpSessionActivationListener定义了两个方法sessionWillPassivate()与sessionDidActivate()。  大部分情况下，几乎不会使用到HttpSessionActivationListener。在使用到分布式环境时，应用程序的兑现可能分散在多个JVM中。当HttpSession要从一个JVM迁移至另一个JVM时，必须现在原本的JVM上序列化所有的属性对象。在这之前若属性对象实现了HttpSessionActivationListener，就会调用sessionWillPassivate()方法。当HttpSession迁移至另一个JVM后，就会对所有对象做反序列化，此时就会调用sessionDidActivate()方法。要实现序列化的对象必须实现Serializable接口，如果在HttpSession对象中，有些类别成员无法做序列化，则可以在sessionWillPassivate()方法中做些替代处理来保存该成员的状态，而在sessionDidActivate()方法中做某些恢复该成员状态的动作。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习07-EL表达式</title>
    <link href="/2018/03/10/2018-02-15-javaweb7/"/>
    <url>/2018/03/10/2018-02-15-javaweb7/</url>
    
    <content type="html"><![CDATA[<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>用于获取数据，使用标识符${标识符}形式，通过JSP引擎调用</p><p><strong>11个隐含对象</strong><br>pageContext          对应于JSP页面中的pageContext对象（注意：取的是pageContext对象。）<br>pageScope            代表page域中用于保存属性的Map对象<br>requestScope        代表request域中用于保存属性的Map对象<br>sessionScope        代表session域中用于保存属性的Map对象<br>applicationScope    代表application域中用于保存属性的Map对象<br>param                表示一个保存了所有请求参数的Map对象<br>paramValues       表示一个保存了所有请求参数的Map对象，它对于某个请求参数，返回的是一个string[]<br>header              表示一个保存了所有http请求头字段的Map对象<br>headerValues        同上，返回string[]数组。注意：如果头里面有“-” ，例Accept-Encoding，则要headerValues[“Accept-Encoding”]<br>cookie              表示一个保存了所有cookie的Map对象<br>initParam            表示一个保存了所有web应用初始化参数的map对象  </p><p>测试cookie时，例${cookie.key}取的是cookie对象，如访问cookie的名称和值，须${cookie.key.name}或${cookie.key.value}</p><p>EL自定义函数用于扩展EL表达式的功能，可以让EL表达式完成普通Java程序代码所能完成的功能。<br>EL自定义函数开发与应用包括以下三个步骤：  </p><ol><li>编写一个Java类的静态方法  </li><li>编写标签库描述符（tld）文件，在tld文件中描述自定义函数</li><li>在JSP页面中导入和使用自定义函数<br>示例：${prefix：method(params)</li></ol><p>编写完标签库描述文件后，需要将它放置到&lt;web应用&gt;\WEB-INF目录中或WEB-INF目录下的除了classes和lib目录之外的任意子目录中。<br>TLD文件中的<uri> 元素用指定该TLD文件的URI，在JSP文件中需要通过这个URI来引入该标签库描述文件。<br><function>元素用于描述一个EL自定义函数，其中：<br><name>子元素用于指定EL自定义函数的名称。<br><function-class>子元素用于指定完整的Java类名，<br><function-signature>子元素用于指定Java类中的静态方法的签名，方法签名必须指明方法的返回值类型及各个参数的类型，各个参数之间用逗号分隔。</p><p>常用el函数(涉及与字符串处理相关)<br>在页面中使用JSTL定义的EL函数：<br>&lt;%@taglib uri=”<a href="http://java.sun.com/jsp/jstl/functions&quot;">http://java.sun.com/jsp/jstl/functions&quot;</a> prefix=”fn”%&gt;</p><p><strong>fn:toLowerCase</strong></p><p>fn:toLowerCase函数将一个字符串中包含的所有字符转换为小写形式，并返回转换后的字符串，它接收一个字符 串类型的参数，例如<br>fn:toLowerCase(“Www.IT315.org”) 的返回值为字符串“<a href="http://www.it315.org”/">www.it315.org”</a><br>fn:toLowerCase(“”)的返回值为空字符串</p><p><strong>fn:toUpperCase</strong></p><p>fn:toUpperCase函数将一个字符串中包含的所有字符转换为大写形式，并返回转换后的字符串，它接收一个字符串类型的参数。例如：<br>fn:toUpperCase(“Www.IT315.org”) 的返回值为字符串“WWW.IT315.ORG”<br>fn:toUpperCase(“”)的返回值为空字符串</p><p><strong>fn:trim</strong></p><p>fn:trim函数删除一个字符串的首尾的空格，并返回删除空格后的结果字符串，它接收一个字符串类型的参数。需要注意的是，fn:trim函数不能删除字符串中间位置的空格。<br>例如，fn:trim(“   <a href="http://www.it315.org/">www.it315.org</a>  “) 的返回值为字符串“<a href="http://www.it/">www.it</a> 315.org”。</p><p><strong>fn:length</strong></p><p>fn:length函数返回一个集合或数组大小，或返回一个字符串中包含的字符的个数，返回值为int类型。fn:length函数接收一个参数，这个参数可以是&lt;c:forEach&gt;标签的items  </p><p>属性支持的任何类型，包括任意类型的数组、java.util.Collection、java.util.Iterator、java.util.Enumeration、java.util.Map等类的实例对象和字符串。<br>如果fn:length函数的参数为null或者是元素个数为0的集合或数组对象，则函数返回0；如果参数是空字符串，则函数返回0。  </p><p><strong>fn:split</strong></p><p>fn:split函数以指定字符串作为分隔符，将一个字符串分割成字符串数组并返回这个字符串数组。<br>fn:split函数接收两个字符串类型的参数，第一个参数表示要分割的字符串，第二个参数表示作为分隔符的字符串。<br>例如，fn:split(“<a href="http://www.it315.org&quot;/">www.it315.org&quot;</a>, “.”)[1]的返回值为字符串“it315”。  </p><p><strong>fn:join</strong></p><p>fn:join函数以一个字符串作为分隔符，将一个字符串数组中的所有元素合并为一个字符串并返回合并后的结果字符串。fn:join函数接收两个参数，第一个参数是要操作的字符串数组，第二个参数是作为分隔符的字符串。<br>如果fn:join函数的第二个参数是空字符串，则fn:join函数的返回值直接将元素连接起来。例如：<br>假设stringArray是保存在Web域中的一个属性，它表示一个值为{“www”,”it315”,”org”}的字符串数组，则fn:join(stringArray, “.”)返回字符串“<a href="http://www.it315.org”/">www.it315.org”</a><br>fn:join(fn:split(“www,it315,org”, “,”), “.”) 的返回值为字符串“<a href="http://www.it315.org”/">www.it315.org”</a></p><p><strong>fn:indexOf</strong></p><p>fn:indexOf函数返回指定字符串在一个字符串中第一次出现的索引值，返回值为int类型。fn:indexOf函数接收两个字符串类型的参数，如果第一个参数字符串中包含第二个参数字符串，那么，不管第二个参数字符串在第一个参数字符串中出现几次，fn:indexOf函数总是返回第一次出现的索引值；如果第一个参数中不包含第二个参数，则fn:indexOf函数返回-1。如果第二个参数为空字符串，则fn:indexOf函数总是返回0。例如：<br>fn:indexOf(“<a href="http://www.it315.org&quot;,&quot;t3&quot;/">www.it315.org&quot;,&quot;t3&quot;</a>) 的返回值为5</p><p><strong>fn:contains</strong></p><p>fn:contains函数检测一个字符串中是否包含指定的字符串，返回值为布尔类型。fn:contains函数在比较两个字符串是否相等时是大小写敏感的。<br>fn:contains函数接收两个字符串类型的参数，如果第一个参数字符串中包含第二个参数字符串，则fn:contains函数返回true，否则返回false。如果第二个参数的值为空字符串，则fn:contains函数总是返回true。实际上，fn:contains(string, substring)等价于fn:indexOf(string, substring) != -1。<br>忽略大小的EL函数：fn:containsIgnoreCase   </p><p><strong>fn:startsWith</strong></p><p>fn:startsWith函数用于检测一个字符串是否是以指定字符串开始的，返回值为布尔类型。<br>fn:startsWith函数接收两个字符串类型的参数，如果第一个参数字符串以第二个参数字符串开始，则函数返回true，否则函数返回false。如果第二个参数为空字符串，则<br>fn:startsWith函数总是返回true。例如：<br>fn:startsWith(“<a href="http://www.it315.org&quot;,&quot;it315&quot;)的返回值为false/">www.it315.org&quot;,&quot;it315&quot;)的返回值为false</a><br>与之对应的EL函数：fn:endsWith   </p><p><strong>fn:replace</strong></p><p>fn:replace函数将一个字符串中包含的指定子字符串替换为其它的指定字符串，并返回替换后的结果字符串。fn:replace方法接收三个字符串类型的参数，第一个参数表示要操作的源字符串，第二个参数表示源字符串中要被替换的子字符串，第三个参数表示要被替换成的字符串。例如：<br>fn:replace(“www it315 org”, “ “, “.”)的返回值为字符串“<a href="http://www.it315.org”/">www.it315.org”</a></p><p><strong>fn:substring</strong>  </p><p>fn:substring函数用于截取一个字符串的子字符串并返回截取到的子字符串。fn:substring函数接收三个参数，第一个参数是用于指定要操作的源字符串，第二个参数是用于指定截取子字符串开始的索引值，第三个参数是用于指定截取子字符串结束的索引值，第二个参数和第三个参数都是int类型，其值都从0开始。例如：<br>fn:substring(“<a href="http://www.it315.org&quot;/">www.it315.org&quot;</a>, 4, 9) 的返回值为字符串“it315”</p><p><strong>fn:substringAfter</strong></p><p>fn:substringAfter函数用于截取并返回一个字符串中的指定子字符串第一次出现之后的子字符串。fn:substringAfter函数接收两个字符串类型的参数，第一个参数表示要操作的源字符串，第二个参数表示指定的子字符串，例如：<br>fn:substringAfter(“<a href="http://www.it315.org”/">www.it315.org”</a>, “.”)的返回值为字符串“it315.org”。<br>与之对应的EL函数为：fn:substringBefore   </p><p>&lt;c:if test=”${fn:contains(str,subStr)}”&gt;  </p><p>fn:contains函数检测一个字符串中是否包含指定的字符串，返回值为布尔类型。fn:contains函数在比较两个字符串是否相等时是大小写敏感的。<br>fn:contains函数接收两个字符串类型的参数，如果第一个参数字符串中包含第二个参数字符串，则fn:contains函数返回true，否则返回false。如果第二个参数的值为空字符串，则fn:contains函数总是返回true。实际上，fn:contains(string, substring)等价于fn:indexOf(string, substring) != -1。  </p><p>忽略大小的EL函数：fn:containsIgnoreCase</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习6-JSP标签</title>
    <link href="/2018/03/10/2018-02-10-javaweb6/"/>
    <url>/2018/03/10/2018-02-10-javaweb6/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><p>主要用于移除Jsp页面中的java代码。  </p><p>移除jsp页面中的java代码，只需要完成两个步骤：  </p><ul><li>编写一个实现Tag接口的Java类，并覆盖doStartTag方法，把jsp页面中的java代码写到doStartTag方法中。</li><li>编写标签库描述符（tld）文件，在tld文件中对自定义标签进行描述。</li></ul><p><strong>Tag接口的执行流程</strong>  </p><p>JSP引擎将遇到自定义标签时，首先创建标签处理器类的实例对象，然后按照JSP规范定义的通信规则依次调用它的方法。<br>1.public void setPageContext(PageContext pc)， JSP引擎实例化标签处理器后，将调用setPageContext方法将JSP页面的pageContext对象传递给标签处理器，标签处理器以后可以通过这个pageContext对象与JSP页面进行通信。<br>2.public void setParent(Tag t)，setPageContext方法执行完后，WEB容器接着调用的setParent方法将当前标签的父标签传递给当前标签处理器，如果当前标签没有父标签，则传递给setParent方法的参数值为null。<br>3.public int doStartTag()，调用了setPageContext方法和setParent方法之后，WEB容器执行到自定义标签的开始标记时，就会调用标签处理器的doStartTag方法。<br>4.public int doEndTag()，WEB容器执行完自定义标签的标签体后，就会接着去执行自定义标签的结束标记，此时，WEB容器会去调用标签处理器的doEndTag方法。<br>5.public void release()，通常WEB容器执行完自定义标签后，标签处理器会驻留在内存中，为其它请求服务器，直至停止web应用时，web容器才会调用release方法。  </p><p><strong>自定义标签功能扩展</strong>  </p><p>通过自定义标签可以控制标签后的jsp页面是否执行。</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">                           //Java类</span><br><span class="xml">  public int doEndTag() throws JspException &#123;</span><br><span class="xml">    return SKIP_PAGE;</span><br><span class="xml">  &#125;                      </span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span>                    //tld</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>整个jsp页面标签后的内容是否输出<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>skipPage<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tag-class</span>&gt;</span>cn.itcast.web.tag.TagDemo2<span class="hljs-tag">&lt;/<span class="hljs-name">tag-class</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">body-content</span>&gt;</span>JSP<span class="hljs-tag">&lt;/<span class="hljs-name">body-content</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">tag</span>&gt;</span>                </span><br><br><span class="xml">                         //实现</span><br><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span>  pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml">&lt;%</span><span class="ruby">@ taglib prefix=<span class="hljs-string">&quot;itcast&quot;</span> uri=<span class="hljs-string">&quot;http://www.hgnc.net/jsp2-tag&quot;</span></span><span class="xml">%&gt;</span><br><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>整个jsp是否输出<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  uuu</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">itcast:skipPage</span>&gt;</span>kkkkkkkkkkkkl<span class="hljs-tag">&lt;/<span class="hljs-name">itcast:skipPage</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">gggg</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>通过自定义标签可以控制jsp页面某一部分内容重复执行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript">int x;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> int doAfterBody() throws JspException &#123;<br><span class="hljs-keyword">if</span>(x--&gt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> IterationTag.EVAL_BODY_AGAIN;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> IterationTag.SKIP_BODY;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> int doStartTag() throws JspException &#123;<br>x=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.EVAL_BODY_INCLUDE;<br>&#125;<br>&lt;tag&gt;<br>    &lt;description&gt;循环输出标签体&lt;/description&gt;<br>    &lt;name&gt;loopbody&lt;/name&gt;<br>    &lt;tag-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">cn</span>.<span class="hljs-title">itcast</span>.<span class="hljs-title">web</span>.<span class="hljs-title">tag</span>.<span class="hljs-title">TagDemo4</span>&lt;/<span class="hljs-title">tag</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">body</span>-<span class="hljs-title">content</span>&gt;<span class="hljs-title">JSP</span>&lt;/<span class="hljs-title">body</span>-<span class="hljs-title">content</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">tag</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过自定义标签可以修改jsp页面内容输出。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doStartTag</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JspException </span>&#123;<br><span class="hljs-keyword">return</span> BodyTag.EVAL_BODY_BUFFERED;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doEndTag</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JspException </span>&#123;<br>BodyContent bc=<span class="hljs-keyword">this</span>.getBodyContent();<br>String content=bc.getString();<br>content=content.toUpperCase();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">this</span>.pageContext.getOut().write(content);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.<span class="hljs-title">doEndTag</span><span class="hljs-params">()</span></span>;<br>&#125;<br>&lt;itcast:modibody&gt;<br>kkkkkkkkkkkkl&lt;br /&gt;<br>&lt;/itcast:modibody&gt;<br></code></pre></td></tr></table></figure><h2 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h2><p>由于传统标签使用三个标签接口来完成不同的功能，显得过于繁琐，不利于标签技术的推广， SUN公司为降低标签技术的学习难度，在JSP 2.0中定义了一个更为简单、便于编写和调用的SimpleTag接口来实现标签的功能。实现SimpleTag接口的标签通常称为简单标签。简单标签共定义了5个方法：<br>setJspContext方法，setParent和getParent方法，setJspBody方法，doTag方法</p><p><strong>SimpleTag接口方法的执行顺序</strong><br>当web容器开始执行标签时，会调用如下方法完成标签的初始化<br>WEB容器调用标签处理器对象的setJspContext方法，将代表JSP页面的pageContext对象传递给标签处理器对象。<br>WEB容器调用标签处理器对象的setParent方法，将父标签处理器对象传递给这个标签处理器对象。注意，只有在标签存在父标签的情况下，WEB容器才会调用这个方法。<br>如果调用标签时设置了属性，容器将调用每个属性对应的setter方法把属性值传递给标签处理器对象。如果标签的属性值是EL表达式或脚本表达式，则WEB容器首先计算表达式的值，然后把值传递给标签处理器对象。<br>如果简单标签有标签体，容器将调用setJspBody方法把代表标签体的JspFragment对象传递进来。<br>执行标签时：<br>容器调用标签处理器的doTag()方法，开发人员在方法体内通过操作JspFragment对象，就可以实现是否执行、迭代、修改标签体的目的。  </p><p><strong>JspFragment类</strong><br>javax.servlet.jsp.tagext.JspFragment类是在JSP2.0中定义的，它的实例对象代表JSP页面中的一段符合JSP语法规范的JSP片段，这段JSP片段中不能包含JSP脚本元素。  </p><p>WEB容器在处理简单标签的标签体时，会把标签体内容用一个JspFragment对象表示，并调用标签处理器对象的setJspBody方法把JspFragment对象传递给标签处理器对象。JspFragment类中只定义了两个方法，如下所示：  </p><p>getJspContext方法<br>用于返回代表调用页面的JspContext对象.  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span>(<span class="hljs-params">java.io.Writer <span class="hljs-keyword">out</span></span>)  </span><br></code></pre></td></tr></table></figure><p>用于执行JspFragment对象所代表的JSP代码片段<br>参数out用于指定将JspFragment对象的执行结果写入到哪个输出流对象中，如果传递给参数out的值为null，则将执行结果写入到JspContext.getOut()方法返回的输出流对象中。(简而言之，可以理解为写给浏览器)  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs scala">显示标签体<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleTagSupport</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>public void doTag() <span class="hljs-keyword">throws</span> <span class="hljs-type">JspException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-type">JspFragment</span> jf=<span class="hljs-keyword">this</span>.getJspBody();<br>jf.invoke(<span class="hljs-keyword">this</span>.getJspContext().getOut());<br><span class="hljs-keyword">super</span>.doTag();<br>&#125;<br>&#125;<br>不显示标签体<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleTagSupport</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>public void doTag() <span class="hljs-keyword">throws</span> <span class="hljs-type">JspException</span>, <span class="hljs-type">IOException</span> &#123;<br><br>&#125;<br>&#125;<br><span class="hljs-comment">//重复显示</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleTagSupport</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>public void doTag() <span class="hljs-keyword">throws</span> <span class="hljs-type">JspException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-type">JspFragment</span> jf=<span class="hljs-keyword">this</span>.getJspBody();<br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>jf.invoke(<span class="hljs-keyword">this</span>.getJspContext().getOut());<br><span class="hljs-comment">//与这个等价jf.invoke(null);</span><br><span class="hljs-keyword">super</span>.doTag();<br>&#125;<br>&#125;<br><span class="hljs-comment">//修改标签内容</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleTagSupport</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>public void doTag() <span class="hljs-keyword">throws</span> <span class="hljs-type">JspException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-type">JspFragment</span> jf=<span class="hljs-keyword">this</span>.getJspBody();<br><span class="hljs-type">StringWriter</span> sw=<span class="hljs-keyword">new</span> <span class="hljs-type">StringWriter</span>();<br>jf.invoke(sw);<br><br><span class="hljs-type">String</span> content=sw.toString();<br>content=content.toUpperCase();<br><br><span class="hljs-keyword">this</span>.getJspContext().getOut().write(content);<br>&#125;<br>&#125;<br><span class="hljs-comment">//停止显示标签后面文档内容</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleTagSupport</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>public void doTag() <span class="hljs-keyword">throws</span> <span class="hljs-type">JspException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">SkipPageException</span>();<br>&#125;<br>&#125;<br>    &lt;uri&gt;http:<span class="hljs-comment">//www.hgnc.net/jsp2-tagSimple&lt;/uri&gt;</span><br>    &lt;tag&gt;<br>        &lt;name&gt;showbody&lt;/name&gt;<br>        &lt;tag-<span class="hljs-class"><span class="hljs-keyword">class</span><span class="hljs-title">&gt;cn</span>.<span class="hljs-title">itcast</span>.<span class="hljs-title">web</span>.<span class="hljs-title">simpletag</span>.<span class="hljs-title">SimpleDemo1&lt;/tag-class&gt;</span></span><br><span class="hljs-class">        <span class="hljs-title">&lt;body-content&gt;scriptless&lt;/body-content&gt;</span></span><br><span class="hljs-class">    <span class="hljs-title">&lt;/tag&gt;</span></span><br><span class="hljs-class"><span class="hljs-title">&lt;%@</span> <span class="hljs-title">page</span> <span class="hljs-title">language=</span>&quot;<span class="hljs-title">java</span>&quot; <span class="hljs-title">pageEncoding=</span>&quot;<span class="hljs-title">UTF-8</span>&quot;<span class="hljs-title">%&gt;</span></span><br><span class="hljs-class"><span class="hljs-title">&lt;%@</span> <span class="hljs-title">taglib</span> <span class="hljs-title">prefix=</span>&quot;<span class="hljs-title">itcast</span>&quot; <span class="hljs-title">uri=</span>&quot;<span class="hljs-title">http</span></span>:<span class="hljs-comment">//www.hgnc.net/jsp2-tagSimple&quot;%&gt;</span><br><br>&lt;!<span class="hljs-type">DOCTYPE</span> <span class="hljs-type">HTML</span> <span class="hljs-type">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;简单标签&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;itcast:showbody&gt;ssssssssssssss<br>&lt;/itcast:showbody&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>invoke方法详解</strong><br>invoke方法可以说是JspFragment最重要的方法，利用这个方法可以控制是否执行和输出标签体的内容、是否迭代执行标签体的内容或对标签体的执行结果进行修改后再输出。例如：<br>在标签处理器中如果没有调用invoke方法，其结果就相当于忽略标签体内容；<br>在标签处理器中重复调用invoke方法，则标签体内容将会被重复执行；<br>若想在标签处理器中修改标签体内容，只需在调用invoke方法时指定一个可取出结果数据的输出流对象（例如StringWriter），让标签体的执行结果输出到该输出流对象中，然后从该输出流对象中取出数据进行修改后再输出到目标设备，即可达到修改标签体的目的。  </p><p><strong>开发带属性的标签</strong><br>自定义标签可以定义一个或多个属性，这样，在JSP页面中应用自定义标签时就可以设置这些属性的值，通过这些属性为标签处理器传递参数信息，从而提高标签的灵活性和复用性。<br>要想让一个自定义标签具有属性，通常需要完成两个任务：<br>在标签处理器中编写每个属性对应的setter方法<br>在TLD文件中描术标签的属性  </p><p>为自定义标签定义属性时，每个属性都必须按照JavaBean的属性命名方式，在标签处理器中定义属性名对应的setter方法，用来接收JSP页面调用自定义标签时传递进来的属性值。 例如属性url，在标签处理器类中就要定义相应的setUrl(String url)方法。  </p><p>在标签处理器中定义相应的set方法后，JSP引擎在解析执行开始标签前，也就是调用doStartTag方法前，会调用set属性方法，为标签设置属性。  </p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="vbscript">&lt;%@page import=<span class="hljs-string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="vbscript">&lt;%@ taglib prefix=<span class="hljs-string">&quot;itcast&quot;</span> uri=<span class="hljs-string">&quot;http:\//www.hgnc.net/jsp2-tagSimple&quot;</span>%&gt;</span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>带属性标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">itcast:prop</span> <span class="hljs-attr">times</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">date</span>=<span class="hljs-string">&quot;</span></span></span><span class="vbscript">&lt;%=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()%&gt;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>kkkkkkkkkkkkl<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">itcast:prop</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>prop<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tag-class</span>&gt;</span>cn.itcast.web.simpletag.SimpleDemo5<span class="hljs-tag">&lt;/<span class="hljs-name">tag-class</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body-content</span>&gt;</span>scriptless<span class="hljs-tag">&lt;/<span class="hljs-name">body-content</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>times<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">required</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">required</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">attribute</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>date<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">required</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">required</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rtexprvalue</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">rtexprvalue</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">attribute</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tag</span>&gt;</span>  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.web.simpletag;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> javax.servlet.jsp.JspException;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.SkipPageException;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.tagext.JspFragment;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleTagSupport</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> times;<br><span class="hljs-keyword">private</span> Date date;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> times)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.times = times;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span><span class="hljs-params">(Date date)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.date = date;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doTag</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JspException, IOException </span>&#123;<br><span class="hljs-keyword">this</span>.getJspContext().getOut().write(date.toString());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;times;i++)<br><span class="hljs-keyword">this</span>.getJspBody().invoke(<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">//throw new SkipPageException();</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例</strong><br>使用标签控制页面逻辑案例：</p><h2 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h2><p>核心标签，国际化标签，数据库标签，Xml标签，Jstl函数（el函数）</p><p>一些常见的：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;<span class="hljs-keyword">c</span>:out&gt;<br>&lt;<span class="hljs-keyword">c</span>:set&gt;<br>&lt;<span class="hljs-keyword">c</span>:remove&gt;<br>&lt;<span class="hljs-keyword">c</span>:<span class="hljs-keyword">catch</span>&gt;<br>&lt;<span class="hljs-keyword">c</span>:if&gt;<br>&lt;<span class="hljs-keyword">c</span>:choose&gt;<br>&lt;<span class="hljs-keyword">c</span>:forEach&gt;<br>&lt;<span class="hljs-keyword">c</span>:param&gt;<br>&lt;<span class="hljs-keyword">c</span>:url&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1074. Reversing Linked List (25) -PAT甲级</title>
    <link href="/2018/02/19/2018-02-19-PAT-1074/"/>
    <url>/2018/02/19/2018-02-19-PAT-1074/</url>
    
    <content type="html"><![CDATA[<p>Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L. For example, given L being 1→2→3→4→5→6, if K = 3, then you must output 3→2→1→6→5→4; if K = 4, you must output 4→3→2→1→5→6.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (&lt;= 105) which is the total number of nodes, and a positive K (&lt;=N) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p><p>Then N lines follow, each describes a node in the format:</p><p>Address Data Next</p><p>where Address is the position of the node, Data is an integer, and Next is the position of the next node.</p><p><strong>Output Specification:</strong></p><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p><p><strong>Sample Input:</strong><br>00100 6 4<br>00000 4 99999<br>00100 1 12309<br>68237 6 -1<br>33218 3 00000<br>99999 5 68237<br>12309 2 33218<br><strong>Sample Output:</strong><br>00000 4 33218<br>33218 3 12309<br>12309 2 00100<br>00100 1 99999<br>99999 5 68237<br>68237 6 -1  </p><p>题目大意：给定n个点和起始地址，每行表示一个点地址，值，下一个点地址，逆置链表(每k个数)。<br>分析：水题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,a,k,p,num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> now[<span class="hljs-number">100005</span>],next[<span class="hljs-number">100005</span>],list[<span class="hljs-number">100005</span>],ans[<span class="hljs-number">100005</span>];<br>    cin&gt;&gt;p&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        cin&gt;&gt;a;cin&gt;&gt;now[a]&gt;&gt;next[a];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-number">-1</span>)&#123;<br>        list[num]=ans[num]=p;<br>        p=next[p];<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(num-num%k);i++)&#123;<br>        ans[i]=list[i/k*k+k<span class="hljs-number">-1</span>-i%k];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num<span class="hljs-number">-1</span>;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>,ans[i],now[ans[i]],ans[i+<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1&quot;</span>,ans[num<span class="hljs-number">-1</span>],now[ans[num<span class="hljs-number">-1</span>]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1073. Scientific Notation (20) -PAT甲级</title>
    <link href="/2018/02/19/2018-02-27-PAT-1073/"/>
    <url>/2018/02/19/2018-02-27-PAT-1073/</url>
    
    <content type="html"><![CDATA[<p>Scientific notation is the way that scientists easily handle very large numbers or very small numbers. The notation matches the regular expression [+-][1-9]”.”[0-9]+E[+-][0-9]+ which means that the integer portion has exactly one digit, there is at least one digit in the fractional portion, and the number and its exponent’s signs are always provided even when they are positive.</p><p>Now given a real number A in scientific notation, you are supposed to print A in the conventional notation while keeping all the significant figures.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, there is one line containing the real number A in scientific notation. The number is no more than 9999 bytes in length and the exponent’s absolute value is no more than 9999.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the input number A in the conventional notation, with all the significant figures kept, including trailing zeros,</p><p><strong>Sample Input 1:</strong><br>+1.23400E-03<br><strong>Sample Output 1:</strong><br>0.00123400<br><strong>Sample Input 2:</strong><br>-1.2E+10<br><strong>Sample Output 2:</strong><br>-12000000000  </p><p>题目大意：将科学计数法转换为一般形式。<br>分析：水题，模拟。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x7FFFFFFF</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">15</span>;<br><span class="hljs-keyword">char</span> s[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>    string ans = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">int</span> point = <span class="hljs-number">0</span>, add = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (s[start] != <span class="hljs-string">&#x27;E&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span> (s[start] == <span class="hljs-string">&#x27;.&#x27;</span>) point = ans.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">else</span> ans += s[start];<br>        start++;<br>    &#125;<br>    start++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start + <span class="hljs-number">1</span>; s[i]; i++) add = add * <span class="hljs-number">10</span> + s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (s[start] == <span class="hljs-string">&#x27;-&#x27;</span>) add = -add;<br>    <span class="hljs-keyword">if</span> (point + add &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0.&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = point + add; i &lt; <span class="hljs-number">0</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.<span class="hljs-built_in">size</span>(); i++)  &#123;<br>        <span class="hljs-keyword">if</span> (i == point + add) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = ans.<span class="hljs-built_in">size</span>(); i &lt; point + add; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1071. Speech Patterns (25) -PAT甲级</title>
    <link href="/2018/02/19/2018-02-19-PAT-1071/"/>
    <url>/2018/02/19/2018-02-19-PAT-1071/</url>
    
    <content type="html"><![CDATA[<p>People often have a preference among synonyms of the same word. For example, some may prefer “the police”, while others may prefer “the cops”. Analyzing such patterns can help to narrow down a speaker’s identity, which is useful when validating, for example, whether it’s still the same person behind an online avatar.</p><p>Now given a paragraph of text sampled from someone’s speech, can you find the person’s most commonly used word?</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, there is one line of text no more than 1048576 characters in length, terminated by a carriage return ‘\n’. The input contains at least one alphanumerical character, i.e., one character from the set [0-9 A-Z a-z].</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the most commonly occurring word in the input text, followed by a space and the number of times it has occurred in the input. If there are more than one such words, print the lexicographically smallest one. The word should be printed in all lower case. Here a “word” is defined as a continuous sequence of alphanumerical characters separated by non-alphanumerical characters or the line beginning/end.</p><p>Note that words are case insensitive.</p><p><strong>Sample Input:</strong><br>Can1: “Can a can can a can?  It can!”<br><strong>Sample Output:</strong><br>can 5</p><p>题目大意：统计出现次数最多的单词，合法的单词为字母+数字的组合，不区分大小写。<br>分析：水题。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    map&lt;string,<span class="hljs-keyword">int</span>&gt;mymap;<br>    string s=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">char</span> c;<br><br>    <span class="hljs-keyword">while</span>((c=<span class="hljs-built_in">getchar</span>())!=<span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>((c&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)||(c&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)||(c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>))&#123;<br>            <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)c+=<span class="hljs-number">32</span>;<br>            s+=c;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>())&#123;<br>                mymap[s]++;<br>                s=<span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>())mymap[s]++;<br>    <span class="hljs-keyword">int</span> max=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(map&lt;string,<span class="hljs-keyword">int</span>&gt;::iterator it=mymap.<span class="hljs-built_in">begin</span>();it!=mymap.<span class="hljs-built_in">end</span>();it++)&#123;<br>        <span class="hljs-keyword">if</span>(it-&gt;second&gt;max)&#123;<br>            max=it-&gt;second;<br>            s=it-&gt;first;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;s&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;max&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1070. Mooncake (25) -PAT甲级</title>
    <link href="/2018/02/13/2018-02-13-PAT-1070/"/>
    <url>/2018/02/13/2018-02-13-PAT-1070/</url>
    
    <content type="html"><![CDATA[<p>Mooncake is a Chinese bakery product traditionally eaten during the Mid-Autumn Festival. Many types of fillings and crusts can be found in traditional mooncakes according to the region’s culture. Now given the inventory amounts and the prices of all kinds of the mooncakes, together with the maximum total demand of the market, you are supposed to tell the maximum profit that can be made.</p><p>Note: partial inventory storage can be taken. The sample shows the following situation: given three kinds of mooncakes with inventory amounts being 180, 150, and 100 thousand tons, and the prices being 7.5, 7.2, and 4.5 billion yuans. If the market demand can be at most 200 thousand tons, the best we can do is to sell 150 thousand tons of the second kind of mooncake, and 50 thousand tons of the third kind. Hence the total profit is 7.2 + 4.5/2 = 9.45 (billion yuans).</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 positive integers N (&lt;=1000), the number of different kinds of mooncakes, and D (&lt;=500 thousand tons), the maximum total demand of the market. Then the second line gives the positive inventory amounts (in thousand tons), and the third line gives the positive prices (in billion yuans) of N kinds of mooncakes. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the maximum profit (in billion yuans) in one line, accurate up to 2 decimal places.</p><p><strong>Sample Input:</strong><br>3 200<br>180 150 100<br>7.5 7.2 4.5<br><strong>Sample Output:</strong><br>9.45</p><p>题目大意：给定容量，每种月饼的量和价格，怎么卖月饼最赚钱。<br>分析：水题，贪心。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">double</span> num,pri,w;<br>&#125;moon[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w&gt;b.w;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,d;<br>    cin&gt;&gt;n&gt;&gt;d;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;moon[i].num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;moon[i].pri;<br>        moon[i].w=moon[i].pri/moon[i].num;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(moon,moon+n,cmp);<br>    <span class="hljs-keyword">double</span> pro=<span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(d&gt;moon[i].num)&#123;           <span class="hljs-comment">//容量足够</span><br>            pro+=moon[i].pri;<br>            d-=moon[i].num;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            pro+=moon[i].w*d;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>,pro);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hyper-v上的Ubuntu安装</title>
    <link href="/2018/02/13/2018-02-13-Ubuntu/"/>
    <url>/2018/02/13/2018-02-13-Ubuntu/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>消沉了几天没有更博，这里先补上一篇利用win10自带的虚拟机(Hyper-v)安装Ubuntu系统的教程，为了下学期的Linux学习打下一点基础，接下来几天里一定会好好刷题好好写项目代码的QAQ</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先打开”控制面板”，在”程序和功能”子菜单中选择”启用或关闭windows功能”。<br><img src="/img/Ubuntu1.jpg" alt="img">  </p><p>在”启动或关闭Windows功能”子菜单中勾选”Hyper”把它展开都勾选上，然后”确定”重启电脑。<br><img src="/img/Ubuntu2.jpg" alt="img"><br><strong>ps:如果不能打钩，只是框框为黑色，需要在BIOS中开启虚拟化设置!!!</strong><br><img src="/img/Ubuntu6.jpg" alt="img"></p><p>等计算机重启完成，我们就会看到开始菜单中有”Hyper-v管理器”。<br><img src="/img/Ubuntu3.jpg" alt="img">  </p><p>双击打开虚拟机，点击 “操作” -&gt; “新建” -&gt; “虚拟机”，一直下一步就可以完成虚拟机的创建了没什么注意事项…个人电脑比较菜就只分了2G的虚拟内存和以及分了10G虚拟硬盘。<br><img src="/img/Ubuntu4.jpg" alt="img"><br>然后新建一个虚拟交换机，选择”外网”，在设置中添到虚拟机里。</p><p>在Linux官网上下载Ubuntu的ios镜像，在设置中导入，然后就可以启动虚拟机了!</p><p>Ubuntu的安装过程也只需要完全按照默认往下一步步走就可以完成了，然后按照要求重启就进入到了Ubuntu系统，大功告成!??<br><img src="/img/Ubuntu5.jpg" alt="img">  </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>中国风的 Ubuntu Kylin 可以说是很好看了<del>溜了</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1068. Find More Coins (30) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-27-PAT-1068/"/>
    <url>/2018/02/09/2018-02-27-PAT-1068/</url>
    
    <content type="html"><![CDATA[<p>Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she must pay the exact amount. Since she has as many as 104 coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find some coins to pay for it.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 positive numbers: N (&lt;=104, the total number of coins) and M(&lt;=102, the amount of money Eva has to pay). The second line contains N face values of the coins, which are all positive numbers. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the face values V1 &lt;= V2 &lt;= … &lt;= Vk such that V1 + V2 + … + Vk = M. All the numbers must be separated by a space, and there must be no extra space at the end of the line. If such a solution is not unique, output the smallest sequence. If there is no solution, output “No Solution” instead.</p><p>Note: sequence {A[1], A[2], …} is said to be “smaller” than sequence {B[1], B[2], …} if there exists k &gt;= 1 such that A[i]=B[i] for all i &lt; k, and A[k] &lt; B[k].</p><p><strong>Sample Input 1:</strong><br>8 9<br>5 9 8 7 2 3 4 1<br><strong>Sample Output 1:</strong><br>1 3 5<br><strong>Sample Input 2:</strong><br>4 8<br>7 2 4 3<br><strong>Sample Output 2:</strong><br>No Solution  </p><p>题目大意：输出最小的一组数和为m。<br>分析：01背包。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a&gt;b;&#125;<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">10005</span>],w[<span class="hljs-number">10005</span>],aa[<span class="hljs-number">10005</span>][<span class="hljs-number">10005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;w[i];<br>    <span class="hljs-built_in">sort</span>(w+<span class="hljs-number">1</span>,w+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=m;j&gt;=w[i];j--)&#123;<br>        <span class="hljs-keyword">if</span>(dp[j]&lt;=dp[j-w[i]]+w[i])&#123;<br>            dp[j]=dp[j-w[i]]+w[i];<br>            aa[i][j]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dp[m]!=m)cout&lt;&lt;<span class="hljs-string">&quot;No Solution&quot;</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt;arr;<br>        <span class="hljs-keyword">int</span> v=m,index=n;<br>        <span class="hljs-keyword">while</span>(v)&#123;<br>            <span class="hljs-keyword">if</span>(aa[index][v])&#123;<br>                arr.<span class="hljs-built_in">push_back</span>(w[index]);<br>                v-=w[index];<br>            &#125;<br>            index--;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(i)cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            cout&lt;&lt;arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1064. Complete Binary Search Tree (30) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-09-PAT-1064/"/>
    <url>/2018/02/09/2018-02-09-PAT-1064/</url>
    
    <content type="html"><![CDATA[<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p><ul><li>The left subtree of a node contains only nodes with keys less than the node’s key.  </li><li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.  </li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p>A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.</p><p>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p><p><strong>Sample Input:</strong><br>10<br>1 2 3 4 5 6 7 8 9 0<br><strong>Sample Output:</strong><br>6 3 8 1 5 7 9 0 2 4</p><p>题目大意：给一棵完全二叉搜索树求其层次遍历。<br>分析：二叉搜索树排序后为中序，然后根据root推出其层次遍历。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; in, level;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">levelorder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(start &gt; end) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> n = end - start + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> l =<span class="hljs-built_in">log</span>(n + <span class="hljs-number">1</span>) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">int</span> leave = n - (<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, l) - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> root = start + <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, l - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span> + <span class="hljs-built_in">min</span>((<span class="hljs-keyword">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, l - <span class="hljs-number">1</span>), leave);<br>    level[index] = in[root];<br>    <span class="hljs-built_in">levelorder</span>(start, root - <span class="hljs-number">1</span>, <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">levelorder</span>(root + <span class="hljs-number">1</span>, end, <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    in.<span class="hljs-built_in">resize</span>(n);<br>    level.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;in[i]);<br>    <span class="hljs-built_in">sort</span>(in.<span class="hljs-built_in">begin</span>(), in.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">levelorder</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, level[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, level[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1062. Talent and Virtue (25) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-09-PAT-1062/"/>
    <url>/2018/02/09/2018-02-09-PAT-1062/</url>
    
    <content type="html"><![CDATA[<p>About 900 years ago, a Chinese philosopher Sima Guang wrote a history book in which he talked about people’s talent and virtue. According to his theory, a man being outstanding in both talent and virtue must be a “sage（圣人）”; being less excellent but with one’s virtue outweighs talent can be called a “nobleman（君子）”; being good in neither is a “fool man（愚人）”; yet a fool man is better than a “small man（小人）” who prefers talent than virtue.</p><p>Now given the grades of talent and virtue of a group of people, you are supposed to rank them according to Sima Guang’s theory.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case first gives 3 positive integers in a line: N (&lt;=105), the total number of people to be ranked; L (&gt;=60), the lower bound of the qualified grades – that is, only the ones whose grades of talent and virtue are both not below this line will be ranked; and H (&lt;100), the higher line of qualification – that is, those with both grades not below this line are considered as the “sages”, and will be ranked in non-increasing order according to their total grades. Those with talent grades below H but virtue grades not are cosidered as the “noblemen”, and are also ranked in non-increasing order according to their total grades, but they are listed after the “sages”. Those with both grades below H, but with virtue not lower than talent are considered as the “fool men”. They are ranked in the same way but after the “noblemen”. The rest of people whose grades both pass the L line are ranked after the “fool men”.</p><p>Then N lines follow, each gives the information of a person in the format:</p><p>ID_Number Virtue_Grade Talent_Grade<br>where ID_Number is an 8-digit number, and both grades are integers in [0, 100]. All the numbers are separated by a space.<br><strong>Output Specification:</strong>  </p><p>The first line of output must give M (&lt;=N), the total number of people that are actually ranked. Then M lines follow, each gives the information of a person in the same format as the input, according to the ranking rules. If there is a tie of the total grade, they must be ranked with respect to their virtue grades in non-increasing order. If there is still a tie, then output in increasing order of their ID’s.</p><p><strong>Sample Input:</strong><br>14 60 80<br>10000001 64 90<br>10000002 90 60<br>10000011 85 80<br>10000003 85 80<br>10000004 80 85<br>10000005 82 77<br>10000006 83 76<br>10000007 90 78<br>10000008 75 79<br>10000009 59 90<br>10000010 88 45<br>10000012 80 100<br>10000013 90 99<br>10000014 66 60<br><strong>Sample Output:</strong><br>12<br>10000013 90 99<br>10000012 80 100<br>10000003 85 80<br>10000011 85 80<br>10000004 80 85<br>10000007 90 78<br>10000006 83 76<br>10000005 82 77<br>10000002 90 60<br>10000014 66 60<br>10000008 75 79<br>10000001 64 90</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">int</span> num,d,c;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(stu &amp;A)&#123;<br>        <span class="hljs-keyword">if</span>(d+c != A.d+A.c)<br>            <span class="hljs-keyword">return</span> d+c&gt;A.d+A.c;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d != A.d)<br>            <span class="hljs-keyword">return</span> d&gt;A.d;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> num&lt;A.num;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,l,h;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    vector&lt;stu&gt; v1,v2,v3,v4;<br>    stu temp;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;l,&amp;h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;temp.num,&amp;temp.d,&amp;temp.c);<br>        <span class="hljs-keyword">if</span>((temp.d&gt;=l)&amp;&amp;(temp.c&gt;=l))&#123;<br>            cnt++;<br>            <span class="hljs-keyword">if</span>((temp.d&gt;=h)&amp;&amp;(temp.c&gt;=h))<br>                v1.<span class="hljs-built_in">push_back</span>(temp);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp.d&gt;=h)<br>                v2.<span class="hljs-built_in">push_back</span>(temp);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp.d&gt;=temp.c)<br>                v3.<span class="hljs-built_in">push_back</span>(temp);<br>            <span class="hljs-keyword">else</span> v4.<span class="hljs-built_in">push_back</span>(temp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(v1.<span class="hljs-built_in">begin</span>(),v1.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(v2.<span class="hljs-built_in">begin</span>(),v2.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(v3.<span class="hljs-built_in">begin</span>(),v3.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(v4.<span class="hljs-built_in">begin</span>(),v4.<span class="hljs-built_in">end</span>());<br>    vector&lt;stu&gt;::iterator itr;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,cnt);<br>    <span class="hljs-keyword">for</span>(itr=v1.<span class="hljs-built_in">begin</span>();itr!=v1.<span class="hljs-built_in">end</span>();++itr)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,itr-&gt;num,itr-&gt;d,itr-&gt;c);<br>    <span class="hljs-keyword">for</span>(itr=v2.<span class="hljs-built_in">begin</span>();itr!=v2.<span class="hljs-built_in">end</span>();++itr)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,itr-&gt;num,itr-&gt;d,itr-&gt;c);<br>    <span class="hljs-keyword">for</span>(itr=v3.<span class="hljs-built_in">begin</span>();itr!=v3.<span class="hljs-built_in">end</span>();++itr)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,itr-&gt;num,itr-&gt;d,itr-&gt;c);<br>    <span class="hljs-keyword">for</span>(itr=v4.<span class="hljs-built_in">begin</span>();itr!=v4.<span class="hljs-built_in">end</span>();++itr)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,itr-&gt;num,itr-&gt;d,itr-&gt;c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1061. Dating (20) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-09-PAT-1061/"/>
    <url>/2018/02/09/2018-02-09-PAT-1061/</url>
    
    <content type="html"><![CDATA[<p>Sherlock Holmes received a note with some strange strings: “Let’s date! 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm”. It took him only a minute to figure out that those strange strings are actually referring to the coded time “Thursday 14:04” – since the first common capital English letter (case sensitive) shared by the first two strings is the 4th capital letter ‘D’, representing the 4th day in a week; the second common character is the 5th capital letter ‘E’, representing the 14th hour (hence the hours from 0 to 23 in a day are represented by the numbers from 0 to 9 and the capital letters from A to N, respectively); and the English letter shared by the last two strings is ‘s’ at the 4th position, representing the 4th minute. Now given two pairs of strings, you are supposed to help Sherlock decode the dating time.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case gives 4 non-empty strings of no more than 60 characters without white space in 4 lines.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the decoded time in one line, in the format “DAY HH:MM”, where “DAY” is a 3-character abbreviation for the days in a week – that is, “MON” for Monday, “TUE” for Tuesday, “WED” for Wednesday, “THU” for Thursday, “FRI” for Friday, “SAT” for Saturday, and “SUN” for Sunday. It is guaranteed that the result is unique for each case.</p><p><strong>Sample Input:</strong><br>3485djDkxh4hhGE<br>2984akDfkkkkggEdsb<br>s&amp;hgsfdk<br>d&amp;Hyscvnm<br><strong>Sample Output:</strong><br>THU 14:04</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string s1,s2,s3,s4;<br>    <span class="hljs-keyword">int</span> ans,k=<span class="hljs-number">0</span>,i,j,mark=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3&gt;&gt;s4;<br><br>    <span class="hljs-keyword">int</span> len1=s1.<span class="hljs-built_in">size</span>()&lt;s2.<span class="hljs-built_in">size</span>()?s1.<span class="hljs-built_in">size</span>():s2.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">int</span> len2=s3.<span class="hljs-built_in">size</span>()&lt;s4.<span class="hljs-built_in">size</span>()?s3.<span class="hljs-built_in">size</span>():s4.<span class="hljs-built_in">size</span>();<br><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s1.<span class="hljs-built_in">size</span>()&amp;&amp;i&lt;s2.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(s1[i]==s2[i]&amp;&amp;(s1[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;s1[i]&lt;=<span class="hljs-string">&#x27;G&#x27;</span>))&#123;<br>                      <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(s1[i])&#123;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;MON &quot;</span>;<span class="hljs-keyword">break</span>;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;TUE &quot;</span>;<span class="hljs-keyword">break</span>;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;WED &quot;</span>;<span class="hljs-keyword">break</span>;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;THU &quot;</span>;<span class="hljs-keyword">break</span>;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;FRI &quot;</span>;<span class="hljs-keyword">break</span>;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;F&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;SAT &quot;</span>;<span class="hljs-keyword">break</span>;<br>                         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;G&#x27;</span>:  cout&lt;&lt;<span class="hljs-string">&quot;SUN &quot;</span>;<span class="hljs-keyword">break</span>;<br>                                    &#125;<br>                         mark=i;<br>                         <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=mark+<span class="hljs-number">1</span>;i&lt;len1;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s1[i]==s2[i]&amp;&amp;(s1[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp;s1[i]&lt;=<span class="hljs-string">&#x27;N&#x27;</span> || s1[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s1[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>))&#123;<br>            <span class="hljs-keyword">if</span>(s1[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;s1[i]&lt;=<span class="hljs-string">&#x27;N&#x27;</span>)&#123;<br>                <span class="hljs-keyword">int</span> x=s1[i]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">10</span>;<br>                cout&lt;&lt;x/<span class="hljs-number">10</span>&lt;&lt;x%<span class="hljs-number">10</span>&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">int</span> y=s1[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                cout&lt;&lt;y/<span class="hljs-number">10</span>&lt;&lt;y%<span class="hljs-number">10</span>&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len2;i++)&#123;<br>          <span class="hljs-keyword">if</span>(s3[i]==s4[i]&amp;&amp;(s3[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;s3[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>||s3[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;s3[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>))&#123;<br>            cout&lt;&lt;i/<span class="hljs-number">10</span>&lt;&lt;i%<span class="hljs-number">10</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1060. Are They Equal (25) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-09-PAT-1060/"/>
    <url>/2018/02/09/2018-02-09-PAT-1060/</url>
    
    <content type="html"><![CDATA[<p>If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as 0.123*105 with simple chopping. Now given the number of significant digits on a machine and two float numbers, you are supposed to tell if they are treated equal in that machine.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case which gives three numbers N, A and B, where N (&lt;100) is the number of significant digits, and A and B are the two float numbers to be compared. Each float number is non-negative, no greater than 10100, and that its total digit number is less than 100.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in a line “YES” if the two numbers are treated equal, and then the number in the standard form “0.d1…dN*10^k” (d1&gt;0 unless the number is 0); or “NO” if they are not treated equal, and then the two numbers in their standard form. All the terms must be separated by a space, with no extra space at the end of a line.</p><p>Note: Simple chopping is assumed without rounding.</p><p><strong>Sample Input 1:</strong><br>3 12300 12358.9<br><strong>Sample Output 1:</strong><br>YES 0.123<em>10^5<br><strong>Sample Input 2:</strong><br>3 120 128<br><strong>Sample Output 2:</strong><br>NO 0.120</em>10^3 0.128*10^3</p><p>题目大意：判断a，b保留n位的科学计数法是否相同。<br>分析：暴力。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, p = <span class="hljs-number">0</span>, q = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> a[<span class="hljs-number">10000</span>], b[<span class="hljs-number">10000</span>], A[<span class="hljs-number">10000</span>], B[<span class="hljs-number">10000</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%s%s&quot;</span>, &amp;n, a, b);<br>    <span class="hljs-keyword">int</span> cnta = <span class="hljs-built_in">strlen</span>(a), cntb = <span class="hljs-built_in">strlen</span>(b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(a); i++) &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>            cnta = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(b); i++) &#123;<br>        <span class="hljs-keyword">if</span>(b[i] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>            cntb = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> indexa = <span class="hljs-number">0</span>, indexb = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[p] == <span class="hljs-string">&#x27;0&#x27;</span> || a[p] == <span class="hljs-string">&#x27;.&#x27;</span>) p++;<br>    <span class="hljs-keyword">while</span>(b[q] == <span class="hljs-string">&#x27;0&#x27;</span> || b[q] == <span class="hljs-string">&#x27;.&#x27;</span>) q++;<br>    <span class="hljs-keyword">if</span>(cnta &gt;= p)<br>        cnta = cnta - p;<br>    <span class="hljs-keyword">else</span><br>        cnta = cnta - p + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(cntb &gt;= q)<br>        cntb = cntb - q;<br>    <span class="hljs-keyword">else</span><br>        cntb = cntb - q + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-built_in">strlen</span>(a))<br>        cnta = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(q == <span class="hljs-built_in">strlen</span>(b))<br>        cntb = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(indexa &lt; n) &#123;<br>        <span class="hljs-keyword">if</span>(a[p] != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; p &lt; <span class="hljs-built_in">strlen</span>(a))<br>            A[indexa++] = a[p];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p &gt;= <span class="hljs-built_in">strlen</span>(a))<br>            A[indexa++] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(indexb &lt; n) &#123;<br>        <span class="hljs-keyword">if</span>(b[q] != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; q &lt; <span class="hljs-built_in">strlen</span>(b))<br>            B[indexb++] = b[q];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(q &gt;= <span class="hljs-built_in">strlen</span>(b))<br>            B[indexb++] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        q++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(A, B) == <span class="hljs-number">0</span> &amp;&amp; cnta == cntb)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES 0.%s*10^%d&quot;</span>, A, cnta);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO 0.%s*10^%d 0.%s*10^%d&quot;</span> , A, cnta, B, cntb);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1059. Prime Factors (25) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-09-PAT-1059/"/>
    <url>/2018/02/09/2018-02-09-PAT-1059/</url>
    
    <content type="html"><![CDATA[<p>Given any positive integer N, you are supposed to find all of its prime factors, and write them in the format N = p1^k1 * p2^k2 *…*pm^km.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case which gives a positive integer N in the range of long int.</p><p><strong>Output Specification:</strong></p><p>Factor N in the format N = p1^k1 * p2^k2 *…*pm^km, where pi’s are prime factors of N in increasing order, and the exponent ki is the number of pi – hence when there is only one pi, ki is 1 and must NOT be printed out.</p><p><strong>Sample Input:</strong><br>97532468<br><strong>Sample Output:</strong><br>97532468=2^2<em>11</em>17<em>101</em>1291</p><p>题目大意：输出n的质因子。<br>分析：建立一个素数表，暴力，注意1的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">prime</span>(<span class="hljs-number">500000</span>,<span class="hljs-number">1</span>);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;<span class="hljs-number">500000</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j*i&lt;<span class="hljs-number">500000</span>;j++)<br>            prime[i*j]=<span class="hljs-number">0</span>;<br>    ll n;<br>    cin&gt;&gt;n;<br>    cout&lt;&lt;n&lt;&lt;<span class="hljs-string">&#x27;=&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;cout&lt;&lt;<span class="hljs-string">&#x27;1&#x27;</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>,k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;=<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>,flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(prime[i]&amp;&amp;n%i==<span class="hljs-number">0</span>)&#123;<br>            cnt++;<br>            n/=i;<br>            flag=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-keyword">if</span>(k)cout&lt;&lt;<span class="hljs-string">&#x27;*&#x27;</span>;<br>            k=<span class="hljs-number">1</span>;<br>            cout&lt;&lt;i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">1</span>)cout&lt;&lt;<span class="hljs-string">&#x27;^&#x27;</span>&lt;&lt;cnt;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1058. A+B in Hogwarts (20) -PAT甲级</title>
    <link href="/2018/02/09/2018-02-09-PAT-1058/"/>
    <url>/2018/02/09/2018-02-09-PAT-1058/</url>
    
    <content type="html"><![CDATA[<p>If you are a fan of Harry Potter, you would know the world of magic has its own currency system – as Hagrid explained it to Harry, “Seventeen silver Sickles to a Galleon and twenty-nine Knuts to a Sickle, it’s easy enough.” Your job is to write a program to compute A+B where A and B are given in the standard form of “Galleon.Sickle.Knut” (Galleon is an integer in [0, 107], Sickle is an integer in [0, 17), and Knut is an integer in [0, 29)).</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case which occupies a line with A and B in the standard form, separated by one space.</p><p><strong>Output Specification:</strong></p><p>For each test case you should output the sum of A and B in one line, with the same format as the input.</p><p><strong>Sample Input:</strong><br>3.2.1 10.16.27<br><strong>Sample Output:</strong><br>14.1.28</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#define ll long long</span><br><span class="hljs-keyword">int</span> main()&#123;<br>    ll a,b,c,d,e,f;<br>    ll sum=<span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;%lld.%lld.%lld %lld.%lld.%lld&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f);<br>    sum+=(a+d)*<span class="hljs-number">17</span>*<span class="hljs-number">29</span>+(b+e)*<span class="hljs-number">29</span>+c+f;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%lld.%lld.%lld&quot;</span>,sum/(<span class="hljs-number">17</span>*<span class="hljs-number">29</span>),sum%(<span class="hljs-number">17</span>*<span class="hljs-number">29</span>)/<span class="hljs-number">29</span>,sum%29);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1056. Mice and Rice (25) -PAT甲级</title>
    <link href="/2018/02/06/2018-02-06-PAT-1056/"/>
    <url>/2018/02/06/2018-02-06-PAT-1056/</url>
    
    <content type="html"><![CDATA[<p>Mice and Rice is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse in a given map. The goal of each mouse is to eat as much rice as possible in order to become a FatMouse.</p><p>First the playing order is randomly decided for NP programmers. Then every NG programmers are grouped in a match. The fattest mouse in a group wins and enters the next turn. All the losers in this turn are ranked the same. Every NG winners are then grouped in the next match until a final winner is determined.</p><p>For the sake of simplicity, assume that the weight of each mouse is fixed once the programmer submits his/her code. Given the weights of all the mice and the initial playing order, you are supposed to output the ranks for the programmers.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: NP and NG (&lt;= 1000), the number of programmers and the maximum number of mice in a group, respectively. If there are less than NG mice at the end of the player’s list, then all the mice left will be put into the last group. The second line contains NP distinct non-negative numbers Wi (i=0,…NP-1) where each Wi is the weight of the i-th mouse respectively. The third line gives the initial playing order which is a permutation of 0,…NP-1 (assume that the programmers are numbered from 0 to NP-1). All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the final ranks in a line. The i-th number is the rank of the i-th programmer, and all the numbers must be separated by a space, with no extra space at the end of the line.</p><p><strong>Sample Input:</strong><br>11 3<br>25 18 0 46 37 3 19 22 57 56 10<br>6 0 8 7 10 5 9 1 4 2 3<br><strong>Sample Output:</strong><br>5 5 5 2 5 5 5 3 1 3 5  </p><p>题目大意：np为老鼠的数量，ng为每组最多g个老鼠。先给出np个老鼠的重量，再给出老鼠的初始顺序（第i名的老鼠是第j号，j从0开始）。每ng个老鼠分为一组，对于每组老鼠，选出最重的那个，晋级下一轮比赛，然后依次再以np个老鼠一组分类，然后选出重量最大的。。。直到只剩下一只老鼠，排名为1.输出为老鼠的排名，这个排名是按照原输入老鼠的顺序输出的。<br>分析：待补…</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span>&#123;  <br>    <span class="hljs-keyword">int</span> np,ng;  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;np,&amp;ng);  <br>    vector&lt;<span class="hljs-keyword">int</span>&gt;weight,order,rank;  <br>    weight.<span class="hljs-built_in">resize</span>(np),order.<span class="hljs-built_in">resize</span>(np),rank.<span class="hljs-built_in">resize</span>(np);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;np;++i)  <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;weight[i]);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;np;++i)  <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;order[i]);  <br>    <span class="hljs-keyword">int</span> curRank=<span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">while</span>(order.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)&#123;  <br>        <span class="hljs-comment">//if there are n competiter,then ceil(n/ng) is the number of competiter   </span><br>        <span class="hljs-comment">//who will enter the next turn,the other&#x27;s rank = ceil(n/ng)+1  </span><br>        curRank=order.<span class="hljs-built_in">size</span>()/ng+<span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">if</span>(order.<span class="hljs-built_in">size</span>()%ng&gt;<span class="hljs-number">0</span>)  <br>            ++curRank;  <br>        vector&lt;<span class="hljs-keyword">int</span>&gt;next;  <br>        next.<span class="hljs-built_in">clear</span>();  <br>        <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">while</span>(n&lt;order.<span class="hljs-built_in">size</span>())  &#123;<span class="hljs-comment">//find the competiter of the next turn  </span><br>            <span class="hljs-keyword">int</span> max=<span class="hljs-number">-1</span>,index=<span class="hljs-number">0</span>;  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ng &amp;&amp; n&lt;order.<span class="hljs-built_in">size</span>();++i,++n)  &#123;<span class="hljs-comment">//ng competiter a group to find the winner and push to the next turn  </span><br>                rank[order[n]]=curRank;  <br>                <span class="hljs-keyword">if</span>(weight[order[n]]&gt;max)  &#123;  <br>                    max=weight[order[n]];  <br>                    index=order[n];  <br>                &#125;  <br>            &#125;  <br>            next.<span class="hljs-built_in">push_back</span>(index);  <br>        &#125;  <br>        order=next;  <br>    &#125;  <br>    rank[order[<span class="hljs-number">0</span>]]=<span class="hljs-number">1</span>;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,rank[<span class="hljs-number">0</span>]);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;np;++i)  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,rank[i]);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1054. The Dominant Color (20) -PAT甲级</title>
    <link href="/2018/02/06/2018-02-06-PAT-1053/"/>
    <url>/2018/02/06/2018-02-06-PAT-1053/</url>
    
    <content type="html"><![CDATA[<p>Behind the scenes in the computer’s memory, color is always talked about as a series of 24 bits of information for each pixel. In an image, the color with the largest proportional area is called the dominant color. A strictly dominant color takes more than half of the total area. Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 positive numbers: M (&lt;=800) and N (&lt;=600) which are the resolutions of the image. Then N lines follow, each contains M digital colors in the range [0, 224). It is guaranteed that the strictly dominant color exists for each input image. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, simply print the dominant color in a line.</p><p><strong>Sample Input:</strong><br>5 3<br>0 0 255 16777215 24<br>24 24 0 0 24<br>24 0 24 24 24<br><strong>Sample Output:</strong><br>24</p><p>题目大意：在矩阵中找出现次数最多的颜色。<br>分析：水题！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,a,k,max=<span class="hljs-number">-1</span>;<br>    map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;my;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n*m;i++)&#123;<br>        cin&gt;&gt;a;<br>        my[a]++;<br>        <span class="hljs-keyword">if</span>(my[a]&gt;max)&#123;max=my[a];k=a;&#125;<br>    &#125;<br>    cout&lt;&lt;k;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1052. Linked List Sorting (25) -PAT甲级</title>
    <link href="/2018/02/06/2018-02-06-PAT-1052/"/>
    <url>/2018/02/06/2018-02-06-PAT-1052/</url>
    
    <content type="html"><![CDATA[<p>A linked list consists of a series of structures, which are not necessarily adjacent in memory. We assume that each structure contains an integer key and a Next pointer to the next structure. Now given a linked list, you are supposed to sort the structures according to their key values in increasing order.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive N (&lt; 105) and an address of the head node, where N is the total number of nodes in memory and the address of a node is a 5-digit positive integer. NULL is represented by -1.</p><p>Then N lines follow, each describes a node in the format:</p><p>Address Key Next</p><p>where Address is the address of the node in memory, Key is an integer in [-105, 105], and Next is the address of the next node. It is guaranteed that all the keys are distinct and there is no cycle in the linked list starting from the head node.</p><p><strong>Output Specification:</strong></p><p>For each test case, the output format is the same as that of the input, where N is the total number of nodes in the list and all the nodes must be sorted order.</p><p><strong>Sample Input:</strong><br>5 00001<br>11111 100 -1<br>00001 0 22222<br>33333 100000 11111<br>12345 -1 33333<br>22222 1000 12345<br><strong>Sample Output:</strong><br>5 12345<br>12345 -1 00001<br>00001 0 11111<br>11111 100 22222<br>22222 1000 33333<br>33333 100000 -1  </p><p>题目大意：给定一个链表，要求输出排序后的链表及其长度和首地址。<br>分析：用一个node结构体存值和地址，再拿一个map将值和其node连起来，采用cmp排序后将链表存入新的结构体b中即可。注意判断空链表情况&amp;题目有些点会不在链表上！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> key,now,next;<br>&#125;a[<span class="hljs-number">100005</span>],b[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.key&lt;b.key;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,s;<br>    cin&gt;&gt;n&gt;&gt;s;<br>    map&lt;<span class="hljs-keyword">int</span>,node&gt;mymap;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i].now&gt;&gt;a[i].key&gt;&gt;a[i].next;<br>        mymap[a[i].now]=a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 -1\n&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>        b[t].now=mymap[s].now;<br>        b[t].key=mymap[s].key;<br>        b[t].next=mymap[s].next;<br>        s=mymap[s].next;<br>        t++;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b,b+t,cmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %05d\n&quot;</span>,t, b[<span class="hljs-number">0</span>].now);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t<span class="hljs-number">-1</span>;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>, b[i].now,b[i].key,b[i+<span class="hljs-number">1</span>].now);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1\n&quot;</span>, b[t<span class="hljs-number">-1</span>].now,b[t<span class="hljs-number">-1</span>].key);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1051. Pop Sequence (25) -PAT甲级</title>
    <link href="/2018/02/06/2018-02-06-PAT-1051/"/>
    <url>/2018/02/06/2018-02-06-PAT-1051/</url>
    
    <content type="html"><![CDATA[<p>Given a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if M is 5 and N is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): M (the maximum capacity of the stack), N (the length of push sequence), and K (the number of pop sequences to be checked). Then K lines follow, each contains a pop sequence of N numbers. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p><p><strong>Sample Input:</strong><br>5 7 5<br>1 2 3 4 5 6 7<br>3 2 1 7 5 6 4<br>7 6 5 4 3 2 1<br>5 6 4 3 7 2 1<br>1 7 6 5 4 3 2<br><strong>Sample Output:</strong><br>YES<br>NO<br>NO<br>YES<br>NO  </p><p>题目大意：给n个数：1，2…n,栈的容量，问是否是合法的出栈序列。<br>分析：水题，模拟出栈，注意判断栈满，栈首和对应位置数相等时弹出。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> maxn,len,k;<br>    cin&gt;&gt;maxn&gt;&gt;len&gt;&gt;k;<br>    <span class="hljs-keyword">while</span>(k--)&#123;<br>        <span class="hljs-keyword">int</span> a[len+<span class="hljs-number">1</span>],j=<span class="hljs-number">1</span>;<br>        stack&lt;<span class="hljs-keyword">int</span>&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)<br>            cin&gt;&gt;a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)&#123;<br>            s.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()&gt;maxn)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>()&amp;&amp;s.<span class="hljs-built_in">top</span>()==a[j])&#123;<br>                s.<span class="hljs-built_in">pop</span>();<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==len+<span class="hljs-number">1</span>)cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1050. String Subtraction (20) -PAT甲级</title>
    <link href="/2018/02/06/2018-02-06-PAT-1050/"/>
    <url>/2018/02/06/2018-02-06-PAT-1050/</url>
    
    <content type="html"><![CDATA[<p>Given two strings S1 and S2, S = S1 - S2 is defined to be the remaining string after taking all the characters in S2 from S1. Your task is simply to calculate S1 - S2 for any given strings. However, it might not be that simple to do it fast.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case consists of two lines which gives S1 and S2, respectively. The string lengths of both strings are no more than 104. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string.</p><p><strong>Output Specification:</strong></p><p>For each test case, print S1 - S2 in one line.</p><p><strong>Sample Input:</strong><br>They are students.<br>aeiou<br><strong>Sample Output:</strong><br>Thy r stdnts.  </p><p>题目大意：字符串a-b。<br>分析：水题！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s1,s2;<br>    <span class="hljs-built_in">getline</span>(cin,s1);<br>    <span class="hljs-built_in">getline</span>(cin,s2);<br>    <span class="hljs-keyword">int</span> flag[<span class="hljs-number">150</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s2.<span class="hljs-built_in">length</span>();i++)<br>        flag[s2[i]]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s1.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(flag[s1[i]])<span class="hljs-keyword">continue</span>;<br>        cout&lt;&lt;s1[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1049. Counting Ones (30) -PAT甲级</title>
    <link href="/2018/02/06/2018-02-06-PAT-1049/"/>
    <url>/2018/02/06/2018-02-06-PAT-1049/</url>
    
    <content type="html"><![CDATA[<p>The task is simple: given any positive integer N, you are supposed to count the total number of 1’s in the decimal form of the integers from 1 to N. For example, given N being 12, there are five 1’s in 1, 10, 11, and 12.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case which gives the positive N (&lt;=230).</p><p><strong>Output Specification:</strong></p><p>For each test case, print the number of 1’s in one line.</p><p><strong>Sample Input:</strong><br>12<br><strong>Sample Output:</strong><br>5  </p><p>题目大意：求1~n一共含有多少个1。<br>分析：数学题，由低到高位暴力即可，设now为当前位的数，l,r为左右数，分类讨论，累加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,a=<span class="hljs-number">1</span>,now=<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n/a)&#123;<br>        l=n/(a*<span class="hljs-number">10</span>),now=n/a%<span class="hljs-number">10</span>,r=n%a;<br>        <span class="hljs-keyword">if</span>(now==<span class="hljs-number">0</span>)ans+=l*a;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now==<span class="hljs-number">1</span>)ans+=l*a+r+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> ans+=(l+<span class="hljs-number">1</span>)*a;<br>        a*=<span class="hljs-number">10</span>;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat安装及Eclipse配置</title>
    <link href="/2018/02/04/2018-02-04-config/"/>
    <url>/2018/02/04/2018-02-04-config/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于之前手贱删掉了电脑里与Eclipse环境变量有关的东西，导致其不能使用，索性卸掉下了Eclipse JEE用来学习Java Web相关知识，今早又打算安装Tomcat大干一场，结果在这反反复复的安装配置环境变量上卡了一个早上，因为自己的一些脑残行为遇到各种各样奇葩的报错，现将本次经历记录于此，系统整理一下整个正规的配置问题以及遇到的报错采取的解决方案，文中多处内容从大佬那迁移过来~</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>整个流程应大致分为三步  </p><ul><li>JDK安装和配置  </li><li>Tomcat安装和配置  </li><li>Elipse安装和配置  </li></ul><p>ps:三无的情况下才按此顺序操作，如果已有其一或二则跳过对应操作。</p><p><strong>JDK安装与配置</strong> 具体流程参照 <a href="https://jingyan.baidu.com/article/bea41d435bc695b4c41be648.html">https://jingyan.baidu.com/article/bea41d435bc695b4c41be648.html</a>  </p><ol><li>在官网上下载JDK并安装  </li><li>配置三个环境变量java_home，path和classpath（都写在系统变量里，无则新建，有则加分号）<br><img src="/img/config1.jpg" alt="img">  </li><li>JDK配置完成后，可在cmd中输入java -version查看java版本检验是否成功  </li></ol><p><strong>Tomcat安装与配置</strong>  </p><ol><li><p>在官网上下载Tomcat并安装 <a href="http://tomcat.apache.org/download-80.cgi#8.5.5">http://tomcat.apache.org/download-80.cgi#8.5.5</a><br><img src="/img/config2.jpg" alt="img">  </p></li><li><p>配置四个环境变量CATALINA_HOME、CATALINA_BASE、CATALINA_TMPDIR、path。<br><img src="/img/config3.jpg" alt="img">  </p></li><li><p>Tomcat配置完成后，在cmd中输入startup.bat，之后会弹出tomcat命令框，输出启动日志。也可以找到该文件手动运行。  </p></li><li><p>打开浏览器输入<a href="http://localhost:8080/%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%9B%E5%85%A5tomcat%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%EF%BC%8C%E9%82%A3%E4%B9%88%E6%81%AD%E5%96%9C%E4%BD%A0%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:8080/，如果进入tomcat欢迎界面，那么恭喜你，配置成功。</a><br><img src="/img/config4.jpg" alt="img"><br>ps:注意图中圈圈，在xml中创建用户名和密码。  </p></li></ol><p><strong>Eclipse JEE安装与配置</strong>  </p><ol><li><p>在官网上下载Eclipse JEE并安装 <a href="http://www.eclipse.org/downloads/eclipse-packages/">http://www.eclipse.org/downloads/eclipse-packages/</a><br>如果已有Eclipse，可”升级”为JEE：打开Eclipse，依次选择Help -&gt; Install New SoftWare，在弹出的窗口的 work with 中输入 <a href="http://download.eclipse.org/releases/neon">http://download.eclipse.org/releases/neon</a>  (neon是Eclipse版本名)，回车等待一会，就可以看到很多插件，拉到最下面打开  Web, XML, Java EE and OSGi Enterprise Development ，勾选下面所示四个插件，再点击下方的Next 等待安装重启就可以了。其它插件安装类似，只要勾选不同插件即可。<br><img src="/img/config5.jpg" alt="img">  </p></li><li><p>前面是JDK和Tomcat的配置，现在要用Eclipse把它们连起来！！！<br>连JDK见 <a href="http://blog.csdn.net/clj198606061111/article/details/11881575">http://blog.csdn.net/clj198606061111/article/details/11881575</a><br>连Tomcat&amp;项目部署见 <a href="http://blog.csdn.net/yerenyuan_pku/article/details/51830104">http://blog.csdn.net/yerenyuan_pku/article/details/51830104</a><br>~~  内容较多直接上链接…严格按照上述操作完成！</p></li></ol><h2 id="一些遇到的问题"><a href="#一些遇到的问题" class="headerlink" title="一些遇到的问题"></a>一些遇到的问题</h2><p>如果有不规范的操作，将会导致生成一些奇奇怪怪的问题，所以不要盲目乱点，先与上述步骤比较有没有不一样或未完成的地方。</p><ol><li><p>Tomcat启动startup.bat时闪退原因及解决方案： <a href="http://blog.csdn.net/qq496013218/article/details/74517593">http://blog.csdn.net/qq496013218/article/details/74517593</a><br>具体原因：tomcat在启动时，需要读取环境变量和配置信息，如果缺少Java环境，即缺少JAVA_HOME环境变量，则会出现闪退现象。  </p></li><li><p>运行cmd时报错：Error: could not find java.dll  Error:could not find java SE Runtime Environment/<br>解决方案：<a href="http://blog.csdn.net/hyr83960944/article/details/37592041">http://blog.csdn.net/hyr83960944/article/details/37592041</a>    </p></li><li><p>运行JSP报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path<br>解决方案：<a href="http://blog.csdn.net/testcs_dn/article/details/36455669">http://blog.csdn.net/testcs_dn/article/details/36455669</a>   </p></li><li><p>运行JSP报错：Several ports (8005, 8080, 8009) required by Tomcat v6.0 Server at localhost are already in use.<br>解决方案：<a href="http://blog.csdn.net/zhouyingge1104/article/details/7243363">http://blog.csdn.net/zhouyingge1104/article/details/7243363</a>   </p></li><li><p>补：今天打开eclipse莫名又弹了错，问题出在了eclipse和jdk的连接上，莫名失效了。<br>打开eclispe报错：java was started but returned exit code=2…….<br>解决方案：<a href="https://jingyan.baidu.com/article/9989c746255627f648ecfe83.html">https://jingyan.baidu.com/article/9989c746255627f648ecfe83.html</a></p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>应严格按照步骤操作，不要认为能正常运行之前的步骤就都是对的了，比如tomcat运行是需要JAVA_HOME变量的，java是不需要配置JAVA_HOME的，所以之前我即使在JAVA_HOME处出了问题，但是Eclipse仍旧能够正常编译运行程序。详见：<a href="http://bbs.csdn.net/topics/390696441">http://bbs.csdn.net/topics/390696441</a>   </p><p><strong>结：</strong> 本人菜鸡，如有错误之处望大佬指出多多包涵 QAQ</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1048. Find Coins (25) -PAT甲级</title>
    <link href="/2018/02/03/2018-02-03-PAT-1048/"/>
    <url>/2018/02/03/2018-02-03-PAT-1048/</url>
    
    <content type="html"><![CDATA[<p>Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount. Since she has as many as 105 coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 positive numbers: N (&lt;=105, the total number of coins) and M(&lt;=103, the amount of money Eva has to pay). The second line contains N face values of the coins, which are all positive numbers no more than 500. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the two face values V1 and V2 (separated by a space) such that V1 + V2 = M and V1 &lt;= V2. If such a solution is not unique, output the one with the smallest V1. If there is no solution, output “No Solution” instead.</p><p><strong>Sample Input 1:</strong><br>8 15<br>1 2 8 7 2 4 11 15<br><strong>Sample Output 1:</strong><br>4 11<br><strong>Sample Input 2:</strong><br>7 14<br>1 8 7 2 4 11 15<br><strong>Sample Output 2:</strong><br>No Solution  </p><p>题目大意：给定n个数找出一组i，j能组成m的，如果有多组，输出i最小的，找不到输出”No Solution”。<br>分析：水题，用num存数的个数，注意i=j=m/2的情况即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,tmp;<br>    <span class="hljs-keyword">int</span> num[<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        num[tmp]++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i*<span class="hljs-number">2</span>==m&amp;&amp;num[i]==<span class="hljs-number">1</span>)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(num[i]&amp;&amp;num[m-i])&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,i,m-i);<br>            flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No Solution&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1047. Student List for Course (25) -PAT甲级</title>
    <link href="/2018/02/03/2018-02-03-PAT-1047/"/>
    <url>/2018/02/03/2018-02-03-PAT-1047/</url>
    
    <content type="html"><![CDATA[<p>Zhejiang University has 40000 students and provides 2500 courses. Now given the registered course list of each student, you are supposed to output the student name lists of all the courses.</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains 2 numbers: N (&lt;=40000), the total number of students, and K (&lt;=2500), the total number of courses. Then N lines follow, each contains a student’s name (3 capital English letters plus a one-digit number), a positive number C (&lt;=20) which is the number of courses that this student has registered, and then followed by C course numbers. For the sake of simplicity, the courses are numbered from 1 to K.</p><p>Output Specification:</p><p>For each test case, print the student name lists of all the courses in increasing order of the course numbers. For each course, first print in one line the course number and the number of registered students, separated by a space. Then output the students’ names in alphabetical order. Each name occupies a line.</p><p><strong>Sample Input:</strong><br>10 5<br>ZOE1 2 4 5<br>ANN0 3 5 2 1<br>BOB5 5 3 4 2 1 5<br>JOE4 1 2<br>JAY9 4 1 2 5 4<br>FRA8 3 4 2 5<br>DON2 2 4 5<br>AMY7 1 5<br>KAT3 3 5 4 2<br>LOR6 4 2 4 1 5<br><strong>Sample Output:</strong><br>1 4<br>ANN0<br>BOB5<br>JAY9<br>LOR6<br>2 7<br>ANN0<br>BOB5<br>FRA8<br>JAY9<br>JOE4<br>KAT3<br>LOR6<br>3 1<br>BOB5<br>4 7<br>BOB5<br>DON2<br>FRA8<br>JAY9<br>KAT3<br>LOR6<br>ZOE1<br>5 9<br>AMY7<br>ANN0<br>BOB5<br>DON2<br>FRA8<br>JAY9<br>KAT3<br>LOR6<br>ZOE1  </p><p>题目大意：给出学生选的课，输出每门课的学生，按字典序。<br>分析：水题，vector数组+cmp。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">40005</span>][<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(name[a],name[b])&lt;<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,k,temp;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;v[<span class="hljs-number">2505</span>];   <span class="hljs-comment">// course</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>,name[i],&amp;k);<br>        <span class="hljs-keyword">while</span>(k--)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;temp);<br>            v[temp].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,i,v[i].<span class="hljs-built_in">size</span>());<br>        <span class="hljs-built_in">sort</span>(v[i].<span class="hljs-built_in">begin</span>(),v[i].<span class="hljs-built_in">end</span>(),cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;v[i].<span class="hljs-built_in">size</span>();j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,name[v[i][j]]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046. Shortest Distance (20) -PAT甲级</title>
    <link href="/2018/02/03/2018-02-03-PAT-1046/"/>
    <url>/2018/02/03/2018-02-03-PAT-1046/</url>
    
    <content type="html"><![CDATA[<p>The task is really simple: given N exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains an integer N (in [3, 105]), followed by N integer distances D1 D2 … DN, where Di is the distance between the i-th and the (i+1)-st exits, and DN is between the N-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer M (&lt;=104), with M lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to N. It is guaranteed that the total round trip distance is no more than 107.</p><p><strong>Output Specification:</strong></p><p>For each test case, print your results in M lines, each contains the shortest distance between the corresponding given pair of exits.</p><p><strong>Sample Input:</strong><br>5 1 2 4 14 9<br>3<br>1 3<br>2 5<br>4 1<br><strong>Sample Output:</strong><br>3<br>10<br>7  </p><p>题目大意：求一个环内a-&gt;b最短距离。<br>分析：水题，比较a-&gt;b和b-&gt;a即可。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,a,b,w;<br>    <span class="hljs-keyword">int</span> sum[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;w;<br>        sum[i+<span class="hljs-number">1</span>]=sum[i]+w;<br>    &#125;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(a&gt;b)<span class="hljs-built_in">swap</span>(a,b);<br>        <span class="hljs-keyword">int</span> k=sum[b]-sum[a];<br>        <span class="hljs-keyword">int</span> kk=sum[n+<span class="hljs-number">1</span>]-k;<br>        cout&lt;&lt;<span class="hljs-built_in">min</span>(k,kk)&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1045. Favorite Color Stripe (30) -PAT甲级</title>
    <link href="/2018/02/02/2018-02-02-PAT-1045/"/>
    <url>/2018/02/02/2018-02-02-PAT-1045/</url>
    
    <content type="html"><![CDATA[<p>Eva is trying to make her own color stripe out of a given one. She would like to keep only her favorite colors in her favorite order by cutting off those unwanted pieces and sewing the remaining parts together to form her favorite color stripe.</p><p>It is said that a normal human eye can distinguish about less than 200 different colors, so Eva’s favorite colors are limited. However the original stripe could be very long, and Eva would like to have the remaining favorite stripe with the maximum length. So she needs your help to find her the best result.</p><p>Note that the solution might not be unique, but you only have to tell her the maximum length. For example, given a stripe of colors {2 2 4 1 5 5 6 3 1 1 5 6}. If Eva’s favorite colors are given in her favorite order as {2 3 1 5 6}, then she has 4 possible best solutions {2 2 1 1 1 5 6}, {2 2 1 5 5 5 6}, {2 2 1 5 5 6 6}, and {2 2 3 1 1 5 6}.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=200) which is the total number of colors involved (and hence the colors are numbered from 1 to N). Then the next line starts with a positive integer M (&lt;=200) followed by M Eva’s favorite color numbers given in her favorite order. Finally the third line starts with a positive integer L (&lt;=10000) which is the length of the given stripe, followed by L colors on the stripe. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, simply print in a line the maximum length of Eva’s favorite stripe.</p><p><strong>Sample Input:</strong><br>6<br>5 2 3 1 5 6<br>12 2 2 4 1 5 5 6 3 1 1 5 6<br><strong>Sample Output:</strong><br>7  </p><p>题目大意：共n颗珠子，给定m颗喜欢的以及序列，给定长度为l的珠串，在当中找出只含有喜欢珠子的满足先后顺序的最长珠串。<br>分析：标记喜欢的珠子的下标，即e[2]=1,e[3]=2…在珠串中删去不喜欢的珠子，将剩下以下标存入新数组，这时问题就转化为求最长不下降子序列。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,x;<br>    <span class="hljs-keyword">int</span> e[<span class="hljs-number">205</span>]=&#123;<span class="hljs-number">0</span>&#125;,a[<span class="hljs-number">10005</span>],dp[<span class="hljs-number">10005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        cin&gt;&gt;x;<br>        e[x]=i;<br>    &#125;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>,res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        cin&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(!e[x])<span class="hljs-keyword">continue</span>;<br>        a[t++]=e[x];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<br>        dp[i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>            <span class="hljs-keyword">if</span>(a[j]&lt;=a[i])dp[i]=<span class="hljs-built_in">max</span>(dp[i],dp[j]+<span class="hljs-number">1</span>);<br>        res=<span class="hljs-built_in">max</span>(res,dp[i]);<br>    &#125;<br>    cout&lt;&lt;res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1044. Shopping in Mars (25) -PAT甲级</title>
    <link href="/2018/02/02/2018-02-02-PAT-1044/"/>
    <url>/2018/02/02/2018-02-02-PAT-1044/</url>
    
    <content type="html"><![CDATA[<p>Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M$15. We may have 3 options:</p><ol><li>Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4=15).   </li><li>Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6=15).  </li><li>Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7=15).<br>Now given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer.</li></ol><p>If it is impossible to pay the exact amount, you must suggest solutions with minimum lost.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 numbers: N (&lt;=105), the total number of diamonds on the chain, and M (&lt;=108), the amount that the customer has to pay. Then the next line contains N positive numbers D1 … DN (Di&lt;=103 for all i=1, …, N) which are the values of the diamonds. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print “i-j” in a line for each pair of i &lt;= j such that Di + … + Dj = M. Note that if there are more than one solution, all the solutions must be printed in increasing order of i.</p><p>If there is no solution, output “i-j” for pairs of i &lt;= j such that Di + … + Dj &gt; M with (Di + … + Dj - M) minimized. Again all the solutions must be printed in increasing order of i.</p><p>It is guaranteed that the total value of diamonds is sufficient to pay the given amount.</p><p><strong>Sample Input 1:</strong><br>16 15<br>3 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13<br><strong>Sample Output 1:</strong><br>1-5<br>4-6<br>7-8<br>11-11<br><strong>Sample Input 2:</strong><br>5 13<br>2 4 5 7 9<br><strong>Sample Output 2:</strong><br>2-4<br>4-5  </p><p>题目大意：在n个数的序列中找出和为m的所有连续片段，若没有则输出能组成的大于m的最小数。<br>分析：用sum数组去记录前i个数的和，考虑会超时用二分查找去获得i-&gt;j和为m的片段。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n,m,j,tmp;<br><span class="hljs-keyword">int</span> sum[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Try</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;     <span class="hljs-comment">// 找出(i,mid)&gt;=m的最小mid</span><br>    <span class="hljs-keyword">int</span> l=i,r=n;<br>    <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>        <span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(sum[mid]-sum[i<span class="hljs-number">-1</span>]&gt;=m)<br>            r=mid;<br>        <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    j=r,tmp=sum[j]-sum[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">100005</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+a[i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> min=sum[n];<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;result;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">Try</span>(i);<br>        <span class="hljs-keyword">if</span>(tmp&gt;min)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(tmp&gt;=m)&#123;           <span class="hljs-comment">// min为大于m的最小和</span><br>            <span class="hljs-keyword">if</span>(tmp&lt;min)&#123;<br>                result.<span class="hljs-built_in">clear</span>();<br>                min=tmp;<br>            &#125;<br>            result.<span class="hljs-built_in">push_back</span>(i);<br>            result.<span class="hljs-built_in">push_back</span>(j);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;result.<span class="hljs-built_in">size</span>();i+=<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d\n&quot;</span>, result[i], result[i+<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1043. Is It a Binary Search Tree (25) -PAT甲级</title>
    <link href="/2018/02/02/2018-02-02-PAT-1043/"/>
    <url>/2018/02/02/2018-02-02-PAT-1043/</url>
    
    <content type="html"><![CDATA[<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>If we swap the left and right subtrees of every node, then the resulting tree is called the Mirror Image of a BST.</p><p>Now given a sequence of integer keys, you are supposed to tell if it is the preorder traversal sequence of a BST or the mirror image of a BST.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=1000). Then N integer keys are given in the next line. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, first print in a line “YES” if the sequence is the preorder traversal sequence of a BST or the mirror image of a BST, or “NO” if not. Then if the answer is “YES”, print in the next line the postorder traversal sequence of that tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p><p><strong>Sample Input 1:</strong><br>7<br>8 6 5 7 10 8 11<br><strong>Sample Output 1:</strong><br>YES<br>5 7 6 8 11 10 8<br><strong>Sample Input 2:</strong><br>7<br>8 10 11 8 6 7 5<br><strong>Sample Output 2:</strong><br>YES<br>11 8 10 7 5 6 8<br><strong>Sample Input 3:</strong><br>7<br>8 6 8 5 10 9 11<br><strong>Sample Output 3:</strong><br>NO  </p><p>题目大意：判断序列是否是一颗二叉搜索树或其镜像的前序序列，如果是，输出其后序序列，否则输出NO。<br>分析：先假设是一颗二叉搜索树，flag=0，根据二叉搜索树的性质将原序列转化为后序序列，若长度不为n，设flag=1，清空数组再转化一次，仍旧不为n输出NO。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;pre,post;<br><span class="hljs-keyword">bool</span> flag;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">trans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root,<span class="hljs-keyword">int</span> tail)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(root&gt;tail)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> i=root+<span class="hljs-number">1</span>,j=tail;<br>    <span class="hljs-keyword">if</span>(!flag)&#123;             <span class="hljs-comment">//BST</span><br>        <span class="hljs-keyword">while</span>(i&lt;=tail&amp;&amp;pre[root]&gt;pre[i])i++;<br>        <span class="hljs-keyword">while</span>(j&gt;root&amp;&amp;pre[root]&lt;=pre[j])j--;<br>    &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-comment">//mirror image</span><br>        <span class="hljs-keyword">while</span>(i&lt;=tail&amp;&amp;pre[root]&lt;=pre[i])i++;<br>        <span class="hljs-keyword">while</span>(j&gt;root&amp;&amp;pre[root]&gt;pre[j])j--;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i-j!=<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">trans</span>(root+<span class="hljs-number">1</span>,j);        <span class="hljs-comment">// left　tree</span><br>    <span class="hljs-built_in">trans</span>(i,tail);          <span class="hljs-comment">// right tree</span><br>    post.<span class="hljs-built_in">push_back</span>(pre[root]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    pre.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;pre[i];<br>    <span class="hljs-built_in">trans</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(post.<span class="hljs-built_in">size</span>()!=n)&#123;<br>        flag=<span class="hljs-number">1</span>;<br>        post.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-built_in">trans</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(post.<span class="hljs-built_in">size</span>()==n)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl&lt;&lt;post[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;post[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习05-JSP技术</title>
    <link href="/2018/02/02/2018-02-02-javaweb5/"/>
    <url>/2018/02/02/2018-02-02-javaweb5/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JSP全称是Java Server Pages，它和servle技术一样，都是SUN公司定义的一种用于开发动态web资源的技术。  </p><p>JSP这门技术的最大的特点在于，写jsp就像在写html，但：<br>它相比html而言，html只能为用户提供静态数据，而Jsp技术允许在页面中嵌套java代码，为用户提供动态数据。<br>相比servlet而言，servlet很难对数据进行排版，而jsp除了可以用java代码产生动态数据的同时，也很容易对数据进行排版。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>JSP模版元素</strong><br>JSP页面中的HTML内容称之为JSP模版元素。<br>JSP模版元素定义了网页的基本骨架，即定义了页面的结构和外观。  </p><p><strong>JSP脚本表达式</strong><br>JSP脚本表达式（expression）用于将程序数据输出到客户端<br>    语法：&lt;%= 变量或表达式 %&gt;<br>    举例：当前时间:&lt;%= new java.util.Date() %&gt;<br>JSP引擎在翻译脚本表达式时，会将程序数据转成字符串，然后在相应位置用out.print(…) 将数据输给客户端。<br>JSP脚本表达式中的变量或表达式后面不能有分号（;）。  </p><p><strong>JSP脚本片断</strong><br>JSP脚本片断（scriptlet）用于在JSP页面中编写多行Java代码。语法：<br>&lt;%<br>        多行java代码<br>%&gt;<br>注意：JSP脚本片断中只能出现java代码，不能出现其它模板元素， JSP引擎在翻译JSP页面中，会将JSP脚本片断中的Java代码将被原封不动地放到Servlet的_jspService方法中。  </p><p><strong>JSP声明</strong><br>JSP页面中编写的所有代码，默认会翻译到servlet的service方法中， 而Jsp声明中的java代码被翻译到_jspService方法的外面。语法：<br>&lt;%！<br>    java代码<br>%&gt;<br>所以，JSP声明可用于定义JSP页面转换成的Servlet程序的静态代码块、成员变量和方法 。   </p><p>多个静态代码块、变量和函数可以定义在一个JSP声明中，也可以分别单独定义在多个JSP声明中。  </p><p>JSP隐式对象的作用范围仅限于Servlet的_jspService方法，所以在JSP声明中不能使用这些隐式对象。  </p><p><strong>JSP注释</strong><br>JSP注释的格式：<br>        &lt;%– 注释信息 –%&gt;<br>JSP引擎在将JSP页面翻译成Servlet程序时，忽略JSP页面中被注释的内容。  </p><p><strong>JSP指令</strong><br>JSP指令（directive）是为JSP引擎而设计的，它们并不直接产生任何可见输出，而只是告诉引擎如何处理JSP页面中的其余部分。<br>在JSP 2.0规范中共定义了三个指令：  </p><ul><li>page指令</li><li>Include指令</li><li>taglib指令</li></ul><p>SP指令的基本语法格式：<br>    &lt;%@ 指令 属性名=”值” %&gt;<br>    举例：&lt;%@ page contentType=”text/html;charset=gb2312”%&gt;<br>如果一个指令有多个属性，这多个属性可以写在一个指令中，也可以分开写。  </p><p>Page指令<br>page指令用于定义JSP页面的各种属性，无论page指令出现在JSP页面中的什么地方，它作用的都是整个JSP页面，为了保持程序的可读性和遵循良好的编程习惯，page指令最好是放在整个JSP页面的起始位置。<br>JSP 2.0规范中定义的page指令的完整语法：  </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&lt;<span class="hljs-comment">%@ page</span><br>[ language=<span class="hljs-string">&quot;java&quot;</span> ]<br>[ extends=<span class="hljs-string">&quot;package.class&quot;</span> ]<br>[ import=<span class="hljs-string">&quot;&#123;package.class | package.*&#125;, ...&quot;</span> ]<br>[ session=<span class="hljs-string">&quot;true | false&quot;</span> ]<br>[ buffer=<span class="hljs-string">&quot;none | 8kb | sizekb&quot;</span> ]<br>[ autoFlush=<span class="hljs-string">&quot;true | false&quot;</span> ]<br>[ isThreadSafe=<span class="hljs-string">&quot;true | false&quot;</span> ]<br>[ info=<span class="hljs-string">&quot;text&quot;</span> ]<br>[ errorPage=<span class="hljs-string">&quot;relative_url&quot;</span> ]<br>[ isErrorPage=<span class="hljs-string">&quot;true | false&quot;</span> ]<br>[ contentType=<span class="hljs-string">&quot;mimeType [ ;charset=characterSet ]&quot;</span> | <span class="hljs-string">&quot;text/html ; charset=ISO-8859-1&quot;</span> ]<br>[ pageEncoding=<span class="hljs-string">&quot;characterSet | ISO-8859-1&quot;</span> ]<br>[ isELIgnored=<span class="hljs-string">&quot;true | false&quot;</span> ]<br><span class="hljs-comment">%&gt;</span><br></code></pre></td></tr></table></figure><p>JSP 引擎自动导入下面的包：<br>java.lang.*<br>javax.servlet.*<br>javax.servlet.jsp.*<br>javax.servlet.http.*<br>errorPage属性的设置值必须使用相对路径，如果以“/”开头，表示相对于当前WEB应用程序的根目录（注意不是站点根目录），否则，表示相对于当前页面。<br>可以在web.xml文件中使用<error-page>元素为整个WEB应用程序设置错误处理页面，其中的<exception-type>子元素指定异常类的完全限定名，<location>元素指定以“/”开头的错误处理页面的路径。<br>如果设置了某个JSP页面的errorPage属性，那么在web.xml文件中设置的错误处理将不对该页面起作用。  </p><p>JSP引擎会根据page指令的contentType属性生成相应的调用ServletResponse.setContentType方法的语句。<br>page指令的contentType属性还具有说明JSP源文件的字符编码的作用。  </p><p>使用page指令解决JSP中文乱码<br>JSP程序存在有与Servlet程序完全相同的中文乱码问题<br>输出响应正文时出现的中文乱码问题<br>读取浏览器传递的参数信息时出现的中文乱码问题<br>JSP引擎将JSP页面翻译成Servlet源文件时也可能导致中文乱码问题<br>JSP引擎将JSP源文件翻译成的Servlet源文件默认采用UTF-8编码，而JSP开发人员可以采用各种字符集编码来编写JSP源文件，因此，JSP引擎将JSP源文件翻译成Servlet源文件时，需要进行字符编码转换。<br>如果JSP文件中没有说明它采用的字符集编码，JSP引擎将把它当作默认的ISO8859-1字符集编码处理。<br>如何解决JSP引擎翻译JSP页面时的中文乱码问题<br>通过page指令的contentType属性说明JSP源文件的字符集编码<br>page指令的pageEncoding属性说明JSP源文件的字符集编码  </p><p>include指令<br>include指令用于引入其它JSP页面，如果使用include指令引入了其它JSP页面，那么JSP引擎将把这两个JSP翻译成一个servlet。所以include指令引入通常也称之为静态引入。在编译时包含<br>语法：<br>    &lt;%@ include file=”relativeURL”%&gt;<br>    其中的file属性用于指定被引入文件的相对路径。  file属性的设置值必须使用相对路径，如果以“/”开头，表示相对于当前WEB应用程序的根目录（注意不是站点根目录），否则，表示相对于当前文件。<br>细节：<br>被引入的文件必须遵循JSP语法。<br>被引入的文件可以使用任意的扩展名，即使其扩展名是html，JSP引擎也会按照处理jsp页面的方式处理它里面的内容，为了见明知意，JSP规范建议使用.jspf（JSP fragments）作为静态引入文件的扩展名。<br>由于使用include指令将会涉及到2个JSP页面，并会把2个JSP翻译成一个servlet，所以这2个JSP页面的指令不能冲突（除了pageEncoding和导包除外）。<br>request.getRequestDispatcher(“/a.jsp”).forward(request,response);//动态包含，翻译成多个servlet，运行时包含。    </p><p>taglib指令<br>Taglib指令用于在JSP页面中导入标签库，讲自定义标签技术时讲。  </p><p><strong>JSP九大隐式对象对应关系</strong></p><p>request HttpServletRequest<br>response HttpServletResponse<br>session HttpSession<br>application servletContext<br>config   servletConfig<br>out      JspWriter  —–&gt;   PrintWriter<br>exception<br>page    this<br>pageContext    </p><p><strong>pageContext对象</strong>  </p><p>pageContext对象是JSP技术中最重要的一个对象，它代表JSP页面的运行环境，这个对象不仅封装了对其它8大隐式对象的引用，它自身还是一个域对象，可以用来保存数据。并且，这个对象还封装了web开发中经常涉及到的一些常用操作，例如引入和跳转其它资源、检索其它域对象中的属性等。    </p><p>通过pageContext获得其他对象<br>getException方法返回exception隐式对象<br>getPage方法返回page隐式对象<br>getRequest方法返回request隐式对象<br>getResponse方法返回response隐式对象<br>getServletConfig方法返回config隐式对象<br>getServletContext方法返回application隐式对象<br>getSession方法返回session隐式对象<br>getOut方法返回out隐式对象<br>pageContext封装其它8大内置对象的意义，思考：如果在编程过程中，把pageContext对象传递给一个普通java对象，那么这个java对象将具有什么功能？    //用在 自定义标签上   </p><p>pageContext作为域对象<br>pageContext对象的方法   </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void set<span class="hljs-constructor">Attribute(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String <span class="hljs-params">name</span>,<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.Object <span class="hljs-params">value</span>)</span>  <br>public java.lang.Object get<span class="hljs-constructor">Attribute(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String <span class="hljs-params">name</span>)</span>  <br>public void remove<span class="hljs-constructor">Attribute(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String <span class="hljs-params">name</span>)</span><br>pageContext对象中还封装了访问其它域的方法<br>public java.lang.Object get<span class="hljs-constructor">Attribute(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String <span class="hljs-params">name</span>,<span class="hljs-params">int</span> <span class="hljs-params">scope</span>)</span><br>public void set<span class="hljs-constructor">Attribute(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String <span class="hljs-params">name</span>, <span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.Object <span class="hljs-params">value</span>,<span class="hljs-params">int</span> <span class="hljs-params">scope</span>)</span><br>public void remove<span class="hljs-constructor">Attribute(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String <span class="hljs-params">name</span>,<span class="hljs-params">int</span> <span class="hljs-params">scope</span>)</span><br></code></pre></td></tr></table></figure><p>代表各个域的常量<br>PageContext.APPLICATION_SCOPE<br>PageContext.SESSION_SCOPE<br>PageContext.REQUEST_SCOPE<br>PageContext.PAGE_SCOPE<br>findAttribute方法    （*重点，查找各个域中的属性）  </p><p>引入和跳转到其他资源<br>PageContext类中定义了一个forward方法和两个include方法来分别简化和替代RequestDispatcher.forward方法和include方法  </p><p>传递给这些方法的资源路径都只能是相对路径，如果路径以“/”开头，表示相对于当前WEB应用程序的根目录，否则，表示相对于当前JSP所映射到的访问路径。  </p><p><strong>JSP标签</strong><br>虽然我们希望JSP页面仅用作数据显示模块，不要嵌套任何java代码引入任何业务逻辑，但在实际开发中不引入一点业务逻辑是不可能的，但引入业务逻辑会导致页面出现难看java代码，怎么办？<br>Sun公司允许用户开发自定义标签封装页面的java代码，以便jsp页面不出现一行java代码。当然sun公司在jsp页面中也内置了一些标签(这些标签叫做jsp标签)，开发人员使用这些标签可以完成页面的一些常用业务逻辑。<br>JSP标签也称之为Jsp Action(JSP动作)元素，它用于在JSP页面中提供业务逻辑功能。  </p><p>JSP常用标签<br>&lt;jsp:include&gt;标签<br>&lt;jsp:forward&gt;标签<br>&lt;jsp:param&gt;标签    </p><p>&lt;jsp:include&gt;标签<br>&lt;jsp:include&gt;标签用于把另外一个资源的输出内容插入进当前JSP页面的输出内容之中，这种在JSP页面执行时的引入方式称之为动态引入。<br>语法：<br>    &lt;jsp:include page=”relativeURL | &lt;%=expression%&gt;” flush=”true|false” /&gt;  </p><p>page属性用于指定被引入资源的相对路径，它也可以通过执行一个表达式来获得。<br>flush属性指定在插入其他资源的输出内容时，是否先将当前JSP页面的已输出的内容刷新到客户端。    </p><p>&lt;jsp:include&gt;与include指令的比较<br>&lt;jsp:include&gt;标签是动态引入， &lt;jsp:include&gt;标签涉及到的2个JSP页面会被翻译成2个servlet，这2个servlet的内容在执行时进行合并。<br>而include指令是静态引入，涉及到的2个JSP页面会被翻译成一个servlet，其内容是在源文件级别进行合并。  </p><p>不管是&lt;jsp:include&gt;标签，还是include指令，它们都会把2个JSP页面内容合并输出，所以这两个页面不要出现重复的HTML全局架构标签，否则输出给客户端的内容将会是个格式混乱的HTML文档。<br>&lt;jsp:include&gt;标签：使用page属性指定被引入资源。<br>include指令：使用file属性指定被引入资源。  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">假设myweb应用的根目录下有一个a.jsp文件如果将a.jsp页面映射成了如下地址：  <br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/myweb/</span>dir1/a.html  <br>在a.jsp页面中使用了如下语句引入b.jsp文件：  <br>&lt;jsp:include page=<span class="hljs-string">&quot;b.jsp&quot;</span> /&gt;  <br>请问：b.jsp要位于什么位置，上面的include才不会出错？　  <br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/myweb/</span>b.jspf  bad  <br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/myweb/</span>dir1/b.jspf   ok  <br>假设myweb应用程序的根目录下有一个a.jsp文件，如果将a.jsp页面映射为如下地址：  <br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/myweb/</span>dir1/a.html  <br>在a.jsp页面中使用了如下语句引入b.jspf文件：  <br>&lt;%@ include file=“b.jspf”%&gt;  <br>请问： b.jspf要位于什么位置，上面的include才不会出错？  <br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/myweb/</span>b.jspf   ok  <br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/myweb/</span>dir1/b.jspf   bad  <br></code></pre></td></tr></table></figure><p>&lt;jsp:forward&gt;标签<br>&lt;jsp:forward&gt;标签用于把请求转发给另外一个资源。<br>语法：<br>    &lt;jsp:forward page=”relativeURL | &lt;%=expression%&gt;” /&gt;<br>page属性用于指定请求转发到的资源的相对路径，它也可以通过执行一个表达式来获得。  </p><p>&lt;jsp:param&gt;标签<br>当使用<a href="jsp:include">jsp:include</a>和<a href="jsp:forward">jsp:forward</a>标签引入或将请求转发给其它资源时，可以使用<a href="jsp:param">jsp:param</a>标签向这个资源传递参数。<br>语法1：<br>    &lt;jsp:include page=”relativeURL | &lt;%=expression%&gt;”&gt;<br>        &lt;jsp:param name=”parameterName” value=”parameterValue|&lt;%= expression %&gt;” /&gt;<br>    &lt;/jsp:include&gt;<br>语法2：<br>    &lt;jsp:forward page=”relativeURL | &lt;%=expression%&gt;”&gt;<br>        &lt;jsp:param name=”parameterName” value=”parameterValue|&lt;%= expression %&gt;” /&gt;<br>    &lt;/jsp:include&gt;<br>&lt;jsp:param&gt;标签的name属性用于指定参数名，value属性用于指定参数值。在&lt;jsp:include&gt;和<a href="jsp:forward">jsp:forward</a>标签中可以使用多个&lt;jsp:param&gt;标签来传递多个参数。  </p><p><strong>映射JSP</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;servlet&gt;</span><br><span class="hljs-params">&lt;servlet-name&gt;</span>SimpleJspServlet<span class="hljs-params">&lt;/servlet-name&gt;</span><br><span class="hljs-params">&lt;jsp-file&gt;</span><span class="hljs-meta-keyword">/jsp/</span>simple.jsp<span class="hljs-params">&lt;/jsp-file&gt;</span><br><span class="hljs-params">&lt;load-on-startup&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/load-on-startup &gt;</span><br><span class="hljs-params">&lt;/servlet&gt;</span><br>……<br><span class="hljs-params">&lt;servlet-mapping&gt;</span><br><span class="hljs-params">&lt;servlet-name&gt;</span>SimpleJspServlet<span class="hljs-params">&lt;/servlet-name&gt;</span><br><span class="hljs-params">&lt;url-pattern&gt;</span><span class="hljs-meta-keyword">/xxx/</span>yyy.html<span class="hljs-params">&lt;/url-pattern&gt;</span><br><span class="hljs-params">&lt;/servlet-mapping&gt;</span><br></code></pre></td></tr></table></figure><p>如何查找JSP页面中的错误<br>JSP页面中的JSP语法格式有问题，导致其不能被翻译成Servlet源文件，JSP引擎将提示这类错误发生在JSP页面中的位置（行和列）以及相关信息。<br>JSP页面中的JSP语法格式没有问题，但被翻译成的Servlet源文件中出现了Java语法问题，导致JSP页面翻译成的Servlet源文件不能通过编译，JSP引擎也将提示这类错误发生在JSP页面中的位置（行和列）以及相关信息。<br>JSP页面翻译成的Servlet程序在运行时出现异常，这与普通Java程序的运行时错误完全一样，Java虚拟机将提示错误发生在Servlet源文件中的位置（行和列）以及相关信息。     </p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1041. Be Unique (20) -PAT甲级</title>
    <link href="/2018/02/01/2018-02-01-PAT-1041/"/>
    <url>/2018/02/01/2018-02-01-PAT-1041/</url>
    
    <content type="html"><![CDATA[<p>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1, 104]. The first one who bets on a unique number wins. For example, if there are 7 people betting on 5 31 5 88 67 88 17, then the second one who bets on 31 wins.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains a line which begins with a positive integer N (&lt;=105) and then followed by N bets. The numbers are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the winning number in a line. If there is no winner, print “None” instead.</p><p><strong>Sample Input 1:</strong><br>7 5 31 5 88 67 88 17<br><strong>Sample Output 1:</strong><br>31<br><strong>Sample Input 2:</strong><br>5 888 666 666 888 888<br><strong>Sample Output 2:</strong><br>None  </p><p>题目大意：找第一个只出现一次的数。<br>分析：水题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br>    <span class="hljs-keyword">int</span> n,i;<br>    <span class="hljs-keyword">int</span> num[<span class="hljs-number">10005</span>]=&#123;<span class="hljs-number">0</span>&#125;,a[<span class="hljs-number">100005</span>];<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        num[a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(num[a[i]]==<span class="hljs-number">1</span>)&#123;<br>            cout&lt;&lt;a[i];<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i==n)cout&lt;&lt;<span class="hljs-string">&quot;None&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1039. Course List for Student (25) -PAT甲级</title>
    <link href="/2018/02/01/2018-02-01-PAT-1039/"/>
    <url>/2018/02/01/2018-02-01-PAT-1039/</url>
    
    <content type="html"><![CDATA[<p>Zhejiang University has 40000 students and provides 2500 courses. Now given the student name lists of all the courses, you are supposed to output the registered course list for each student who comes for a query.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: N (&lt;=40000), the number of students who look for their course lists, and K (&lt;=2500), the total number of courses. Then the student name lists are given for the courses (numbered from 1 to K) in the following format: for each course i, first the course index i and the number of registered students Ni (&lt;= 200) are given in a line. Then in the next line, Ni student names are given. A student name consists of 3 capital English letters plus a one-digit number. Finally the last line contains the N names of students who come for a query. All the names and numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print your results in N lines. Each line corresponds to one student, in the following format: first print the student’s name, then the total number of registered courses of that student, and finally the indices of the courses in increasing order. The query results must be printed in the same order as input. All the data in a line must be separated by a space, with no extra space at the end of the line.</p><p><strong>Sample Input:</strong><br>11 5<br>4 7<br>BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1<br>1 4<br>ANN0 BOB5 JAY9 LOR6<br>2 7<br>ANN0 BOB5 FRA8 JAY9 JOE4 KAT3 LOR6<br>3 1<br>BOB5<br>5 9<br>AMY7 ANN0 BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1<br>ZOE1 ANN0 BOB5 JOE4 JAY9 FRA8 DON2 AMY7 KAT3 LOR6 NON9<br><strong>Sample Output:</strong><br>ZOE1 2 4 5<br>ANN0 3 1 2 5<br>BOB5 5 1 2 3 4 5<br>JOE4 1 2<br>JAY9 4 1 2 4 5<br>FRA8 3 2 4 5<br>DON2 2 4 5<br>AMY7 1 5<br>KAT3 3 2 4 5<br>LOR6 4 1 2 4 5<br>NON9 0  </p><p>题目大意：n个学生选m门课，每条记录表示选第k门课的学生。问每个学生的选课，按序输出。<br>分析：一开始用map+set写，最后一个点超时了，后来百度大佬用的hash，数组开到26 * 26 * 26 * 10 + 10!</p><p>菜鸡超时代码：   </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    map&lt;string,set&lt;<span class="hljs-keyword">int</span>&gt; &gt;mmap;<br>    <span class="hljs-keyword">int</span> n,m,a,k;<br>    string name;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;k;<br>        <span class="hljs-keyword">while</span>(k--)&#123;<br>            cin&gt;&gt;name;<br>            mmap[name].<span class="hljs-built_in">insert</span>(a);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;name;<br>        set&lt;<span class="hljs-keyword">int</span>&gt;temp=mmap[name];<br>        cout&lt;&lt;name&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;temp.<span class="hljs-built_in">size</span>();<br>        set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it;<br>        <span class="hljs-keyword">for</span>(it=temp.<span class="hljs-built_in">begin</span>();it!=temp.<span class="hljs-built_in">end</span>();it++)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;*it;<br>        &#125;cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大佬Hash代码：   </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getid</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *A)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (A[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span>) * <span class="hljs-number">26</span> * <span class="hljs-number">26</span> * <span class="hljs-number">10</span> + (A[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;A&#x27;</span>) * <span class="hljs-number">26</span> * <span class="hljs-number">10</span> + (A[<span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;A&#x27;</span>) * <span class="hljs-number">10</span> + A[<span class="hljs-number">3</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">26</span> * <span class="hljs-number">26</span> * <span class="hljs-number">26</span> * <span class="hljs-number">10</span> + <span class="hljs-number">10</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, k, no, num, id = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">5</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;no, &amp;num);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; num; j++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name);<br>            id = <span class="hljs-built_in">getid</span>(name);<br>            v[id].<span class="hljs-built_in">push_back</span>(no);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name);<br>        id = <span class="hljs-built_in">getid</span>(name);<br>        <span class="hljs-built_in">sort</span>(v[id].<span class="hljs-built_in">begin</span>(), v[id].<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %lu&quot;</span>, name, v[id].<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v[id].<span class="hljs-built_in">size</span>(); j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, v[id][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习04-会话技术</title>
    <link href="/2018/02/01/2018-02-01-javaweb4/"/>
    <url>/2018/02/01/2018-02-01-javaweb4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是会话？<br>会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。<br>会话过程中要解决的一些问题？<br>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据。<br>例如：多个用户点击超链接通过一个servlet各自购买了一个商品，服务器应该想办法把每一个用户购买的商品保存在各自的地方，以便于这些用户点结帐servlet时，结帐servlet可以得到用户各自购买的商品为用户结帐。<br>提问：这些数据保存在request或servletContext中行不行？</p><p><strong>隐藏字段：</strong> 将状态信息以窗体中看不到的输入字段响应给浏览器，在下次发窗体时一并发送这些隐藏的输入字段值。  </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>保存会话数据的两种技术：<br>Cookie：客户端技术，服务器把每个用户的数据以cookie的形式写给用户各自的浏览器。当用户使用浏览器再去访问服务器中的web资源时，就会带着各自的数据去。这样，web资源处理的就是用户各自的数据了。<br><img src="/img/cookie.jpg" alt="img"><br>Session：服务器端技术，利用这个技术，服务器在运行时可以为每一个用户的浏览器创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问服务器中的其它web资源时，其它web资源再从用户各自的session中取出数据为用户服务。<br><img src="/img/session.jpg" alt="img"></p><p>Cookie应用:<br>1.显示用户上次访问时间</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">response.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>response.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;<br>PrintWriter out = response.get<span class="hljs-constructor">Writer()</span>;<br>out.print(<span class="hljs-string">&quot;上次访问时间：&quot;</span>);<br>Cookie cookies<span class="hljs-literal">[]</span>=request.get<span class="hljs-constructor">Cookies()</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;cookies!=null<span class="hljs-operator"> &amp;&amp; </span>i&lt;cookies.length;i++)&#123;<br><span class="hljs-keyword">if</span>(cookies<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.get<span class="hljs-constructor">Name()</span>.equals(<span class="hljs-string">&quot;lastAccessTime&quot;</span>))&#123;<br>long cookieValue=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Long</span>.</span></span>parse<span class="hljs-constructor">Long(<span class="hljs-params">cookies</span>[<span class="hljs-params">i</span>].<span class="hljs-params">getValue</span>()</span>);<br>Date date=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">cookieValue</span>)</span>;<br>out.print(date.<span class="hljs-keyword">to</span><span class="hljs-constructor">LocaleString()</span>);<br>&#125;<br>&#125;<br><br>Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;lastAccessTime&quot;</span>,System.<span class="hljs-params">currentTimeMillis</span>()</span>+<span class="hljs-string">&quot;&quot;</span>);<br>cookie.set<span class="hljs-constructor">MaxAge(3600)</span>;<span class="hljs-comment">// 以秒为单位</span><br>cookie.set<span class="hljs-constructor">Path(<span class="hljs-string">&quot;/day07&quot;</span>)</span>;<br>response.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br></code></pre></td></tr></table></figure><p>ps:一个Cookie只能标识一种信息，它至少含有一个标识该信息的名称（NAME）和设置值（VALUE）。<br>一个WEB站点可以给一个WEB浏览器发送多个Cookie，一个WEB浏览器也可以存储多个WEB站点提供的Cookie。<br>浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB。<br>如果创建了一个cookie，并将他发送到浏览器，默认情况下它是一个会话级别的cookie（即存储在浏览器的内存中），用户退出浏览器之后即被删除。若希望浏览器将该cookie存储在磁盘上，则需要使用maxAge，并给出一个以秒为单位的时间。将最大时效设为0则是命令浏览器删除该cookie。<br>注意，删除cookie时，path必须一致，否则不会删除  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//清除cookie，用javascript也可实现</span><br>Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;lastAccessTime&quot;</span>,System.<span class="hljs-params">currentTimeMillis</span>()</span>+<span class="hljs-string">&quot;&quot;</span>);<br>cookie.set<span class="hljs-constructor">MaxAge(0)</span>;<span class="hljs-comment">// 以秒为单位</span><br>cookie.set<span class="hljs-constructor">Path(<span class="hljs-string">&quot;/day07&quot;</span>)</span>;<br>response.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br></code></pre></td></tr></table></figure><p>2.显示用户上次浏览过的商品</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//清除cookie</span><br><span class="hljs-keyword">public</span> class CookieDemo3 extends HttpServlet &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response)<br><span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>PrintWriter out = response.getWriter();<br><span class="hljs-comment">//输出所有商品</span><br>out.write(<span class="hljs-string">&quot;本站有如下商品:&lt;br/&gt;&quot;</span>);<br>Map&lt;<span class="hljs-keyword">String</span>,Book&gt;<span class="hljs-built_in">map</span>=Db.getAll();<br><span class="hljs-keyword">for</span>(Map.Entry&lt;<span class="hljs-keyword">String</span>, Book&gt; entry:<span class="hljs-built_in">map</span>.entrySet())&#123;<br>Book book=entry.getValue();<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;a target=\&quot;_blank\&quot; href=&#x27;/day07/servlet/cookieDemo4?id=&quot;</span>+book.getId()+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+book.getName()+<span class="hljs-string">&quot;&lt;/a&gt;&lt;br/&gt;&quot;</span>);<br><br>&#125;<br><span class="hljs-comment">//显示用户看过的商品</span><br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;br/&gt;你曾经看过的商品&lt;br/&gt;&quot;</span>);<br>Cookie cookies[]=request.getCookies();<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;cookies!=<span class="hljs-keyword">null</span> &amp;&amp; i&lt;cookies.length;i++)&#123;<br><span class="hljs-keyword">if</span>(cookies[i].getName().equals(<span class="hljs-string">&quot;bookHistory&quot;</span>))&#123;<br><span class="hljs-keyword">String</span> ids[]=cookies[i].getValue().<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;\\,&quot;</span>);<span class="hljs-comment">//2,3,1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">String</span> id:ids)&#123;<br>Book book=(Book) Db.getAll().<span class="hljs-built_in">get</span>(id);<br>out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;a target=\&quot;_blank\&quot; href=&#x27;/day07/servlet/cookieDemo4?id=&quot;</span>+book.getId()+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+book.getName()+<span class="hljs-string">&quot;&lt;/a&gt;&lt;br/&gt;&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>class Db&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;<span class="hljs-keyword">String</span>,Book&gt; <span class="hljs-built_in">map</span>=<span class="hljs-keyword">new</span> LinkedHashMap&lt;<span class="hljs-keyword">String</span>,Book&gt;();<br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;JavaWeb开发&quot;</span>,<span class="hljs-string">&quot;老k&quot;</span>,<span class="hljs-string">&quot;一本好书&quot;</span>));<br><span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;jdbc开发&quot;</span>,<span class="hljs-string">&quot;老张&quot;</span>,<span class="hljs-string">&quot;一本好书&quot;</span>));<br><span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;spring开发&quot;</span>,<span class="hljs-string">&quot;老li&quot;</span>,<span class="hljs-string">&quot;一本好书&quot;</span>));<br><span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;struts开发&quot;</span>,<span class="hljs-string">&quot;老张&quot;</span>,<span class="hljs-string">&quot;一本好书&quot;</span>));<br><span class="hljs-built_in">map</span>.put(<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-keyword">new</span> Book(<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;android开发&quot;</span>,<span class="hljs-string">&quot;老bi&quot;</span>,<span class="hljs-string">&quot;一本好书&quot;</span>));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map getAll()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>;<br>&#125;<br>&#125;<br><br>class Book&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> id,name,author,description;<br>  ...<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//显示详细信息的servlet</span><br><br>public <span class="hljs-keyword">class</span> CookieDemo4 extends HttpServlet &#123;<br><br>public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span><br>throws ServletException, IOException &#123;<br><span class="hljs-comment">//根据用户带过来的id，显示相应的详细信息</span><br>response.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>response.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;<br>PrintWriter out = response.get<span class="hljs-constructor">Writer()</span>;<br>String id=request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;id&quot;</span>)</span>;<br>Book book=(Book)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Db</span>.</span></span>get<span class="hljs-constructor">All()</span>.get(id);<br>out.write(book.get<span class="hljs-constructor">Id()</span>+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>out.write(book.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>out.write(book.get<span class="hljs-constructor">Author()</span>+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>out.write(book.get<span class="hljs-constructor">Description()</span>+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br><span class="hljs-comment">//2.构建cookie，回写给浏览器；</span><br>String cookieValue=build<span class="hljs-constructor">Cookie(<span class="hljs-params">id</span>,<span class="hljs-params">request</span>)</span>;<br>Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;bookHistory&quot;</span>,<span class="hljs-params">cookieValue</span>)</span>;<br>cookie.set<span class="hljs-constructor">MaxAge(1<span class="hljs-operator">*</span>30<span class="hljs-operator">*</span>24<span class="hljs-operator">*</span>3600)</span>;<span class="hljs-comment">//1 个月</span><br>cookie.set<span class="hljs-constructor">Path(<span class="hljs-string">&quot;/day07&quot;</span>)</span>;<br>response.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> String build<span class="hljs-constructor">Cookie(String <span class="hljs-params">id</span>, HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br><span class="hljs-comment">//bookHistory =null   1    1</span><br><span class="hljs-comment">//bookHistory=2,5,1   1    1,2,5</span><br><span class="hljs-comment">//bookHistory=2,5,4   1    1,2,5</span><br><span class="hljs-comment">//bookHistroy=2,5     1    1,2,5   // 假如列表最多3个</span><br>String bookHistroy=null;<br>Cookie cookies<span class="hljs-literal">[]</span>=request.get<span class="hljs-constructor">Cookies()</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;cookies!=null<span class="hljs-operator"> &amp;&amp; </span>i&lt;cookies.length;i++)&#123;<br><span class="hljs-keyword">if</span>(cookies<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.get<span class="hljs-constructor">Name()</span>.equals(<span class="hljs-string">&quot;bookHistory&quot;</span>))&#123;<br>bookHistroy=cookies<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.get<span class="hljs-constructor">Value()</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(bookHistroy==null)<br>return id;<br><span class="hljs-comment">//if(bookHistroy.contains(id))不能这样  21,23 也包括1</span><br>List&lt;String&gt; <span class="hljs-built_in">list</span>=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">bookHistroy</span>.<span class="hljs-params">split</span>(<span class="hljs-string">&quot;\\,&quot;</span>)</span>);<br>LinkedList &lt;String&gt;linkedlist=<span class="hljs-keyword">new</span> LinkedList&lt;String&gt;(<span class="hljs-built_in">list</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>.contains(id))&#123;<br>linkedlist.remove(id);<br>linkedlist.add<span class="hljs-constructor">First(<span class="hljs-params">id</span>)</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>.size<span class="hljs-literal">()</span>&gt;=<span class="hljs-number">3</span>)&#123;<br>linkedlist.remove<span class="hljs-constructor">Last()</span>;<br>linkedlist.add<span class="hljs-constructor">First(<span class="hljs-params">id</span>)</span>;<br>&#125;<span class="hljs-keyword">else</span><br>linkedlist.add<span class="hljs-constructor">First(<span class="hljs-params">id</span>)</span>;<br>&#125;<br>StringBuffer sb=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br><span class="hljs-keyword">for</span>(String bid : linkedlist)&#123;<br>sb.append(bid+<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>return sb.delete<span class="hljs-constructor">CharAt(<span class="hljs-params">sb</span>.<span class="hljs-params">length</span>()</span>-<span class="hljs-number">1</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Session应用：<br>完成简单的购物功能(只有部分代码)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">out.print(<span class="hljs-string">&quot;本站有如下商品&lt;br/&gt;&quot;</span>);<br>Map &lt;String,Book&gt;map=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Db</span>.</span></span>get<span class="hljs-constructor">All()</span>;<br><span class="hljs-keyword">for</span>(Map.Entry&lt;String, Book&gt; entry:map.entry<span class="hljs-constructor">Set()</span>)&#123;<br>Book book=entry.get<span class="hljs-constructor">Value()</span>;<br>String str=<span class="hljs-string">&quot;&lt;a target=\&quot;_blank\&quot; href=&#x27;&quot;</span>+request.get<span class="hljs-constructor">ContextPath()</span>+<span class="hljs-string">&quot;/servlet/buyServlet?id=&quot;</span>+book.get<span class="hljs-constructor">Id()</span>+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+book.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;购买&quot;</span>+<span class="hljs-string">&quot;&lt;/a&gt;&lt;br/&gt;&quot;</span>;<br>out.print(str);<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;a&quot;</span>+request.get<span class="hljs-constructor">ContextPath()</span>+<span class="hljs-string">&quot;b&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String id=request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;id&quot;</span>)</span>;<br>Book book=(Book)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Db</span>.</span></span>get<span class="hljs-constructor">All()</span>.get(id);<br>HttpSession session=request.get<span class="hljs-constructor">Session()</span>;<br><span class="hljs-comment">//用session中得到用户购买的商品集合</span><br>List &lt;Book&gt; <span class="hljs-built_in">list</span>=(List)session.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;list&quot;</span>)</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>==null)&#123;<br><span class="hljs-built_in">list</span>=<span class="hljs-keyword">new</span> LinkedList&lt;Book&gt;<span class="hljs-literal">()</span>;<br>session.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-params">list</span>)</span>;<br>&#125;<br><span class="hljs-built_in">list</span>.add(book);<br>response.send<span class="hljs-constructor">Redirect(<span class="hljs-params">request</span>.<span class="hljs-params">getContextPath</span>()</span>+<span class="hljs-string">&quot;/servlet/listCartServlet&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">HttpSession <span class="hljs-keyword">session</span>=request.getSession(<span class="hljs-keyword">false</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">session</span>==<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;您没有购买任何商品&quot;);<span class="hljs-keyword">return</span>;<br>&#125;<br>List&lt;Book&gt; list=(List) <span class="hljs-keyword">session</span>.getAttribute(&quot;list&quot;);<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;你购买了如下商品&quot;);<br><span class="hljs-keyword">for</span>(Book book:list)&#123;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(book.getName()+&quot;&lt;br/&gt;&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p>Session原理：<br><img src="/img/session2.jpg" alt="img"></p><p>问题：如何实现多个IE浏览器共享同一session？(应用：关掉IE后，再开IE，上次购买的商品还在。)  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">HttpSession session=request.get<span class="hljs-constructor">Session()</span>;<br>session.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;洗衣机&quot;</span>)</span>;<br>String id=session.get<span class="hljs-constructor">Id()</span>;<br>Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;JSESSIONID&quot;</span>,<span class="hljs-params">id</span>)</span>;<br>cookie.set<span class="hljs-constructor">Path(<span class="hljs-string">&quot;/day07&quot;</span>)</span>;<br>cookie.set<span class="hljs-constructor">MaxAge(30<span class="hljs-operator">*</span>60)</span>;<span class="hljs-comment">//30 minutes</span><br>response.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br></code></pre></td></tr></table></figure><p>IE禁用Cookie后的session处理(URL重写)<br>response. encodeRedirectURL(java.lang.String url)   用于对sendRedirect方法后的url地址进行重写。<br>response. encodeURL(java.lang.String url)  用于对表单action和超链接的url地址进行重写</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;%<br>  request.getSession();<br>  String <span class="hljs-attribute">str1</span>=response.encodeURL(&quot;/day07/servlet/sessionDemo1&quot;);<br>  String <span class="hljs-attribute">str2</span>=response.encodeURL(&quot;/day07/servlet/sessionDemo2&quot;);  <br>%&gt;<br>  &lt;a <span class="hljs-attribute">href</span>=&lt;%=str1%&gt; <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;购买&lt;/a&gt; &lt;br&gt;<br>  &lt;a <span class="hljs-attribute">href</span>=&lt;%=str2 %&gt; <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;结账&lt;/a&gt; &lt;br&gt;<br></code></pre></td></tr></table></figure><p>Session案例：<br>防止表单重复提交<br>单页面由servlet程序生成，servlet为每次产生的表单页面分配一个唯一的随机标识号，并在FORM表单的一个隐藏字段中设置这个标识号，同时在当前用户的Session域中保存这个标识号。<br>当用户提交FORM表单时，负责处理表单提交的serlvet得到表单提交的标识号，并与session中存储的标识号比较，如果相同则处理表单提交，处理完后清除当前用户的Session域中存储的标识号。<br>在下列情况下，服务器程序将拒绝用户提交的表单请求：  </p><ul><li>存储Session域中的表单标识号与表单提交的标识号不同  </li><li>当前用户的Session中不存在表单标识号  </li><li>用户提交的表单数据中没有标识号字段  </li></ul><p>编写工具类生成表单标识号：TokenProcessor  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//首页</span><br><br>public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span><br>throws ServletException, IOException &#123;<br><span class="hljs-comment">//产生随机数（表单号)</span><br>TokenProcessor tp=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TokenProcessor</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>String token=tp.generate<span class="hljs-constructor">Token()</span>;<br>request.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-params">token</span>)</span>;<br>request.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/form.jsp&quot;</span>)</span>.forward(request, response);<br>&#125;<br><span class="hljs-keyword">class</span> TokenProcessor&#123;<span class="hljs-comment">//令牌  </span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1。构造 方法私有</span><br><span class="hljs-comment"> * 2。自己创建一个</span><br><span class="hljs-comment"> * 3。对外暴露一个方法，允许获取上面创建的对象 *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-constructor">TokenProcessor()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> static final TokenProcessor instance=<span class="hljs-keyword">new</span> <span class="hljs-constructor">TokenProcessor()</span>;<br>public static TokenProcessor get<span class="hljs-constructor">Instance()</span>&#123;<br>return instance;<br><br>&#125;<br>public String generate<span class="hljs-constructor">Token()</span>&#123;<br>String token=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>+<span class="hljs-keyword">new</span> <span class="hljs-constructor">Random()</span>.next<span class="hljs-constructor">Int()</span>+<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>MessageDigest md=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MessageDigest</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-string">&quot;md5&quot;</span>)</span>;<br>byte <span class="hljs-literal">[]</span>md5=md.digest(token.get<span class="hljs-constructor">Bytes()</span>);<br><span class="hljs-comment">//base64编码</span><br>BASE64Encoder encoder=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BASE64Encoder()</span>;<span class="hljs-comment">//文档没有正式发布</span><br>return encoder.encode(md5);<br><span class="hljs-comment">//return new String(md5);</span><br>&#125; catch (NoSuchAlgorithmException e) &#123;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-params">e</span>)</span>;<br>&#125;<br><span class="hljs-comment">//return null;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">//form.jsp</span><br><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My JSP &#x27;form.jsp&#x27; starting page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>    </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="xml">  var iscommitted=false;</span><br><span class="xml">  function dosubmit()&#123;</span><br><span class="xml">  if(!iscommitted)&#123;</span><br><span class="xml">  iscommitted=true;</span><br><span class="xml">  document.getElementById(&quot;tbn&quot;).disabled=&quot;disabled&quot;;</span><br><span class="xml">  return true;</span><br><span class="xml">  &#125;else&#123;</span><br><span class="xml">  return false;</span><br><span class="xml">  &#125;</span><br><span class="xml">  &#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/day07/servlet/doFormServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return dosubmit()&quot;</span>&gt;</span></span><br><span class="xml">      用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;token&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;token&#125;&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//处理提交的servlet</span><br>request.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * String username=request.getParameter(&quot;username&quot;); try &#123;</span><br><span class="hljs-comment"> * Thread.sleep(1000*3); &#125; catch (InterruptedException e) &#123; // TODO</span><br><span class="hljs-comment"> * Auto-generated catch block e.printStackTrace(); &#125;</span><br><span class="hljs-comment"> * System.out.println(&quot;向数据库写用户名&quot;);</span><br><span class="hljs-comment"> */</span><br>String r_token = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;token&quot;</span>)</span>;<br>HttpSession session = request.get<span class="hljs-constructor">Session(<span class="hljs-params">false</span>)</span>;<br><span class="hljs-keyword">if</span> (r_token != null<br><span class="hljs-operator">&amp;&amp; </span>session != null<br><span class="hljs-operator">&amp;&amp; </span>r_token.equals<span class="hljs-constructor">IgnoreCase((String)</span> session.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;token&quot;</span>)</span>)) &#123;<br>request.get<span class="hljs-constructor">Session()</span>.remove<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;token&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;向数据库写用户名&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;重复提交&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>一次性验证码的主要目的就是为了限制人们利用工具软件来暴力猜测密码。<br>服务器程序接收到表单数据后，首先判断用户是否填写了正确的验证码，只有该验证码与服务器端保存的验证码匹配时，服务器程序才开始正常的表单处理流程。<br>密码猜测工具要逐一尝试每个密码的前题条件是先输入正确的验证码，而验证码是一次性有效的，这样基本上就阻断了密码猜测工具的自动地处理过程。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>该刷题了，要开学了，PAT凉凉凉凉凉，该换一个更加积极向上的学习状态了emmmmmmm</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习03-resquest&amp;response</title>
    <link href="/2018/02/01/2018-01-31-javaweb3/"/>
    <url>/2018/02/01/2018-01-31-javaweb3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Web服务器收到客户端的http请求，会针对每一次请求，分别创建一个用于代表请求的request和代表响应的response对象，这里将对两者进行详细的讲述。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>Response对象</strong><br>HttpServletResponse对象服务器的响应。这个对象中封装了向客户端发送数据、发送响应头，发送响应状态码的方法。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setHeader</span><span class="hljs-params">(java.lang.String name, java.lang.String value)</span></span>    Sets <span class="hljs-selector-tag">a</span> response <span class="hljs-selector-tag">header</span> with the given name and value.<br><span class="hljs-function"><span class="hljs-title">setStatus</span><span class="hljs-params">(int sc)</span></span>      Sets the status <span class="hljs-selector-tag">code</span> <span class="hljs-keyword">for</span> this response.<br><span class="hljs-function"><span class="hljs-title">getWriter</span><span class="hljs-params">()</span></span>            Returns <span class="hljs-selector-tag">a</span> PrintWriter <span class="hljs-selector-tag">object</span> that can send character text to the client.<br><span class="hljs-function"><span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span></span>      Returns <span class="hljs-selector-tag">a</span> ServletOutputStream suitable <span class="hljs-keyword">for</span> writing binary data <span class="hljs-keyword">in</span> the response.<br></code></pre></td></tr></table></figure><p>常见应用：</p><p>1.向客户端输出中文数据  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">String <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;中国 &quot;</span>;<br><span class="hljs-comment">//程序以什么码表输出，一定要控制浏览器以什么码表打开</span><br>response.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>OutputStream <span class="hljs-keyword">out</span>=response.getOutputStream();<br><span class="hljs-comment">//out.write(data.getBytes());</span><br><span class="hljs-keyword">out</span>.write(<span class="hljs-keyword">data</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>String <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;中国2 &quot;</span>;<br><br><span class="hljs-comment">//html: &lt;meta&gt;标签模拟一个http响应头</span><br>OutputStream <span class="hljs-keyword">out</span>=response.getOutputStream();<br><span class="hljs-comment">//out.write(data.getBytes());</span><br><span class="hljs-keyword">out</span>.write(<span class="hljs-string">&quot;&lt;meta http-equiv=&#x27;content-type&#x27; content=&#x27;text/html;charset=UTF-8&#x27;&gt;&quot;</span>.getBytes());<br><span class="hljs-keyword">out</span>.write(<span class="hljs-keyword">data</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">String <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;中国q&quot;</span>;<br><span class="hljs-comment">//设置response使用的码表，以控制response以什么码表向浏览器输入数据,默认为ISO-8859-1，字符转字节</span><br>response.setCharacterEncoding(<span class="hljs-string">&quot;GB2312&quot;</span>);<br><span class="hljs-comment">//指定浏览器以什么码表打开服务器发送的数据</span><br>response.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;text/html;charset=GB2312&quot;</span>);<br>PrintWriter <span class="hljs-keyword">out</span>=response.getWriter();<br><span class="hljs-keyword">out</span>.write(<span class="hljs-keyword">data</span>);<span class="hljs-comment">//</span><br>String <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;中国q&quot;</span>;<br><span class="hljs-comment">//该句代码等价于前两句，便捷方法**</span><br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=GB2312&quot;</span>);<br></code></pre></td></tr></table></figure><p>2.文件下载</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">String <span class="hljs-type">path</span> = this.getServletContext().getRealPath(&quot;/download/截图.png&quot;);<br>String filename=<span class="hljs-type">path</span>.substring(<span class="hljs-type">path</span>.lastIndexOf(&quot;\\&quot;)+<span class="hljs-number">1</span>);           //截取文件名<br><br>response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+URLEncoder.encode(filename,&quot;utf-8&quot;));<br>InputStream <span class="hljs-keyword">in</span> = <span class="hljs-keyword">null</span>;<br>OutputStream <span class="hljs-keyword">out</span> =<span class="hljs-keyword">null</span>;<br>try&#123;<br><span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> FileInputStream(<span class="hljs-type">path</span>);<br><span class="hljs-type">int</span> lenth=<span class="hljs-number">0</span>;<br>byte buffer[]=<span class="hljs-built_in">new</span> byte[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">out</span> = response.getOutputStream();<br><span class="hljs-keyword">while</span>((lenth=<span class="hljs-keyword">in</span>.<span class="hljs-keyword">read</span>(buffer))&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(buffer, <span class="hljs-number">0</span>, lenth);<br>&#125;<br>&#125;finally &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">in</span>!=<span class="hljs-keyword">null</span>)&#123;<br>try&#123;<br><span class="hljs-keyword">in</span>.<span class="hljs-keyword">close</span>();<br>&#125;catch (<span class="hljs-keyword">Exception</span> e)&#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">out</span> != <span class="hljs-keyword">null</span>)&#123;<br>try&#123;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();<br>&#125;catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.生成验证码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>  <span class="hljs-comment">//6.设置头控制浏览器不要缓存图片数据</span><br>  resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Expires&quot;</span>,<span class="hljs-string">&quot;-1&quot;</span>)</span>;<br>  resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>)</span>;<br>  resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>)</span>;<br><br>  <span class="hljs-comment">//5.通知浏览器以图片方式打开</span><br>  resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;image/jpeg&quot;</span>)</span>;<br><br>  <span class="hljs-comment">//1.在内存中创建一副图片</span><br>  BufferedImage image = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedImage(80,20,BufferedImage.TYPE_INT_RGB)</span>;<br><br>  <span class="hljs-comment">//2.得到图片,设置底色</span><br>  Graphics2D g = (Graphics2D)image.get<span class="hljs-constructor">Graphics()</span>;<br>  g.set<span class="hljs-constructor">Color(Color.WHITE)</span>;<br>  g.fill<span class="hljs-constructor">Rect(0,0,80,20)</span>;<br>  <span class="hljs-comment">//3.图片上写数据</span><br>  g.set<span class="hljs-constructor">Color(Color.BLUE)</span>;<br>  g.set<span class="hljs-constructor">Font(<span class="hljs-params">new</span> Font(<span class="hljs-params">null</span>,Font.BOLD,20)</span>);<br>  g.draw<span class="hljs-constructor">String(<span class="hljs-params">makeNum</span>()</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><br>  <span class="hljs-comment">//4.将图片写给浏览器</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.get<span class="hljs-constructor">OutputStream()</span>);<br>&#125;<br><span class="hljs-keyword">private</span> String make<span class="hljs-constructor">Num()</span>&#123;<br>  Random r = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Random()</span>;<br>  String num = r.next<span class="hljs-constructor">Int(9999999)</span>+<span class="hljs-string">&quot;&quot;</span>;<br>  StringBuffer sb = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>-num.length<span class="hljs-literal">()</span>;i++) &#123;<br>    sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>  &#125;<br>  num = sb.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>+num;<br>  return num;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>用户名：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>/&gt;<br>密码：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>/&gt;<br>验证码：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;checkcode&quot;</span>&gt;&lt;img src=<span class="hljs-string">&quot;/MMP/ResponseDemo2&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>/&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;注册&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>/&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><p>4.发送http头，控制浏览器定时刷新网页(REFRESH)</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">response</span>.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = new <span class="hljs-type">Random</span>().nextInt(100000)+&quot;&quot;;</span><br><span class="hljs-title">response</span>.getWriter().write(<span class="hljs-class"><span class="hljs-keyword">data</span>);</span><br></code></pre></td></tr></table></figure><p>5.发送http头，控制浏览器缓存当前文档内容</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-type">String</span>  <span class="hljs-class"><span class="hljs-keyword">data</span>=&quot;aaaaa&quot;;</span><br><span class="hljs-title">response</span>.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>, <span class="hljs-type">System</span>.currentTimeMillis()+<span class="hljs-number">3600</span>*<span class="hljs-number">1000</span>);<br><span class="hljs-title">response</span>.getWriter().write(<span class="hljs-class"><span class="hljs-keyword">data</span>);</span><br></code></pre></td></tr></table></figure><p>6.通过response实现请求重定向。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">response</span><span class="hljs-selector-class">.setStatus</span>(<span class="hljs-number">302</span>);<span class="hljs-comment">// 302状态码和location头即可实现重定向</span><br><span class="hljs-selector-tag">response</span><span class="hljs-selector-class">.setHeader</span>(<span class="hljs-string">&quot;location&quot;</span>, <span class="hljs-string">&quot;/day06/index.jsp&quot;</span>);<br><span class="hljs-selector-tag">response</span><span class="hljs-selector-class">.sendRedirect</span>(<span class="hljs-string">&quot;/day06/index.jsp&quot;</span>);<br></code></pre></td></tr></table></figure><p>getOutputStream和getWriter方法分别用于得到输出二进制数据、输出文本数据的ServletOuputStream、Printwriter对象。<br>getOutputStream和getWriter这两个方法互相排斥，调用了其中的任何一个方法后，就不能再调用另一方法，包括转发时。  </p><p><strong>Request对象</strong><br>HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求头中的所有信息都封装在这个对象中，开发人员通过这个对象的方法，可以获得客户这些信息。<br>常见应用：<br>1.获取头相关数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String headValue=request.get<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Accept-Encoding&quot;</span>)</span>;    <span class="hljs-comment">//设置客户端浏览器所能够支持的返回压缩格式。</span><br>Enumeration e=request.get<span class="hljs-constructor">HeaderNames()</span>;<br><span class="hljs-keyword">while</span>(e.has<span class="hljs-constructor">MoreElements()</span>)&#123;<br>String value=(String) e.next<span class="hljs-constructor">Element()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(value);<br>&#125;<br><br>e=request.get<span class="hljs-constructor">HeaderNames()</span>;<br><span class="hljs-keyword">while</span>(e.has<span class="hljs-constructor">MoreElements()</span>)&#123;<br>String name=(String) e.next<span class="hljs-constructor">Element()</span>;<br>String value=request.get<span class="hljs-constructor">Header(<span class="hljs-params">name</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;name=&quot;</span>+name+<span class="hljs-string">&quot;,value=&quot;</span>+value);<br>&#125;<br>&#125;<br><br>String value=request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(value);<br><br>Enumeration e=request.get<span class="hljs-constructor">ParameterNames()</span>;<br><span class="hljs-keyword">while</span>(e.has<span class="hljs-constructor">MoreElements()</span>)&#123;<br>String name=(String) e.next<span class="hljs-constructor">Element()</span>;<br>value=request.get<span class="hljs-constructor">Parameter(<span class="hljs-params">name</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(name+<span class="hljs-string">&quot;=&quot;</span>+value);<br>&#125;<br><br>String value2<span class="hljs-literal">[]</span>=request.get<span class="hljs-constructor">ParameterValues(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br><span class="hljs-keyword">for</span>(String v:value2)&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;u=&quot;</span>+v);<br>&#125;<br><br>Map&lt;String,String<span class="hljs-literal">[]</span>&gt; map=request.get<span class="hljs-constructor">ParameterMap()</span>;<br>User user=<span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>User formbean=<span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanUtils</span>.</span></span>populate(user, map);<span class="hljs-comment">//用map集合填充bean</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanUtils</span>.</span></span>copy<span class="hljs-constructor">Properties(<span class="hljs-params">user</span>, <span class="hljs-params">formbean</span>)</span>;<span class="hljs-comment">//bean的拷贝</span><br>&#125; catch (Exception e1) &#123;<br>e1.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(user);<br><br>InputStream <span class="hljs-keyword">in</span>=request.get<span class="hljs-constructor">InputStream()</span>;<br> byte buffer<span class="hljs-literal">[]</span>=<span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br> <span class="hljs-built_in">int</span> len=<span class="hljs-number">0</span>;<br> <span class="hljs-keyword">while</span>((len=<span class="hljs-keyword">in</span>.read(buffer))&gt;<span class="hljs-number">0</span>)&#123;<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">buffer</span>,0,<span class="hljs-params">len</span>)</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>2.各种表单输入项数据的获取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>带数据给requestDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Url后跟中文数据要编码后提交--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/day06/servlet/requestDemo3&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>     用户名1<br>:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        密码:<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        性别:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> /&gt;</span>男<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> /&gt;</span>女 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>        所在地:<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cs&quot;</span>&gt;</span>长沙<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        爱好：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> =<span class="hljs-string">&quot;likes&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;single&quot;</span> /&gt;</span>唱歌<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> =<span class="hljs-string">&quot;likes&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dance&quot;</span> /&gt;</span>跳舞<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> =<span class="hljs-string">&quot;likes&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span> /&gt;</span>篮球<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> =<span class="hljs-string">&quot;likes&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;football&quot;</span> /&gt;</span>足球<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        备注：<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span>  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        大头照<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br>request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;gender&quot;</span>)</span>;<br>request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;city&quot;</span>)</span>;<br>String<span class="hljs-literal">[]</span> likes=request.get<span class="hljs-constructor">ParameterValues(<span class="hljs-string">&quot;likes&quot;</span>)</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;likes!=null<span class="hljs-operator"> &amp;&amp; </span>i&lt;likes.length;i++)&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(likes<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>&#125;<br>request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;description&quot;</span>)</span>;<br>request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;id&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>3.请求参数的中文乱码问题</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//解决POST乱码</span><br>request.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>String username=request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(username);<br><br><span class="hljs-comment">// 解决Get方式提交的乱码</span><br>String username2=request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username2&quot;</span>)</span>;<br>username2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">username2</span>.<span class="hljs-params">getBytes</span>(<span class="hljs-string">&quot;iso-8859-1&quot;</span>)</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(username2);<br><br><span class="hljs-comment">//无乱码</span><br>request.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>String username=request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>response.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;gb2312&quot;</span>)</span>;<br>response.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/htm;charset=gb2312&quot;</span>)</span>;<br>response.get<span class="hljs-constructor">Writer()</span>.write(username);<br></code></pre></td></tr></table></figure><p>request对象实现请求转发：请求转发指一个web资源收到客户端请求后，通知服务器去调用另外一个web资源进行处理。<br>请求转发的应用场景：MVC设计模式  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//servlet中</span><br><span class="hljs-keyword">String</span> message=<span class="hljs-string">&quot;aaaaaa&quot;</span>;<br>request.<span class="hljs-built_in">setAttribute</span>(<span class="hljs-string">&quot;data&quot;</span>, message);<br>request.<span class="hljs-built_in">getRequestDispatcher</span>(<span class="hljs-string">&quot;/mesage.jsp&quot;</span>).forward(request, response);<br><br><span class="hljs-comment">//Jsp中</span><br>&lt;%<br>    <span class="hljs-keyword">String</span> mess=(<span class="hljs-keyword">String</span>)request.<span class="hljs-built_in">getAttribute</span>(<span class="hljs-string">&quot;message&quot;</span>);<br>    out.<span class="hljs-built_in">write</span>(mess);    <br>%&gt;<br></code></pre></td></tr></table></figure><p><strong>Tip：请求重定向和请求转发的区别</strong><br>一个web资源收到客户端请求后，通知服务器去调用另外一个web资源进行处理，称之为请求转发。<br>一个web资源收到客户端请求后，通知浏览器去访问另外一个web资源，称之为请求重定向。</p><p>RequestDispatcher.forward方法只能将请求转发给同一个WEB应用中的组件；而HttpServletResponse.sendRedirect 方法还可以重定向到同一个站点上的其他应用程序中的资源，甚至是使用绝对URL重定向到其他站点的资源。   </p><p>如果传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录；如果创建RequestDispatcher对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。   </p><p>调用HttpServletResponse.sendRedirect方法重定向的访问过程结束后，浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；调用RequestDispatcher.forward 方法的请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。</p><p>HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，响应的结果就是告诉浏览器去重新发出对另外一个URL的访问请求；RequestDispatcher.forward方法在服务器端内部将请求转发给另外一个资源，浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。   </p><p>RequestDispatcher.forward方法的调用者与被调用者之间共享相同的request对象和response对象，它们属于同一个访问请求和响应过程；而HttpServletResponse.sendRedirect方法调用者与被调用者使用各自的request对象和response对象，它们属于两个独立的访问请求和响应过程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1038. Recover the Smallest Number (30) -PAT甲级</title>
    <link href="/2018/01/31/2018-01-31-PAT-1038/"/>
    <url>/2018/01/31/2018-01-31-PAT-1038/</url>
    
    <content type="html"><![CDATA[<p>Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given {32, 321, 3214, 0229, 87}, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case gives a positive integer N (&lt;=10000) followed by N number segments. Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the smallest number in one line. Do not output leading zeros.</p><p><strong>Sample Input:</strong><br>5 32 321 3214 0229 87<br><strong>Sample Output:</strong><br>22932132143287</p><p>题目大意：给n个字符串，输出组合最大的，前导0不输出。<br>分析：水题，秒用cmp排序。 注意要写a+b&lt;b+a而不是纯字典序a&lt;b，反例：2，21。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(string a,string b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b&lt;b+a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    string a[<span class="hljs-number">10005</span>],s=<span class="hljs-string">&quot;&quot;</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a,a+n,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        s+=a[i];<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(!flag&amp;&amp;s[i]==<span class="hljs-string">&#x27;0&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>        cout&lt;&lt;s[i];<br>        flag=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)cout&lt;&lt;<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1037. Magic Coupon (25) -PAT甲级</title>
    <link href="/2018/01/31/2018-01-31-PAT-1037/"/>
    <url>/2018/01/31/2018-01-31-PAT-1037/</url>
    
    <content type="html"><![CDATA[<p>The magic shop in Mars is offering some magic coupons. Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back! What is more, the shop also offers some bonus product for free. However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!</p><p>For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M$) where a negative value corresponds to a bonus product. You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back. On the other hand, if you apply coupon 3 to product 4, you will have to pay M$12 to the shop.</p><p>Each coupon and each product may be selected at most once. Your task is to get as much money back as possible.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers. Then the next line contains the number of products NP, followed by a line with NP product values. Here 1&lt;= NC, NP &lt;= 105, and it is guaranteed that all the numbers will not exceed 230.</p><p><strong>Output Specification:</strong></p><p>For each test case, simply print in a line the maximum amount of money you can get back.</p><p><strong>Sample Input:</strong><br>4<br>1 2 4 -1<br>4<br>7 6 -2 -3<br><strong>Sample Output:</strong><br>43   </p><p>题目大意：两个数组取相同个数的数，一对对乘起来总和最大。<br>分析：水题，排序，从小到大取都小于零的，从大到小取都大于零的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,i,j;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">100005</span>],b[<span class="hljs-number">100005</span>];<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;a[i];<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>        cin&gt;&gt;b[i];<br>    <span class="hljs-built_in">sort</span>(a,a+n);<br>    <span class="hljs-built_in">sort</span>(b,b+m);<br>    i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;j&lt;m&amp;&amp;a[i]&lt;<span class="hljs-number">0</span>&amp;&amp;b[j]&lt;<span class="hljs-number">0</span>)&#123;<br>        sum+=a[i]*b[j];<br>        i++;j++;<br>    &#125;<br>    i=n<span class="hljs-number">-1</span>,j=m<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span>&amp;&amp;j&gt;=<span class="hljs-number">0</span>&amp;&amp;a[i]&gt;<span class="hljs-number">0</span>&amp;&amp;b[j]&gt;<span class="hljs-number">0</span>)&#123;<br>        sum+=a[i]*b[j];<br>        i--;j--;<br>    &#125;<br>    cout&lt;&lt;sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习02-Servlet相关</title>
    <link href="/2018/01/30/2018-01-30-javaweb2/"/>
    <url>/2018/01/30/2018-01-30-javaweb2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前的关于Servlet&amp;JSP的学习知识自己阅读书籍之后的笔记整理，尚未自己动手写工程项目，一些细节上的知识点也并没有学以致用，现在将通过半个月的整理，结合方老师的视频，实操工程项目，将整个Javaweb的知识完全，透彻地掌握，并将认真的记录这次的博客笔记!!!</p><p>ps:该篇讲述的是 <strong>Servlet相关的细节问题</strong> ，<strong>读取资源文件的三种方式</strong> 以及介绍 <strong>ServletConfig &amp; ServletContext</strong> 两个重要概念</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>由于客户端是通过URL地址访问web服务器中的资源，所以Servlet程序若想被外界访问，必须把servlet程序映射到一个URL地址上，这个工作在web.xml文件中使用<servlet>元素和<servlet-mapping>元素完成，前者用于注册Servlet，后者用于映射访问地址。例如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;web-app&gt;</span><br><span class="hljs-params">&lt;servlet&gt;</span><br><span class="hljs-params">&lt;servlet-name&gt;</span>AnyName<span class="hljs-params">&lt;/servlet-name&gt;</span><br><span class="hljs-params">&lt;servlet-class&gt;</span>HelloServlet<span class="hljs-params">&lt;/servlet-class&gt;</span><br><span class="hljs-params">&lt;/servlet&gt;</span><br><span class="hljs-params">&lt;servlet-mapping&gt;</span><br><span class="hljs-params">&lt;servlet-name&gt;</span>AnyName<span class="hljs-params">&lt;/servlet-name&gt;</span><br><span class="hljs-params">&lt;url-pattern&gt;</span><span class="hljs-meta-keyword">/demo/</span>hello.html<span class="hljs-params">&lt;/url-pattern&gt;</span><br><span class="hljs-params">&lt;/servlet-mapping&gt;</span><br><span class="hljs-params">&lt;/web-app&gt;</span><br></code></pre></td></tr></table></figure><p>同一个Servlet可以被映射到多个URL上，即多个<servlet-mapping>元素的<servlet-name>子元素的设置值可以是同一个Servlet的注册名。<br>在Servlet映射到的URL中也可以使用*通配符，但是只能有两种固定的格式：一种格式是“*.扩展名”，另一种格式是以正斜杠（/）开头并以“/*”结尾。</p><p>Servlet是一个供其他Java程序（Servlet引擎）调用的Java类，它不能独立运行，它的运行完全由Servlet引擎来控制和调度。</p><p>针对客户端的多次Servlet请求，通常情况下，服务器只会创建一个Servlet实例对象，也就是说Servlet实例对象一旦创建，它就会驻留在内存中，为后续的其它请求服务，直至web容器退出，servlet实例对象才会销毁。</p><p>在Servlet的整个生命周期内，Servlet的init方法只被调用一次。而对一个Servlet的每次访问请求都导致Servlet引擎调用一次servlet的service方法。对于每次访问请求，Servlet引擎都会创建一个新的HttpServletRequest请求对象和一个新的HttpServletResponse响应对象，然后将这两个对象作为参数传递给它调用的Servlet的service()方法，service方法再根据请求方式分别调用doXXX方法。<br>如果在<servlet>元素中配置了一个<load-on-startup>元素，那么WEB应用程序在启动时，就会装载并创建Servlet的实例对象、以及调用Servlet实例对象的init()方法。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;servlet&gt;<br>&lt;servlet-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">invoker</span>&lt;/servlet-<span class="hljs-type">name</span>&gt;<br>&lt;servlet-<span class="hljs-keyword">class</span>&gt;<br>org.apache.catalina.servlets.InvokerServlet<br>&lt;/servlet-<span class="hljs-keyword">class</span>&gt;<br>&lt;<span class="hljs-keyword">load</span>-<span class="hljs-keyword">on</span>-startup&gt;<span class="hljs-number">2</span>&lt;/<span class="hljs-keyword">load</span>-<span class="hljs-keyword">on</span>-startup&gt;<br>&lt;/servlet&gt;<br></code></pre></td></tr></table></figure><p>是一个正整数，数字越小，先启动。<br>用途：为web应用写一个InitServlet，这个servlet配置为启动时装载，为整个web应用创建必要的数据库表和数据。<br>如果某个Servlet的映射路径仅仅为一个正斜杠（/），那么这个Servlet就成为当前Web应用程序的缺省Servlet。<br>凡是在web.xml文件中找不到匹配的<servlet-mapping>元素的URL，它们的访问请求都将交给缺省Servlet处理，也就是说，缺省Servlet用于处理所有其他Servlet都不处理的访问请求。<br>在&lt;tomcat的安装目录&gt;\conf\web.xml文件中，注册了一个名称为org.apache.catalina.servlets.DefaultServlet的Servlet，并将这个Servlet设置为了缺省Servlet。<br>当访问Tomcat服务器中的某个静态HTML文件和图片时，实际上是在访问这个缺省Servlet。</p><p><strong>线程安全</strong><br>当多个客户端并发访问同一个Servlet时，web服务器会为每一个客户端的访问请求创建一个线程，并在这个线程上调用Servlet的service方法，因此service方法内如果访问了同一个资源的话，就有可能引发线程安全问题。<br>如果某个Servlet实现了SingleThreadModel接口，那么Servlet引擎将以单线程模式来调用其service方法。<br>SingleThreadModel接口中没有定义任何方法，只要在Servlet类的定义中增加实现SingleThreadModel接口的声明即可。<br>对于实现了SingleThreadModel接口的Servlet，Servlet引擎仍然支持对该Servlet的多线程并发访问，其采用的方式是产生多个Servlet实例对象，并发的每个线程分别调用一个独立的Servlet实例对象。<br>实现SingleThreadModel接口并不能真正解决Servlet的线程安全问题，因为Servlet引擎会创建多个Servlet实例对象，而真正意义上解决多线程安全问题是指一个Servlet实例对象被多个线程同时调用的问题。事实上，在Servlet API 2.4中，已经将SingleThreadModel标记为Deprecated（过时的）。<br>//子类在覆盖父类的方法是，不能抛出比父类更多的异常   </p><p><strong>ServletConfig对象</strong><br>在Servlet的配置文件中，可以使用一个或多个<init-param>标签为servlet配置一些初始化参数。<br>当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，程序员通过ServletConfig对象就可以得到当前servlet的初始化参数信息。<br>阅读ServletConfig API，并举例说明该对象的作用：  </p><ul><li>获得字符集编码</li><li>获得数据库连接信息</li><li>获得配置文件，查看struts案例的web.xml文件</li></ul><p><strong>ServletContext对象</strong><br>WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。</p><p>ServletContext对象被包含在ServletConfig对象中，开发人员在编写servlet时，可以通过ServletConfig.getServletContext方法获得对ServletContext对象的引用。</p><p>由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现通讯。ServletContext对象通常也被称之为context域对象。<br>关于ServletConetxt的应用：<br>1.多个Servlet共享数据  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>　　　　public void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response)<span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>　　　　<span class="hljs-comment">//得到servletContext</span><br>　　　　<span class="hljs-type">ServletContext</span> context=<span class="hljs-keyword">this</span>.getServletConfig().getServletContext();<br>　　　　<span class="hljs-type">ServletContext</span> context2=<span class="hljs-keyword">this</span>.getServletContext();<br>　　　　<span class="hljs-type">String</span> data=<span class="hljs-string">&quot;aaaaa&quot;</span>;<br>　　　　context.setAttribute(<span class="hljs-string">&quot;data&quot;</span>, data);<br>　　　　&#125;<br>　　　　&#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>public void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response)<br>　　<span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>　<span class="hljs-type">String</span> value = (<span class="hljs-type">String</span>) <span class="hljs-keyword">this</span>.getServletContext().getAttribute(<span class="hljs-string">&quot;data&quot;</span>);<br>　response.getOutputStream().write(value.getBytes());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.获取WEB应用的初始化参数　</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&lt;context-<span class="hljs-built_in">param</span>&gt;<br>　&lt;<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;data&lt;/<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;<br>&lt;<span class="hljs-built_in">param</span>-value&gt;zzzz&lt;/<span class="hljs-built_in">param</span>-value&gt;<br>&lt;/context-<span class="hljs-built_in">param</span>&gt;this.getServletContext().getAttribute(<span class="hljs-string">&quot;data&quot;</span>);<br></code></pre></td></tr></table></figure><p>3.实现Servlet的转发　　</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">RequestDispatcher rd=<span class="hljs-keyword">this</span>.getServletContext().getRequestDispatcher(<span class="hljs-string">&quot;/1.jsp&quot;</span>);<br>rd.forward(request, response);<br></code></pre></td></tr></table></figure><p><strong>利用ServletContext对象读取资源文件</strong><br>得到文件路径读取资源文件的几种方式：<br>1.传统方式，做web工程时不建议使用，会在tomcat服务器的bin目录下寻找，需要手动添加文件。ps：java原则，代码由谁运行，则路径相对于谁(tomcat使用JVM运行代码)。　　</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>  FileInputStream <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;db.properties&quot;</span>)</span>;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-keyword">in</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.通过ServletContext管理web工程下的资源~　　</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test</span><br>username=root<br>password=root<br>db.properties放在 src目录下,因为该目录下的资源文件发布时会发到/WEB-INF/classes目录下<br><br>InputStreamin=this.get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>)</span>;<br><span class="hljs-comment">//InputStreamin=this.getServletContext().getResourceAsStream(&quot;db.properties&quot;);   放在webroot下时</span><br>Properties props=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br>props.load(<span class="hljs-keyword">in</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(props.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;url&quot;</span>)</span>);<br><span class="hljs-comment">//也可以先用getRealPath获取绝对路径然后采用传统方法</span><br></code></pre></td></tr></table></figure><p>3.使用类装载器方式　　</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>　<span class="hljs-meta">@Override</span><br>public void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-comment">//获取到装在当前类的类装载器(专业~不适合用于大文件，会导致jvm内存溢出)</span><br>    <span class="hljs-type">ClassLoader</span> loader = <span class="hljs-type">ServletContextDemo4</span>.<span class="hljs-keyword">class</span>.getClassLoader();<br><br>    <span class="hljs-type">InputStream</span> in = loader.getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br>    <span class="hljs-comment">//InputStream in = loader.getResourceAsStream(&quot;context/db.properties&quot;);  在包下的资源文件</span><br>    <span class="hljs-type">Properties</span> prop = <span class="hljs-keyword">new</span> <span class="hljs-type">Properties</span>();<br>    prop.load(in);<br>    <span class="hljs-type">System</span>.out.println(prop.getProperty(<span class="hljs-string">&quot;url&quot;</span>));<br>　&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.对于大文件操作　　</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//读取aaa.mp4，并拷贝到e:\根目录下</span><br>　<span class="hljs-comment">//获得文件名</span><br>　<span class="hljs-keyword">String</span> path = <span class="hljs-keyword">this</span>.<span class="hljs-built_in">getServletContext</span>().<span class="hljs-built_in">getRealPath</span>(<span class="hljs-string">&quot;/WEB-INF/classes/aaa.mp4&quot;</span>);<br>　path = path.<span class="hljs-built_in">substring</span>(path.<span class="hljs-built_in">lastIndexOf</span>(<span class="hljs-string">&quot;\\&quot;</span>)+<span class="hljs-number">1</span>);<br><br>FileInputStream in = <span class="hljs-keyword">this</span>.<span class="hljs-built_in">getServletContext</span>().<span class="hljs-built_in">getResourceAsStream</span>(<span class="hljs-string">&quot;/WEB-INF/classes/aaa.mp4&quot;</span>)<br><span class="hljs-keyword">byte</span> buffer[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br>    FileOutputStream out = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutStream</span>(<span class="hljs-string">&quot;e:\\&quot;</span> + filename);<br>    <span class="hljs-keyword">while</span>(len=in.<span class="hljs-built_in">read</span>(buffer)&gt;<span class="hljs-number">0</span>)&#123;<br>    　out.<span class="hljs-built_in">write</span>(buffer,<span class="hljs-number">0</span>,len);<br>    &#125;<br>    out.<span class="hljs-built_in">close</span>();<br>  　in.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p><strong>缓存的应用</strong><br><img src="/img/huancun.jpg" alt="img"><br>一个网站有很多静态资源，例如css文件、html页面、gif图片等等，这些文件一旦创建，有可能永远不会更新。当客户端第一次访问这些文件时，服务器在把文件数据交给客户端的同时，就应该通知客户端缓存这些文件，以后客户端每次访问，服务器如果发现文件没更新，则应要客户端去拿它缓存中的文件，以减轻服务器的压力。</p><p>编程：使用一个servlet读取一个文件数据给客户端，当文件数据未更新时，通知客户端去访问它缓存中的数据，如果文件数据更新了，则向客户端返回最新数据。</p><p>Tomcat服务器中的所有静态web资源，都是由一个缺省servlet负责读取回送给客户端的，它就是以上方式来提升服务器的性能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>public void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>   <span class="hljs-type">String</span> data = <span class="hljs-string">&quot;abc&quot;</span>;<br>     reponse.setDataHeader(<span class="hljs-string">&quot;expires&quot;</span>,<span class="hljs-type">System</span>.currentTimeMillis()+<span class="hljs-number">24</span>*<span class="hljs-number">3600</span>*<span class="hljs-number">1000</span>);<br><br>     response.getOutputStream().write(data.getBytes());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ServletConfig-与-ServletContext"><a href="#ServletConfig-与-ServletContext" class="headerlink" title="ServletConfig 与 ServletContext"></a>ServletConfig 与 ServletContext</h2><h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4><p>Web容器启动后，读取web.xml的设置，根据每个Servlet设置，在Servlet类加载并实例化时，为每个Servlet自动生成一个ServletConfig对象，并在调用servlet的init方法时，将ServletConfig对象传递给Servlet。进而，程序员通过Servlet对象得到当前servlet的初始化参数信息。</p><p>在xml配置文件中，可以用一个或多个<init-param>标签为servlet配置一些初始化参数。</p><p>在继承HttpServelt后，通常会重写无参数的init()方法以取得Servlet的初始参数。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddMessgae</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServelt</span></span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-type">PARAM1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-type">PARAM2</span>;<br>  public void init() <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>&#123;<br>    <span class="hljs-keyword">super</span>.init();<br>    <span class="hljs-type">PARAM1</span>=getInitParameter(<span class="hljs-string">&quot;PARAM1&quot;</span>);<br>    <span class="hljs-type">PARAM2</span>=getInitParameter(<span class="hljs-string">&quot;PARAM2&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>整个Web应用程序加载Web容器后，容器自动生成一个Servlet对象代表整个应用程序，并设置给ServletConfig，通过getServeltContext()方法取得。<br>常用方法：<br>1.getDequestDispatcher() 请求转发，即处理完了，分发到下一个JSP页面或下一个Action继续处理。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.getRequestDispatcher(<span class="hljs-string">&quot;/pages/some.jog&quot;</span>).forward(request,response);<br></code></pre></td></tr></table></figure><p>2.getResourcePaths() 获取Web应用的某个目录有哪些文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Iterator</span>&lt;<span class="hljs-keyword">String</span>&gt;avatars=getServletContext().getResourcePaths(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-built_in">iterator</span>();<br><span class="hljs-keyword">while</span>(avatars.hasNext())&#123;<br>  <span class="hljs-keyword">String</span> avatar = avatars.next();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.getResourceAsStream() 在Web应用程序中读取某个文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;filename&quot;</span>).<span class="hljs-built_in">getAbsolutePath</span>());<br></code></pre></td></tr></table></figure><p><strong>ServletContext初始参数:</strong></p><p>在xml配置文件中，可以用一个或多个<context-param>标签为servlet配置一些初始化参数。</p><p>何时读取参数？ 在web.xml中设置告知Web容器，在Web应用初始化后或结束销毁前，调用ServletContextListener，实现contextInitialized()或contextDestroyed()，传入ServeltContextEvent，其封装了ServletContext，然后通过ServletContextEvent的getServletContext()方法取得ServletContext，读取初始参数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">contextInitialized</span>(<span class="hljs-params">ServletContextEvent sce</span>)</span>&#123;<br>  ServletContext context = sce.getServletContext();<br>  <span class="hljs-built_in">String</span> avatars = context.getInitParameter(<span class="hljs-string">&quot;AVATAR&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ServletContext属性:</strong></p><p>在整个Web应用程序生命周期内，Servlet所需共享的数据可以设置为ServletContext属性。</p><p>可以通过Servlet的setAttribute()方法设置属性，之后通过getArrtibute()方法取出该属性，移除用removeAttribute()。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> AvatarServlet2 extend HttpServlet&#123;<br>  protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">request</span>,HttpServletResponse <span class="hljs-params">response</span>)</span><br>                                throws ServletException,IOException&#123;<br>    ...<br>    String avatarDir = (String) get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;avatars&quot;</span>)</span>;<br>    Iterator&lt;String&gt;avatars=get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">ResourcePaths(<span class="hljs-params">avataDir</span>)</span>.iterator<span class="hljs-literal">()</span>;<br>    <span class="hljs-keyword">while</span>(avatars.has<span class="hljs-constructor">Next()</span>)&#123;<br>      String avatar = avatars.next<span class="hljs-literal">()</span>.replace<span class="hljs-constructor">First(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)</span>;<br>      out.println(<span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>+avator+<span class="hljs-string">&quot;\&quot;&gt;&quot;</span>);<br>    &#125;<br>    ...<br>  &#125;<br>&#125;<br>Iterator&lt;String&gt;avatars=get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">ResourcePaths(<span class="hljs-string">&quot;/&quot;</span>)</span>.iterator<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">while</span>(avatars.has<span class="hljs-constructor">Next()</span>)&#123;<br>  String avatar = avatars.next<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1036. Boys vs Girls (25) -PAT甲级</title>
    <link href="/2018/01/30/2018-01-30-PAT-1036/"/>
    <url>/2018/01/30/2018-01-30-PAT-1036/</url>
    
    <content type="html"><![CDATA[<p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains a positive integer N, followed by N lines of student information. Each line contains a student’s name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100. It is guaranteed that all the grades are distinct.</p><p><strong>Output Specification:</strong></p><p>For each test case, output in 3 lines. The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade. The third line gives the difference gradeF-gradeM. If one such kind of student is missing, output “Absent” in the corresponding line, and output “NA” in the third line instead.</p><p><strong>Sample Input 1:</strong><br>3<br>Joe M Math990112 89<br>Mike M CS991301 100<br>Mary F EE990830 95<br><strong>Sample Output 1:</strong><br>Mary EE990830<br>Joe Math990112<br>6<br><strong>Sample Input 2:</strong><br>1<br>Jean M AA980920 60<br><strong>Sample Output 2:</strong><br>Absent<br>Jean AA980920<br>NA  </p><p>题目大意：找出女生最高分和男生最低分并输出他们的差，如果没有的输出Absent，都没有输出NA。<br>分析：水题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,f1=<span class="hljs-number">0</span>,f2=<span class="hljs-number">0</span>,grade;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> minn=<span class="hljs-number">105</span>,maxn=<span class="hljs-number">-1</span>;<br>    string name,sex,num,ans1,ans2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;name&gt;&gt;sex&gt;&gt;num&gt;&gt;grade;<br>        <span class="hljs-keyword">if</span>(sex==<span class="hljs-string">&quot;M&quot;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(grade&lt;minn)&#123;<br>                f1=<span class="hljs-number">1</span>;<br>                minn=grade;<br>                ans1=name+<span class="hljs-string">&#x27; &#x27;</span>+num;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(grade&gt;maxn)&#123;<br>                f2=<span class="hljs-number">1</span>;<br>                maxn=grade;<br>                ans2=name+<span class="hljs-string">&#x27; &#x27;</span>+num;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f2)cout&lt;&lt;ans2&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;Absent&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">if</span>(f1)cout&lt;&lt;ans1&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;Absent&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">if</span>(f1&amp;&amp;f2)cout&lt;&lt;maxn-minn&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NA&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1033. To Fill or Not to Fill (25) -PAT甲级</title>
    <link href="/2018/01/30/2018-02-01-PAT-1033/"/>
    <url>/2018/01/30/2018-02-01-PAT-1033/</url>
    
    <content type="html"><![CDATA[<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax (&lt;= 100), the maximum capacity of the tank; D (&lt;=30000), the distance between Hangzhou and the destination city; Davg (&lt;=20), the average distance per unit gas that the car can run; and N (&lt;= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (&lt;=D), the distance between this station and Hangzhou, for i=1,…N. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print “The maximum travel distance = X” where X is the maximum possible distance the car can run, accurate up to 2 decimal places.</p><p><strong>Sample Input 1:</strong><br>50 1300 12 8<br>6.00 1250<br>7.00 600<br>7.00 150<br>7.10 0<br>7.20 200<br>7.50 400<br>7.30 1000<br>6.85 300<br><strong>Sample Output 1:</strong><br>749.17<br><strong>Sample Input 2:</strong><br>50 1300 12 2<br>7.10 0<br>7.00 600<br><strong>Sample Output 2:</strong><br>The maximum travel distance = 1200.00  </p><p>题目大意：一辆车从A地开往B地， 油量上限Cmax，两地相距d,每单位油能跑Davg距离，中间有N个加油站，收费不一，问如何加油能使从A到B所花油费最少，若到不了，输出最远距离。<br>分析：贪心思路，先判断起点若无加油站则输出0.00，在当前油量能到达的最远距离内寻找，若能找到比现油费更便宜的点，加能刚好到达那个点的油，若找不到，找一个油费最低的点，在当前点加满，以此类推，详情见注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">99999999</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">double</span> price,dis;<br>&#125;aa[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.dis&lt;b.dis;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">double</span> cmax,d,davg;<br>    <span class="hljs-keyword">double</span> nowd=<span class="hljs-number">0.0</span>,maxd=<span class="hljs-number">0.0</span>,nowp=<span class="hljs-number">0.0</span>,tp=<span class="hljs-number">0.0</span>,ld=<span class="hljs-number">0.0</span>;<br>    cin&gt;&gt;cmax&gt;&gt;d&gt;&gt;davg&gt;&gt;n;<br>    aa[<span class="hljs-number">0</span>]=&#123;<span class="hljs-number">0.0</span>,d&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;aa[i].price&gt;&gt;aa[i].dis;<br>    <span class="hljs-built_in">sort</span>(aa,aa+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">if</span>(aa[<span class="hljs-number">0</span>].dis)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;The maximum travel distance = 0.00&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> nowp=aa[<span class="hljs-number">0</span>].price;<br>    <span class="hljs-keyword">while</span>(nowd&lt;d)&#123;<br>        maxd=nowd+cmax*davg;<br>        <span class="hljs-keyword">double</span> mind=<span class="hljs-number">0.0</span>,minp=inf;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n&amp;&amp;aa[i].dis&lt;=maxd;i++)&#123;<br>            <span class="hljs-keyword">if</span>(aa[i].dis&lt;=nowd)<span class="hljs-keyword">continue</span>;      <span class="hljs-comment">//筛掉前面的</span><br>            <span class="hljs-keyword">if</span>(aa[i].price&lt;nowp)&#123;             <span class="hljs-comment">//更便宜，加刚好到那个点的油</span><br>                tp+=(aa[i].dis-nowd-ld)*nowp/davg;<br>                ld=<span class="hljs-number">0.0</span>;<br>                nowp=aa[i].price;<br>                nowd=aa[i].dis;<br>                flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(aa[i].price&lt;minp)&#123;              <span class="hljs-comment">//x找尽可能低的</span><br>                minp=aa[i].price;<br>                mind=aa[i].dis;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;                             <span class="hljs-comment">//无更便宜的</span><br>            <span class="hljs-keyword">if</span>(minp!=inf)&#123;                     <span class="hljs-comment">//有尽可能低的，加满</span><br>                tp+=(nowp*(cmax-ld/davg));<br>                ld=cmax*davg-(mind-nowd);<br>                nowp=minp;<br>                nowd=mind;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;                              <span class="hljs-comment">//无尽可能低的，凉了，最后冲一下</span><br>                nowd+=cmax*davg;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The maximum travel distance = %.2f&quot;</span>, nowd);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>,tp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1032. Sharing (25) -PAT甲级</title>
    <link href="/2018/01/30/2018-01-30-PAT-1032/"/>
    <url>/2018/01/30/2018-01-30-PAT-1032/</url>
    
    <content type="html"><![CDATA[<p>To store English words, one method is to use linked lists and store a word letter by letter. To save some space, we may let the words share the same sublist if they share the same suffix. For example, “loading” and “being” are stored as showed in Figure 1.</p><p>Figure 1<br>You are supposed to find the starting position of the common suffix (e.g. the position of “i” in Figure 1).</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains two addresses of nodes and a positive N (&lt;= 105), where the two addresses are the addresses of the first nodes of the two words, and N is the total number of nodes. The address of a node is a 5-digit positive integer, and NULL is represented by -1.</p><p>Then N lines follow, each describes a node in the format:</p><p>Address Data Next</p><p>where Address is the position of the node, Data is the letter contained by this node which is an English letter chosen from {a-z, A-Z}, and Next is the position of the next node.</p><p><strong>Output Specification:</strong></p><p>For each case, simply output the 5-digit starting position of the common suffix. If the two words have no common suffix, output “-1” instead.</p><p><strong>Sample Input 1:</strong><br>11111 22222 9<br>67890 i 00002<br>00010 a 12345<br>00003 g -1<br>12345 D 67890<br>00002 n 00003<br>22222 B 23456<br>11111 L 00001<br>23456 e 67890<br>00001 o 00010<br><strong>Sample Output 1:</strong><br>67890<br><strong>Sample Input 2:</strong><br>00001 00002 4<br>00001 a 10001<br>10001 s -1<br>00002 a 10002<br>10002 t -1<br><strong>Sample Output 2:</strong><br>-1</p><p>题目大意：判断两个单词是否有相同后缀，有则输出其开始相同的位置。<br>分析：水题，用一个next数组记下一个结点，一个num数组记是否出现过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string t;<br>    <span class="hljs-keyword">int</span> n,a,b,x,y;<br>    <span class="hljs-keyword">int</span> next[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">int</span> num[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">mst</span>(next,<span class="hljs-number">-1</span>);<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        cin&gt;&gt;x&gt;&gt;t&gt;&gt;y;<br>        next[x]=y;<br>    &#125;<br>    <span class="hljs-keyword">int</span> s=a;<br>    <span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>        num[s]++;<br>        s=next[s];<br>    &#125;<br>    s=b;<br>    <span class="hljs-keyword">while</span>(s!=<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(num[s])<span class="hljs-keyword">break</span>;<br>        s=next[s];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-number">-1</span>)cout&lt;&lt;s;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d&quot;</span>,s);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1031. Hello World for U (20) -PAT甲级</title>
    <link href="/2018/01/29/2018-01-29-PAT-1031/"/>
    <url>/2018/01/29/2018-01-29-PAT-1031/</url>
    
    <content type="html"><![CDATA[<p>Given any string of N (&gt;=5) characters, you are asked to form the characters into the shape of U. For example, “helloworld” can be printed as:</p><p>h　　!<br>e　　d<br>l　　l<br>lowor  </p><p>That is, the characters must be printed in the original order, starting top-down from the left vertical line with n1 characters, then left to right along the bottom line with n2 characters, and finally bottom-up along the vertical line with n3 characters. And more, we would like U to be as squared as possible – that is, it must be satisfied that n1 = n3 = max { k| k &lt;= n2 for all 3 &lt;= n2 &lt;= N } with n1 + n2 + n3 - 2 = N.<br><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the input string in the shape of U as specified in the description.</p><p><strong>Sample Input:</strong><br>helloworld!<br><strong>Sample Output:</strong><br>h　　!<br>e　　d<br>l　　l<br>lowor    </p><p>题目大意：输出一个尽可能方的 “U”。<br>分析：水题，n1=n3=(len+2)/3   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n1,n2,n3;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">int</span> len=s.<span class="hljs-built_in">length</span>();<br>    n1=n3=(len+<span class="hljs-number">2</span>)/<span class="hljs-number">3</span> ;<br>    n2=len<span class="hljs-number">-2</span>*n1;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n1<span class="hljs-number">-1</span>;i++)&#123;<br>        cout&lt;&lt;s[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n2;j++)cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout&lt;&lt;s[len<span class="hljs-number">-1</span>-i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=n1<span class="hljs-number">-1</span>;j&lt;=len-n1;j++)<br>        cout&lt;&lt;s[j];<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1025. PAT Ranking (25) -PAT甲级</title>
    <link href="/2018/01/29/2018-01-29-PAT-1025/"/>
    <url>/2018/01/29/2018-01-29-PAT-1025/</url>
    
    <content type="html"><![CDATA[<p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive number N (&lt;=100), the number of test locations. Then N ranklists follow, each starts with a line containing a positive integer K (&lt;=300), the number of testees, and then K lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><p>registration_number final_rank location_number local_rank</p><p>The locations are numbered from 1 to N. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><p><strong>Sample Input:</strong><br>2<br>5<br>1234567890001 95<br>1234567890005 100<br>1234567890003 95<br>1234567890002 77<br>1234567890004 85<br>4<br>1234567890013 65<br>1234567890011 25<br>1234567890014 100<br>1234567890012 85<br><strong>Sample Output:</strong><br>9<br>1234567890005 1 1 1<br>1234567890014 1 2 1<br>1234567890001 3 1 2<br>1234567890003 3 1 2<br>1234567890004 5 1 4<br>1234567890012 5 2 2<br>1234567890002 7 1 5<br>1234567890013 8 2 3<br>1234567890011 9 2 4  </p><p>题目大意：N个考场里的人进行成绩排序，输出总排名，原考场号，在各自原考场排名，同分排名一样，按学号先后。<br>分析：水题，vector+结构体排序，用map存了原排名，粗心没看见同分按学号排WA了两次QAQ</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>&#123;</span><br>    string no;<br>    <span class="hljs-keyword">int</span> local;<br>    <span class="hljs-keyword">int</span> grade;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Stu a,Stu b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.grade==b.grade)<span class="hljs-keyword">return</span> a.no&lt;b.no;<br>    <span class="hljs-keyword">return</span> a.grade&gt;b.grade;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,sum=<span class="hljs-number">0</span>;<br>    vector&lt;Stu&gt;my;<br>    map&lt;string,<span class="hljs-keyword">int</span>&gt;mmap;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;m;<br>        <span class="hljs-comment">//sum+=m;</span><br>        vector&lt;Stu&gt;u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            Stu tmp;<br>            cin&gt;&gt;tmp.no&gt;&gt;tmp.grade;<br>            tmp.local=i;<br>            my.<span class="hljs-built_in">push_back</span>(tmp);<br>            u.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(u.<span class="hljs-built_in">begin</span>(),u.<span class="hljs-built_in">end</span>(),cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;m;k++)&#123;<br>            <span class="hljs-keyword">if</span>(!k)mmap[u[k].no]=k+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> mmap[u[k].no]=u[k].grade==u[k<span class="hljs-number">-1</span>].grade?mmap[u[k<span class="hljs-number">-1</span>].no]:k+<span class="hljs-number">1</span>;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(my.<span class="hljs-built_in">begin</span>(),my.<span class="hljs-built_in">end</span>(),cmp);<br>    cout&lt;&lt;my.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;my.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(!i)my[i].rank=i+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> my[i].rank=my[i].grade==my[i<span class="hljs-number">-1</span>].grade?my[i<span class="hljs-number">-1</span>].rank:i+<span class="hljs-number">1</span>;<br>        cout&lt;&lt;my[i].no&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;my[i].rank&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout&lt;&lt;my[i].local&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;mmap[my[i].no]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1023. Have Fun with Numbers (20) -PAT甲级</title>
    <link href="/2018/01/29/2018-01-29-PAT-1023/"/>
    <url>/2018/01/29/2018-01-29-PAT-1023/</url>
    
    <content type="html"><![CDATA[<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!</p><p>Now you are suppose to check if there are more numbers with this property. That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains one positive integer with no more than 20 digits.</p><p><strong>Output Specification:</strong></p><p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not. Then in the next line, print the doubled number.</p><p><strong>Sample Input:</strong><br>1234567899<br><strong>Sample Output:</strong><br>Yes<br>2469135798</p><p>题目大意：给定一个数a，问a*2的组成是否和a一样。</p><p>分析：大数乘法&amp;用一个数组去存1~9的个数就好了，熟练学会大数运算基本操作!!!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    <span class="hljs-keyword">int</span> aa[<span class="hljs-number">25</span>],num[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">0</span>&#125;,up=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;a;<br>    <span class="hljs-keyword">int</span> len=a.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        aa[len<span class="hljs-number">-1</span>-i]=a[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        num[aa[len<span class="hljs-number">-1</span>-i]]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">int</span> tmp=(aa[i]*<span class="hljs-number">2</span>+up)/<span class="hljs-number">10</span>;<br>        aa[i]=(aa[i]*<span class="hljs-number">2</span>+up)%<span class="hljs-number">10</span>;<br>        up=tmp;<br>        num[aa[i]]--;<br>    &#125;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(num[i])&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">if</span>(i==<span class="hljs-number">11</span>)cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">if</span>(up)&#123;j=len;aa[j]=up;&#125;<br>    <span class="hljs-keyword">else</span> j=len<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>)cout&lt;&lt;aa[j--];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1021. Deepest Root (25) -PAT甲级</title>
    <link href="/2018/01/29/2018-01-29-PAT-1021/"/>
    <url>/2018/01/29/2018-01-29-PAT-1021/</url>
    
    <content type="html"><![CDATA[<p>A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called the deepest root.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=10000) which is the number of nodes, and hence the nodes are numbered from 1 to N. Then N-1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.</p><p><strong>Output Specification:</strong></p><p>For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print “Error: K components” where K is the number of connected components in the graph.</p><p><strong>Sample Input 1:</strong><br>5<br>1 2<br>1 3<br>1 4<br>2 5<br><strong>Sample Output 1:</strong><br>3<br>4<br>5<br><strong>Sample Input 2:</strong><br>5<br>1 3<br>1 4<br>2 5<br>3 4<br><strong>Sample Output 2:</strong><br>Error: 2 components</p><p>题目大意：给一个图，即N个点，N-1条边，判断是否是树，若是，输出其直径，可能是多个，若不是，输出有几棵树。</p><p>分析：显然是个dfs…但是一直不是很会，看了网上的题解才写出来的代码.. 标记了几个需要注意的点:</p><ul><li>dfs内先写判断vis，否则会有部分点超时。</li><li>学会用dfs找树的直径，先找一个点出来的最大路径，然后找最大路径的最大值。</li><li>用dfs判断是树还是森林(也可以用并查集)，mst那里需要注意。</li><li>回头多刷几道dfs,bfs好好反思…</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> vis[<span class="hljs-number">10005</span>],deep[<span class="hljs-number">10005</span>];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; edge[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> node)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[node])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    vis[node]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(edge[node].<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;edge[node].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(vis[edge[node][i]]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">int</span> tmp=<span class="hljs-built_in">dfs</span>(edge[node][i]);     <span class="hljs-comment">//**find max deep</span><br>            <span class="hljs-keyword">if</span>(tmp&gt;maxn)maxn=tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxn+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,v1,v2;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        cin&gt;&gt;v1&gt;&gt;v2;<br>        edge[v1].<span class="hljs-built_in">push_back</span>(v2);<br>        edge[v2].<span class="hljs-built_in">push_back</span>(v1);<br>    &#125;<br>    <span class="hljs-keyword">int</span> MAX=<span class="hljs-number">0</span>,num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!num)<span class="hljs-built_in">mst</span>(vis,<span class="hljs-number">0</span>);<br>        deep[i]=<span class="hljs-built_in">dfs</span>(i);<br>        <span class="hljs-keyword">if</span>(deep[i]&gt;MAX)MAX=deep[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=n;j++)&#123;         <span class="hljs-comment">//judge</span><br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                num++;<br>                i=j<span class="hljs-number">-1</span>;                 <span class="hljs-comment">//**</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(num)cout&lt;&lt;<span class="hljs-string">&quot;Error: &quot;</span>&lt;&lt;num+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot; components&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(deep[i]==MAX)<br>                cout&lt;&lt;i&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1017. Queueing at Bank (25) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-28-PAT-1017/"/>
    <url>/2018/01/28/2018-01-28-PAT-1017/</url>
    
    <content type="html"><![CDATA[<p>Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.</p><p>Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 numbers: N (&lt;=10000) - the total number of customers, and K (&lt;=100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.</p><p>Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.</p><p><strong>Sample Input:</strong><br>7 3<br>07:55:00 16<br>17:00:01 2<br>07:59:59 15<br>08:01:00 60<br>08:00:00 30<br>08:00:02 2<br>08:03:00 10<br><strong>Sample Output:</strong><br>8.2</p><p>题目大意：有N个客户和K个排队窗口，之后N行数据分别给出每个客户的到来时间和需要服务时间，问，所有客人等待的平均时间最少为多少。 窗口8点开放，下午5点之后到来的人不算。</p><p>分析：跟之前写过的一道题一样… 直接记录每个窗口的空闲时间就好了，然后遍历每个客人来到时，找到空闲时间最早的窗口，如果小于到来时间，则无需等待，窗口空闲时间更替为该客人到来 <strong>时间+服务时间</strong>，否则总等待时间里加上 <strong>空闲时间-该客户到来时间</strong>，窗口空闲时间更替为 <strong>原空闲时间+服务时间</strong>，注意处理窗口8点开放和5点后不受理即可~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t1;<br>    <span class="hljs-keyword">int</span> t2;<br>&#125;stu[<span class="hljs-number">10005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Stu a,Stu b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.t1&lt;b.t1;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span>&#123;<br>    <span class="hljs-keyword">int</span> n,k,win[<span class="hljs-number">105</span>];<br>    <span class="hljs-keyword">int</span> h,m,s,w,t=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:%d:%d %d&quot;</span>,&amp;h,&amp;m,&amp;s,&amp;w);<br>        <span class="hljs-keyword">if</span>(h*<span class="hljs-number">3600</span>+m*<span class="hljs-number">60</span>+s&gt;<span class="hljs-number">17</span>*<span class="hljs-number">3600</span>)&#123;<span class="hljs-keyword">continue</span>;&#125;<br>        stu[t].t1=h*<span class="hljs-number">3600</span>+m*<span class="hljs-number">60</span>+s;<br>        stu[t].t2=w*<span class="hljs-number">60</span>;<br>        t++;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(stu,stu+t,cmp);<br>    <span class="hljs-keyword">double</span> sum=<span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)win[i]=<span class="hljs-number">3600</span>*<span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<br>        <span class="hljs-built_in">sort</span>(win,win+k);<br>        <span class="hljs-keyword">if</span>(win[<span class="hljs-number">0</span>]&gt;stu[i].t1)&#123;             <span class="hljs-comment">//wait</span><br>            sum+=win[<span class="hljs-number">0</span>]-stu[i].t1;<br>            win[<span class="hljs-number">0</span>]+=stu[i].t2;<br>        &#125;<br>        <span class="hljs-keyword">else</span> win[<span class="hljs-number">0</span>]=stu[i].t1+stu[i].t2;  <span class="hljs-comment">//no wait</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(t)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1lf\n&quot;</span>,sum/<span class="hljs-number">60</span>/t);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0.0\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1016. Phone Bills (25) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-31-PAT-1016/"/>
    <url>/2018/01/28/2018-01-31-PAT-1016/</url>
    
    <content type="html"><![CDATA[<p>A long-distance telephone company charges its customers by the following rules:</p><p>Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p><p>The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p><p>The next line contains a positive number N (&lt;= 1000), followed by N lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (mm:dd:hh:mm), and the word “on-line” or “off-line”.</p><p>For each test case, all dates will be within a single month. Each “on-line” record is paired with the chronologically next record for the same customer provided it is an “off-line” record. Any “on-line” records that are not paired with an “off-line” record are ignored, as are “off-line” records not paired with an “on-line” record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p><p><strong>Output Specification:</strong></p><p>For each test case, you must print a phone bill for each customer.</p><p>Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (dd:hh:mm), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p><p><strong>Sample Input:</strong><br>10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 10<br>10<br>CYLL 01:01:06:01 on-line<br>CYLL 01:28:16:05 off-line<br>CYJJ 01:01:07:00 off-line<br>CYLL 01:01:08:03 off-line<br>CYJJ 01:01:05:59 on-line<br>aaa 01:01:01:03 on-line<br>aaa 01:02:00:01 on-line<br>CYLL 01:28:15:41 on-line<br>aaa 01:05:02:24 on-line<br>aaa 01:04:23:59 off-line<br><strong>Sample Output:</strong><br>CYJJ 01<br>01:05:59 01:07:00 61 $12.10<br>Total amount: $12.10<br>CYLL 01<br>01:06:01 01:08:03 122 $24.40<br>28:15:41 28:16:05 24 $3.85<br>Total amount: $28.25<br>aaa 01<br>02:00:01 04:23:59 4318 $638.80<br>Total amount: $638.80  </p><p>题目大意：打电话，给出24h各时段收费，以及n条通讯记录，格式名字+时间+状态(接or挂)，问每个人的通话时间段和总花费。<br>分析：题目有点难…看了题解做出以下总结。</p><ul><li>用结构体存储通讯记录的姓名，月，天，时，分，对应时间，状态。  </li><li>按照姓名时间排序，数据则为同名on-off,on-ff的数据了。  </li><li>为查找，用map将姓名和结构体 <strong>数组</strong> 匹配，存储该人的所有记录。</li><li>用money函数统计花费，处理时间分天，时，分。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>&#123;</span><br>    string name;<br>    <span class="hljs-keyword">int</span> month,day,hour,minute,time,oo;<br>&#125;stu[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Stu a,Stu b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.name!=b.name?a.name&lt;b.name:a.time&lt;b.time;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">money</span><span class="hljs-params">(Stu x,<span class="hljs-keyword">int</span> *a)</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> total=a[x.hour]*x.minute+a[<span class="hljs-number">24</span>]*<span class="hljs-number">60</span>*x.day;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;x.hour;i++)<br>        total+=a[i]*<span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">return</span> total/<span class="hljs-number">100.0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,a[<span class="hljs-number">25</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">24</span>;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        a[<span class="hljs-number">24</span>]+=a[i];<br>    &#125;<br>    cin&gt;&gt;n;<br>    string temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;stu[i].name;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:%d:%d:%d&quot;</span>,&amp;stu[i].month,&amp;stu[i].day,&amp;stu[i].hour,&amp;stu[i].minute);<br>        cin&gt;&gt;temp;<br>        <span class="hljs-keyword">if</span>(temp==<span class="hljs-string">&quot;on-line&quot;</span>)stu[i].oo=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> stu[i].oo=<span class="hljs-number">0</span>;<br>        stu[i].time+=stu[i].day*<span class="hljs-number">24</span>*<span class="hljs-number">60</span>+stu[i].hour*<span class="hljs-number">60</span>+stu[i].minute;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(stu,stu+n,cmp);<br>    map&lt;string,vector&lt;Stu&gt; &gt;mmap;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(stu[i].name==stu[i<span class="hljs-number">-1</span>].name&amp;&amp;stu[i].oo==<span class="hljs-number">0</span>&amp;&amp;stu[i<span class="hljs-number">-1</span>].oo)&#123;<br>            mmap[stu[i<span class="hljs-number">-1</span>].name].<span class="hljs-built_in">push_back</span>(stu[i<span class="hljs-number">-1</span>]);<br>            mmap[stu[i].name].<span class="hljs-built_in">push_back</span>(stu[i]);<br>        &#125;<br>    &#125;<br>    map&lt;string,vector&lt;Stu&gt; &gt;::iterator it;<br>    <span class="hljs-keyword">for</span>(it=mmap.<span class="hljs-built_in">begin</span>();it!=mmap.<span class="hljs-built_in">end</span>();it++)&#123;<br>        cout&lt;&lt;it-&gt;first;<br>        vector&lt;Stu&gt;temp=it-&gt;second;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %02d\n&quot;</span>,temp[<span class="hljs-number">0</span>].month);<br>        <span class="hljs-keyword">double</span> total=<span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;temp.<span class="hljs-built_in">size</span>();i+=<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">double</span> t=<span class="hljs-built_in">money</span>(temp[i],a)-<span class="hljs-built_in">money</span>(temp[i<span class="hljs-number">-1</span>],a);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d:%02d %02d:%02d:%02d %d $%.2f\n&quot;</span>,temp[i<span class="hljs-number">-1</span>].day,temp[i<span class="hljs-number">-1</span>].hour,temp[i<span class="hljs-number">-1</span>].minute,temp[i].day,temp[i].hour,temp[i].minute,temp[i].time-temp[i<span class="hljs-number">-1</span>].time,t);<br>            total+=t;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Total amount: $%.2f\n&quot;</span>,total);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1014. Waiting in Line (30) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-31-PAT-1014/"/>
    <url>/2018/01/28/2018-01-31-PAT-1014/</url>
    
    <content type="html"><![CDATA[<p>Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p><ul><li>The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.  </li><li>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.  </li><li>Customer[i] will take T[i] minutes to have his/her transaction processed.  </li><li>The first N customers are assumed to be served at 8:00am.</li></ul><p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p><p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window2. Customer5 will wait behind the yellow line.</p><p>At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer5 at 08:10.</p><p><strong>Input</strong></p><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (&lt;=20, number of windows), M (&lt;=10, the maximum capacity of each line inside the yellow line), K (&lt;=1000, number of customers), and Q (&lt;=1000, number of customer queries).</p><p>The next line contains K positive integers, which are the processing time of the K customers.</p><p>The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.</p><p><strong>Output</strong></p><p>For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output “Sorry” instead.</p><p><strong>Sample Input</strong><br>2 2 7 5<br>1 2 6 4 3 534 2<br>3 4 5 6 7<br><strong>Sample Output</strong><br>08:07<br>08:06<br>08:10<br>17:00<br>Sorry  </p><p>题目大意：n个窗口，每个窗口可排m人，k个用户，给出每个用户服务时间。窗口没满入队，否则等候，某列有人走了，进队一个，同时的话选窗口小的，求第q个人的服务结束时间，服务从8点开始，17点后不接受服务，输出Sorry。<br>分析：用结构体存储每队第一个人的结束时间和最后一个人的结束时间，前者计算哪个队伍先空，后者判断自己服务结束时间，一个queue记录每个人的服务时间。<br>前m*n个人依次排入，之后的人找最早空出来的入队。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;algorithm&gt;</span><br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;string.h&gt;</span><br><span class="hljs-comment">#include&lt;queue&gt;</span><br>using namespace std;<br>struct Win&#123;<br>    <span class="hljs-keyword">int</span> t1=<span class="hljs-number">0</span>,t2=<span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-keyword">q</span>;<br>&#125;win[<span class="hljs-number">25</span>];<br><span class="hljs-keyword">int</span> main()&#123;<br>    <span class="hljs-keyword">int</span> n,m,k,<span class="hljs-keyword">q</span>;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">time</span>[<span class="hljs-number">1005</span>],ans[<span class="hljs-number">1005</span>];<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;<span class="hljs-keyword">q</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>        cin&gt;&gt;<span class="hljs-keyword">time</span>[i];<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">index</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> flag[<span class="hljs-number">1005</span>]=<span class="hljs-string">&#123;0&#125;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>&lt;k)&#123;<br>                <span class="hljs-keyword">if</span>(win[j].t2&gt;=<span class="hljs-number">540</span>)flag[<span class="hljs-keyword">index</span>]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(!i)win[j].t1=<span class="hljs-keyword">time</span>[<span class="hljs-keyword">index</span>];<br>                win[j].t2+=<span class="hljs-keyword">time</span>[<span class="hljs-keyword">index</span>];<br>                win[j].q.push(<span class="hljs-keyword">time</span>[<span class="hljs-keyword">index</span>]);<br>                ans[<span class="hljs-keyword">index</span>]=win[j].t2;<br>                //cout&lt;&lt;<span class="hljs-keyword">index</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[<span class="hljs-keyword">index</span>]&lt;&lt;endl;<br>                <span class="hljs-keyword">index</span>++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">index</span>&lt;=k)&#123;<br>        <span class="hljs-keyword">int</span> tmp=win[<span class="hljs-number">0</span>].t1,minn=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(win[i].t1&lt;tmp)&#123;<br>                tmp=win[i].t1;<br>                minn=i;<br>            &#125;<br>        &#125;<br>        win[minn].q.pop();<br>        win[minn].q.push(<span class="hljs-keyword">time</span>[<span class="hljs-keyword">index</span>]);<br>        win[minn].t1+=win[minn].q.front();    <span class="hljs-regexp">//</span>直接+不影响比较<br>        <span class="hljs-keyword">if</span>(win[minn].t2&gt;=<span class="hljs-number">540</span>)flag[<span class="hljs-keyword">index</span>]=<span class="hljs-number">1</span>;<br>        win[minn].t2+=<span class="hljs-keyword">time</span>[<span class="hljs-keyword">index</span>];<br>        ans[<span class="hljs-keyword">index</span>]=win[minn].t2;<br>        <span class="hljs-keyword">index</span>++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> Q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">q</span>;i++)&#123;<br>        cin&gt;&gt;Q;Q--;<br>        <span class="hljs-keyword">if</span>(flag[Q])cout&lt;&lt;<span class="hljs-string">&quot;Sorry&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> a=(ans[Q]+<span class="hljs-number">480</span>)/<span class="hljs-number">60</span>;<br>            <span class="hljs-keyword">int</span> b=(ans[Q]+<span class="hljs-number">480</span>)%60;<br>            <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%02d:%02d\n&quot;</span>,a,b);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1010. Radix (25) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-28-PAT-1010/"/>
    <url>/2018/01/28/2018-01-28-PAT-1010/</url>
    
    <content type="html"><![CDATA[<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary number.</p><p>Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:<br>N1 N2 tag radix<br>Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix.</p><p><strong>Sample Input 1:</strong><br>6 110 1 10<br><strong>Sample Output 1:</strong><br>2<br><strong>Sample Input 2:</strong><br>1 ab 1 2<br><strong>Sample Output 2:</strong><br>Impossible</p><p>题目大意：两个数 N1、N2，标记tag和进制radix，tag表示这个radix是N1还是N2的进制，问对于另一个数是否存在一种进制，使两个数相等，有则输出该进制，反之输出Impossible。</p><p>分析：先将已知进制的数转化为十进制，然后另一个依次找各进制对应数是否与之相等，直接遍历会导致超时，所示引入二分查找。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">tran</span><span class="hljs-params">(ll *a,ll k,ll tmp,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    ll sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>        sum=sum*k+a[i];<br>    <span class="hljs-keyword">if</span>(sum&gt;tmp||sum&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&lt;tmp)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">search</span><span class="hljs-params">(ll *a,ll low,ll high,ll tmp,ll len)</span></span>&#123;<br>    ll l=low,r=high,mid;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>        mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">tran</span>(a,mid,tmp,len)==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">tran</span>(a,mid,tmp,len)&lt;<span class="hljs-number">0</span>)l=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string n1,n2;<br>    <span class="hljs-keyword">int</span> tag,radix;<br>    cin&gt;&gt;n1&gt;&gt;n2&gt;&gt;tag&gt;&gt;radix;<br>    <span class="hljs-keyword">if</span>(tag==<span class="hljs-number">2</span>)<span class="hljs-built_in">swap</span>(n1,n2);<br><br>    ll tmp=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n1.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(n1[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;n1[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            tmp=tmp*radix+(n1[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">else</span> tmp=tmp*radix+(n1[i]-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">10</span>);<br>    &#125;<br>    ll a[<span class="hljs-number">25</span>],low=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n2.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(n2[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;n2[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            a[i]=n2[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">else</span> a[i]=n2[i]-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;low)low=a[i];    <span class="hljs-comment">//找n2最大的</span><br>    &#125;<br>    low++;<br>    ll high=<span class="hljs-built_in">max</span>(low,tmp)+<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cout&lt;&lt;low&lt;&lt;&#x27; &#x27;&lt;&lt;high&lt;&lt;&#x27; &#x27;&lt;&lt;tmp&lt;&lt;&#x27; &#x27;&lt;&lt;n2.length()&lt;&lt;endl;</span><br>    ll ans=<span class="hljs-built_in">search</span>(a,low,high,tmp,n2.<span class="hljs-built_in">length</span>());<br>    <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">0</span>)cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1005. Spell It Right (20) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-28-PAT-1005/"/>
    <url>/2018/01/28/2018-01-28-PAT-1005/</url>
    
    <content type="html"><![CDATA[<p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10100).</p><p><strong>Output Specification:</strong></p><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><p><strong>Sample Input:</strong><br>12345<br><strong>Sample Output:</strong><br>one five  </p><p>题目大意:给定一个数x,以英文形式输出其各位和。<br>分析:水题…  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string number[]=&#123;<span class="hljs-string">&quot;zero&quot;</span>,<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;five&quot;</span>,<span class="hljs-string">&quot;six&quot;</span>,<span class="hljs-string">&quot;seven&quot;</span>,<span class="hljs-string">&quot;eight&quot;</span>,<span class="hljs-string">&quot;nine&quot;</span>&#125;;<br>    string x,y=<span class="hljs-string">&quot;&quot;</span>;<br>    ll ans,sum=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;x.<span class="hljs-built_in">length</span>();i++)<br>        sum+=x[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(!sum)y=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">while</span>(sum)&#123;<br>        y+=(<span class="hljs-string">&#x27;0&#x27;</span>+sum%<span class="hljs-number">10</span>);<br>        sum/=<span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//cout&lt;&lt;y&lt;&lt;&#x27; &#x27;&lt;&lt;y.length();</span><br>    <span class="hljs-keyword">int</span> len=y.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(i!=len)cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout&lt;&lt;number[y[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>双击代码区域可以查看<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1002. A+B for Polynomials (25) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-28-PAT-1002/"/>
    <url>/2018/01/28/2018-01-28-PAT-1002/</url>
    
    <content type="html"><![CDATA[<p>This time, you are supposed to find A+B where A and B are two polynomials.</p><p><strong>Input</strong></p><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p><p><strong>Output</strong></p><p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><p><strong>Sample Input</strong><br>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5<br><strong>Sample Output</strong><br>3 2 1.5 1 2.9 0 3.2  </p><p>题目大意:两个多项式相加，输入n,表示n个非零项,然后输入n组指数和系数。<br>分析：水题，数组开小了给自己蠢哭，暴力就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,e;<br>    <span class="hljs-keyword">double</span> tmp,c[<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0.0</span>&#125;,c1[<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0.0</span>&#125;,c2[<span class="hljs-number">1005</span>]=&#123;<span class="hljs-number">0.0</span>&#125;;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        cin&gt;&gt;e&gt;&gt;tmp;c1[e]=tmp;<br>    &#125;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        cin&gt;&gt;e&gt;&gt;tmp;c2[e]=tmp;<br>    &#125;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1003</span>;i++)&#123;<br>        c[i]=c1[i]+c2[i];<br>        <span class="hljs-keyword">if</span>(c[i])num++;<br>    &#125;<br>    cout&lt;&lt;num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1003</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(c[i])<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %.1lf&quot;</span>,i,c[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1001. A+B Format (20) -PAT甲级</title>
    <link href="/2018/01/28/2018-01-28-PAT-1001/"/>
    <url>/2018/01/28/2018-01-28-PAT-1001/</url>
    
    <content type="html"><![CDATA[<p>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p><p><strong>Input</strong></p><p>Each input file contains one test case. Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000. The numbers are separated by a space.</p><p><strong>Output</strong></p><p>For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p><p><strong>Sample Input</strong><br>-1000000 9<br><strong>Sample Output</strong><br>-999,991  </p><p>题目大意:输入整数ab求和，按 <strong>三位分级法</strong> 输出  。<br>分析:根据题目范围，进行分类输出(一个逗号两个逗号三个逗号)。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a,b,sum;<br>    scanf(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);<br>    sum=a+b;<br>    <span class="hljs-keyword">if</span> (sum&lt;<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);sum=-sum;&#125;<br>    <span class="hljs-keyword">if</span> (sum&gt;=<span class="hljs-number">1000000</span>)<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d,%03d,%03d&quot;</span>,sum/<span class="hljs-number">1000000</span>,(sum/<span class="hljs-number">1000</span>)%1000,(sum%1000));<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum&gt;=<span class="hljs-number">1000</span>)<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d,%03d&quot;</span>,sum/<span class="hljs-number">1000</span>,sum%1000);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PAT甲级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb学习01-Web&amp;HTTP技术</title>
    <link href="/2018/01/27/2018-01-27-javaweb1/"/>
    <url>/2018/01/27/2018-01-27-javaweb1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从该篇开始对于web后端的知识学习，一些概念性的东西从网上拷贝至此，并加以自己的理解和总结。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先介绍 <strong>Web技术</strong> 和 <strong>HTTP通信协议</strong> 这两个专有名词以方便对以下知识点的阅读和学习。<br>然后简单讲述 <strong>Servlet/JSP</strong> , <strong>MVC &amp; Model2</strong> 。</p><h4 id="Web技术"><a href="#Web技术" class="headerlink" title="Web技术"></a>Web技术</h4><p>随着互联网技术的发展，基于HTTP和HTML的web应用急速增长。早期的web应用主要用于浏览新闻等静态页面，用户通过HTTP协议请求服务器上的静态页面，服务器上的web服务器软件接收到请求后，读取URI标示的资源，再加上消息报头发送给客户端浏览器，浏览器负责解析HTML，将结果呈现出来。</p><p>然而随着时间发展，用户已经不满足于仅浏览静态页面。用户需要一些交互操作，获取一些动态结果。如果基于HTTP协议实现服务器端软件增强功能太过复杂，所以需要一些扩展机制来实现用户想要的功能。早期使用的Web服务器扩展机制是CGI（Common Gateway Interface，公共网关接口）。使用这种方法，用户单击某个链接或输入网址来访问CGI程序，web服务器收到请求后，运行该CGI程序，对用户请求进行处理，紧接着将处理结果并产生一个响应，该响应被返回给web服务器，web服务器对响应进行包装，以HTTP响应的方式返回给浏览器。</p><p>CGI程序在一定程度上解决了用户需求。不过还存在一些不足之处，如CGI程序编写困难，响应时间较长，以进程方式运行导致性能受限。于是1997年，sun公司推出了Servlet技术，作为java阵营的CGI解决方案。</p><h4 id="HTTP通信协议"><a href="#HTTP通信协议" class="headerlink" title="HTTP通信协议"></a>HTTP通信协议</h4><p>所谓通信协议，是指架构于 TCP/IP 之上的应用层通信协议，其基本上就是两台计算机间的沟通方式。<br>HTTP基本上是一种基于请求(Request)/相应(Reponse)的通信协议，浏览器在使用HTTP发出请求时，可以有几种请求方法，例如GET、POST、HEAD、PUT、DELETE等。这里只讲编写Servlet或JSP遇到的最常接触的前两者。</p><ul><li>GET请求：从指定的资源请求数据。</li><li>POST请求：向指定的资源提交要被处理的数据。</li></ul><p>下面开始上主菜了~</p><h2 id="Servlet-JSP"><a href="#Servlet-JSP" class="headerlink" title="Servlet/JSP"></a>Servlet/JSP</h2><p>Servlet是用Java编写的一个Java类，通过Web容器进行管理。容器是Java编写的一个应用程序，负责与服务器沟通。JSP上可以直接编写HTML，并根据需要添加动态程序部分，容器会将JSP网页译为Servlet进行管理。大致线性关系如图</p><p><img src="/img/post-1.jpg" alt="img"></p><p>当有请求时，使用容器进行处理，开启线程决定由哪个Servlet处理，多个请求则采取多线程。我们初学时接触的Tomcat，其作为一个web容器但本身附带一个简单的HTTP服务器，可以直接打开该服务器部署Servlt，但两者其实不是一个东西，要区分开。<br>下面根据以下实例讲述一个基本的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String message;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException</span>&#123;<br>  message = <span class="hljs-string">&quot;Hello World&quot;</span>;                                 <span class="hljs-comment">// 执行必需的初始化</span><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                    HttpServletResponse response)</span>              <span class="hljs-comment">// 设置响应内容类型</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException</span>&#123;<br>      response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<span class="hljs-comment">// 实际的逻辑是在这里</span><br>      PrintWriter out = response.getWriter();<br>      out.println(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span>&#123;                                       <span class="hljs-comment">// 什么也不做</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个Servlet类，首先是继承了HttpServlet类，重写其doXXX()方法。容器收到请求，创建HttpServletRequst，HttpServletResponse对象(会在之后作详细讲述)，作为之后使用的参数，调用方法时就可以获取http请求的相关信息。<br>ps:关于包的设计，与Servlet定义有关的类或接口位于javax.servlet包中，而与HTTP定义有关的类或接口位于javax.servlet.http包中。<br><strong>xml(设置部署描述文件)</strong> ：需要告诉web容器的关于这个Servlet的信息存放在这里，容器根据web.xml找出Servlet去调用方法。</p><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 init () 方法进行初始化。</li><li>Servlet 调用 service() 方法来处理客户端的请求。</li><li>Servlet 通过调用 destroy() 方法终止（结束）。</li></ul><h4 id="MVC与-Model2-简介"><a href="#MVC与-Model2-简介" class="headerlink" title="MVC与 Model2 简介"></a>MVC与 Model2 简介</h4><p>在Servlet程序中夹杂HTML显然是一件很麻烦的事，这不仅导致了编写和维护的不容易，对团队分工也是一大困扰，因而引入MVC去分离两者。<br>MVC是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范，即框架。<br><img src="/img/MVC.jpg" alt="img"><br>简单说MVC的主要目的就是通过控制器的请求转发，切断模型与视图之间的耦合关系，视图需要数据时通过查询模型来取得。将MVC应用至web应用需作一些修正，因为在模型状态发生改变时，无法从HTTP服务器对浏览器发出通知，去要求浏览器查询模型。所以浏览器必须主动发出请求，经过该修正后得到的架构即被称为Model2架构。<br><img src="/img/model2.jpg" alt="img"><br>当以Servlet/JSP技术显示Model2框架时，Servlet扮演了控制器的角色，JSP为视图，模型为封装应用程序状态或业务逻辑。</p><h4 id="HTTP-请求、相应处理"><a href="#HTTP-请求、相应处理" class="headerlink" title="HTTP 请求、相应处理"></a>HTTP 请求、相应处理</h4><p><strong>HttpServletRequest的使用</strong></p><p>HttpServletRequest接口继承ServletRequest接口，后者定义了取得一些通用信息的方法，例如getParameter(),getInputStream()等，前者定义了取得HTTP相关信息的方法，例如getHeader(),getMethod()等。具体方法功能不做描述，虽然HTTP有各种请求方法，但在编写Servelt时绝大多数情况下只处理GET或POST，因此通常只重写doGet()或doPost方法。<br>当请求参数值包括中文时，取得参数时需通过setConutType()来设置。如以下语句：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">response.setContentType(<span class="hljs-string">&quot;text/html;chrset=UTF-8&quot;</span>);      <span class="hljs-regexp">//</span>传送UTF-<span class="hljs-number">8</span>编码的文字<br></code></pre></td></tr></table></figure><p>若要配合浏览器以UTF-8来正确解释文字编码，接受请求时也使用UTF-8编码字符串，则可以在取得任何请求值前执行以下语句：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>还有一种处理方式，可以在取得请求值后通过String的getBytes()取得制定编码来取得该字符串字节数组，再重新构造UTF-8编码的字符串。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String username = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;name&quot;</span>)</span>;<br>String username = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">username</span>.<span class="hljs-params">getBytes</span>(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>请求转发与包含：大多数情况下，应用程序的请求处理和结果相应由不同的Servlet负责，那么就需要考虑请求的转发和包含。<br>可以使用HttpservletRequest的getRequestDispatcher()方法取得RequestDispatcher实例，运行时制定要转发请求的相对URL或绝对URL，代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">RequestDispatcher dispatcher =  <br>request.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-params">some</span>.<span class="hljs-params">do</span>)</span>;<br></code></pre></td></tr></table></figure><p>取得后执行forward()方法转发请求，将ServletRequest、ServletResponse对象作为参数传入，例如：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">dispatcher.forward(<span class="hljs-built_in">request</span>,<span class="hljs-built_in">response</span>);<br></code></pre></td></tr></table></figure><p>执行forward()方法表示目前Servlet/JSP不进行相应，将相应的职责交给下一个转发的对象，若打算先对浏览器做部分相应， 中间再将其他Servlet/JSP包括竟来回应，可执行include()方法:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">dispatcher.<span class="hljs-keyword">include</span>(request,response)；<br></code></pre></td></tr></table></figure><p>ServletRequest属性： 转发过程中必须共享的属性，一般会将下一个处理请求时所需要的对象或数据塞到这个ServletRequest对象中成为属性：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">List books = bookDAO.query(<span class="hljs-string">&quot;some books&quot;</span>);  <br><span class="hljs-built_in">request</span>.setAttribute(<span class="hljs-string">&quot;books&quot;</span>,books);  <br><span class="hljs-built_in">request</span>.getRequestDispatcher(<span class="hljs-string">&quot;result.view&quot;</span>).forward(<span class="hljs-built_in">request</span>,<span class="hljs-built_in">response</span>);<br></code></pre></td></tr></table></figure><p><strong>HttpServletResponse的使用</strong></p><p>HttpServletResponse接口继承ServletResponse接口，后者定义了Servlet回应时需要的各种通用方法，后者则定义了与HTTP相关的回应方法，如Cookie的添加、标头的设置等。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>用重定向方法要求浏览器重新请求一个URL:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">response</span><span class="hljs-selector-class">.sendRedirect</span>(<span class="hljs-string">&quot;http://openhome.cc&quot;</span>)；<br></code></pre></td></tr></table></figure><p>处理请求时发现错误，发送服务器默认状态与错误信息:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">response.sendError(HttpServletResponse.SC_NOT_FOUND)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>大部分情况下，我们会从HttpServletResponse取得PrintWriter实例，用println()对浏览器输出字符，然后有时需要直接对浏览器进行字节输出，这时可以用getOutputStream()方法取得getOutputStream实例，下面看一个应用的例子:</p><pre><code>public class Ebook extends HttpServlet&#123;  protected void doPost(HttpServletRequest request,HttpServletResponse response)          throws ServletException,IOException&#123;                  String passwd = request.getParameter(&quot;passwd&quot;);                  if(&quot;123456&quot;.equals(passwd))&#123;                    response.setContentType(&quot;application/pdf&quot;);                                           //设置响应内容类型                    InputSteam in = this.getServletContext().                                                      getResourceAsStream(&quot;/WEB-INF/jdbc.pdf&quot;);           //取得输入流                    OutputStream out = response.getOutputStream();                                        //取得输出流                    byte[] buffer = new byte[1024];                    int length = -1;                    while((length = in.read(buffer))!=-1)&#123;                                                //读取PDF并输出至浏览器                      out.write(buffer,0,length);                    &#125;                    in.close();                    out.close();                  &#125;          &#125;&#125;</code></pre><p>ps:输入输出流为Java IO的观念，从PDF读入字节数据，再用ServletOutputStream对浏览器进行写出相应。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇博文就先写到这里了，因为真的已经写了好多东西，有点头疼，明天继续补充剩下的一点，给Jervlet&amp;JSP前三章的学习画上一个句号，然后开始PAT刷题之旅，晚上若有时间给第四章之后的学习开个头，溜了溜了~   </p><p>句号已画   —2018.01.28</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于GitHub Pages+Jekyll博客搭建心得</title>
    <link href="/2018/01/27/2018-01-27-build/"/>
    <url>/2018/01/27/2018-01-27-build/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>直接进入主题了，下面简单概述该博客的搭建过程。</p><p>首先，该博客采用了 <strong>GitHub Pages</strong> + <strong>Jekyll</strong> 的技术快速搭建，相较于别的blog方式有着许多天然的优势。</p><ul><li>使用 Jekyll 自己DIY，主题布局可操作性很强</li><li><strong>Markdown</strong> 编写，简单方便，后期能更好地专注于写文，而且，真的很好看！（Markdown是一款轻量级标记语言，能够用简单的语法实现文字排版）</li><li>不需要花钱购买域名，折腾主机，GitHub提供域名和免费的无限空间！！</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>注册GitHub账号，下载 <strong>Atom</strong>，<strong>GitHub Desktop</strong>（或Git） ，网上的教程大多是采用Git的，捣鼓了半天命令行没弄出来，自己瞎整出这样一个Atom+Desktop的搭配， 用Desktop 同步本地和云端的仓库，在Atom上实现代码的修改，之后再好好研究一下Git的用法。</p></li><li><p>这里假设已经懂得GitHub的基本操作。然后，找模板！将其fork并进行改名，必须与用户名一致，然后将其open in Desktop，再在Desktop中 open in Atom ~ 就可以在Atom中对代码进行修改了，修改完保存代码，最好Save All，再在Desktop中commit，Fetch Origin，就能同步github上的代码了。</p></li><li><p>安装 <strong>Jekyll</strong>，为了方便在本地实时查看博客，如果认为不需要或者嫌麻烦可跳过这一步…</p></li></ol><p> 首先，安装 <strong>Ruby</strong>，可参照官网教程，然后配置环境变量，懒人可直接下载ruby installer~ Mac上一般会自带ruby。通过终端运行ruby –version可以检测有没有安装。</p><p> 安装完ruby，之后就是要安装 <strong>DevKit</strong>，和 <strong>gems</strong>，在本地解压。gem是一个ruby的包管理系统，可以用gem很方便的在本地安装ruby应用。</p><blockquote><p>cd yourpath to RubyGems //你解压的位置<br>ruby setup.rb</p></blockquote><p> 前往官网下载对应的DevKit安装包，解压后，初始化创建config.yml文件</p><blockquote><p>cd “C:\DevKit”<br>ruby dk.rb init<br>notepad config.yml</p></blockquote><p> 打开记事本窗口添加一行之前的Ruby路径，回到cmd</p><blockquote><p>ruby dk.rb review<br>ruby dk.rb install</p></blockquote><p> 最后确认gem，安装Jekyll</p><blockquote><p>gem -v</p></blockquote><p>输出</p><blockquote><p>2.0.14  </p></blockquote><blockquote><p>gem install jekyll</p></blockquote><p>4.<br>到这里各种安装就差不多完成了，萌新在这里就卡了很久，网上有些在ruby上直接gem install jeyll就可以了，但是我遭遇了$^&amp;#^%^%&amp;^的问题，问完大佬告知是版本不对，版本不对？？exm？我明明都是新装的，后来发现，md是太新了!!回头又卸了下了2.3版本的Ruby..配置环境变量什么也挺烦的，建议直接用Ruby Installer。</p><p>最后cd到博客文件夹，开启服务器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，就可以实现本地端浏览博客了。</p><p>##代码环节</p><ol start="0"><li>RENAME放需要更改的（买来的）域名，详情百度，不用删了就好了</li><li>一些参数存放在_config.yml 里，根据自己的需要进行修改</li><li>在_layouts里存放着几种不同的布局</li><li>更新提交的博文的markdown格式存放在_posts 里，只需自己添加yaml头文件就好了</li><li>项目内的代码将格式和文本做了分离的处理，尚在摸索中…</li><li>在博客里修改加入了一些自己的东西，捣鼓了小半天</li></ol><ul><li>将图标链接到自己的知乎，Github，微博，在_config修改即可(具体实现代码在_includes\posts\footer内)</li><li>百度统计，自行注册账号拷贝神秘代码更换，同上在_config修改</li><li>评论系统，插入了来必应，原先的太国际化了… 注册账号在评论管理中找到安装代码，然后我就直接在_layouts换掉了对应部分…</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>即使是fork了大佬的模板，这博客的搭建也是充满了坎坷，前前后后花去不少时间，刚解决掉一个麻烦又冒出另一个麻烦，昨天明明有的评论现在怎么又自己消失了，我昨天难不成在做梦么？ 至今博客里还有许多漏洞和需要完善的地方，要加油去研究研究了。总之在这次经历中真的学到了不少的知识，足够我消化好一阵子，一些东西没有讲全讲清，该篇博文也会在之后进行补充。如果你是在博客建立的初期就发现了这里，真的很感谢你的阅读，目前这只是本人自己的经历总结，相比网上的诸多文章逊色不少，目前可能无法作为教程，会尽快做出提升和修改的！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello 2018</title>
    <link href="/2018/01/26/2018-01-26-hello-2018/"/>
    <url>/2018/01/26/2018-01-26-hello-2018/</url>
    
    <content type="html"><![CDATA[<blockquote><p>“Yeah It’s on. ”</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iHan 博客的搭建暂时到这里了。</p><p>算是为这个寒假以及之后的学习开了个好头，</p><p>说来惭愧因为自己在学校里所学的关于前端的三脚猫功夫实在拿不出手，该博客模板fork了Hux大佬的github项目，且看了大量快速教程才磕磕绊绊地做出现在的样子，又因为急于发表第一篇博文以开始日后的进程，网站中仍有部分未完成部分（comments部分尚未实现），将在之后进行完善和补充并抽空理出整个搭建过程及心得。</p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>为何突然心血来潮要开这个博客呢？</p><p>其实这个念头很早就有了，只是一直没有机会去实现。步入大学之后被灌输了太多的理念，不停地学习大量的知识，无法快速地消化掉这些事物，曾经尝试过写手账，存电子笔记，结果都不尽人意，博客给我提供了极好的处理方式，我可以按天地去记录事物，给它们安上标签，并且可以很方便地去回顾他们。而搭建博客和坚持写文（应该可以的吧…）也能使我收获良多。</p><p>可能因为昨天通宵的缘故脑子很短路，无法才思泉涌0.0 ，就简单在此为日后做一个打算吧，这是假期的第二天，刚开始学习简单的Servlet&amp;JSP知识，目前的打算是做一个后端开发程序员，并且从明或后天开始PAT刷题之旅，并于此记录学习总结以及题目的题解， 之后将学习其他的算法知识以及更深入了解web开发。除此之外收获的别的技能以及于生活中的感想和领悟也会时而记录在这里，以及课外的阅读经历（摘记）。</p><hr><p>还没写什么转眼就快十一点了，算了不装了反正现在写啥没什么人看，而且日后也是可以添补修改的吧？明天早起继续日常的学习，总结掉Servlet&amp;JSP前三章的内容，尽量腾出刷PAT的时间并规划算法学习及ACM计划，现在应该舒舒服服去刷我都kindle了，我就是这么热爱读书的一个人~希望以后的代码学习也能如看《明》那样津津有味！！</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>哪会写什么后记？？ 先随便在这个地方放一段喜欢的句子吧~</p><p>在我看来，在这个信息爆炸的时代，知识的稀缺性变的没那么重要了。知识总是在那里，不是在这本书上就说在那本书上，不是在这个网页上就说在那个网页上。你要学，随时都可以。<br>相对的，人的时间和精力变成更稀缺的东西，在有限的时间里，学什么和怎么去学，变得更重要。所以，充分利用大学4年时间，形成一个能提升个人核心竞争力的能力架构，比囤积大量分散的知识，要有价值的多。</p><p>另外，绝大多数人的归宿都不是牛人，在计算机的任何一个领域，做一个靠谱的工程师，就已经很了不起了。</p><p>我们这群人，苦没有真正苦过，爱没有用力爱过。</p><p>每天受着信息大潮的冲击，三观未定又备受曲折。</p><p>贫穷不再是正义，又妄图不让金钱成为唯一的追求。</p><p>过早看到了更大的世界，勤奋却又不过三天。</p><p>热血透不过键盘和屏幕，回忆止于游戏和高考。</p><p>像一群没有根的孩子，在别人的经历和精神里吵闹。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
